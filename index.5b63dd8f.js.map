{"mappings":"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","sources":["<anon>","index.ts","src/add-vocabulary.ts","src/home-menu.ts","src/show-vocabulary.ts","src/vocabulary-training.ts","src/inflect-vocabulary.ts"],"sourcesContent":["\nclass $4d277e047e39cff6$export$69a62912f7243a04 {\n    constructor(){\n        this.vocabulary = [];\n        this.wordIndex = 0;\n        this.enterMode = false;\n        const request = window.indexedDB.open('Vocabulary', 1);\n        request.addEventListener('error', (_)=>{\n            console.error('There is an error. Have fun fixing it. Details:' + request.error);\n        });\n        request.addEventListener('success', (_)=>{\n            this.database = request.result;\n            const transaction = this.database.transaction('vocabulary', 'readonly');\n            transaction.onerror = (_)=>console.error(transaction.error);\n            const objectStore = transaction.objectStore('vocabulary');\n            const req = objectStore.getAll();\n            req.onerror = (_)=>console.error(req.error);\n            req.onsuccess = (_)=>{\n                this.vocabulary = req.result;\n                this.wordIndex = this.vocabulary.length;\n            };\n        });\n        request.addEventListener('upgradeneeded', (event)=>{\n            const db = request.result;\n            const objectStore = db.createObjectStore(`vocabulary`, {\n                autoIncrement: true\n            });\n            objectStore.createIndex(\"latinWord\", \"latinWord\", {\n                unique: false\n            });\n            objectStore.createIndex(\"inflections\", \"inflections\", {\n                unique: false\n            });\n            objectStore.createIndex(\"germanTranslation\", \"germanTranslation\", {\n                unique: false\n            });\n            objectStore.createIndex(\"relatedForeignWords\", \"relatedForeignWords\", {\n                unique: false\n            });\n            objectStore.createIndex(\"selected\", \"selected\", {\n                unique: false\n            });\n            objectStore.createIndex(\"probability\", \"probability\", {\n                unique: false\n            });\n            const objectStore2 = db.createObjectStore(`inflected vocabulary`, {\n                autoIncrement: true\n            });\n            objectStore2.createIndex(\"singular\", \"singular\", {\n                unique: false\n            });\n            objectStore2.createIndex(\"plural\", \"plural\", {\n                unique: false\n            });\n            objectStore2.createIndex(\"verb\", \"verb\", {\n                unique: false\n            });\n            objectStore2.createIndex(\"probability\", \"probability\", {\n                unique: false\n            });\n            this.database = request.result;\n        });\n        const notImportantRequest_____yet = window.indexedDB.open('player data', 1);\n        notImportantRequest_____yet.addEventListener('upgradeneeded', (event)=>{\n            const db = notImportantRequest_____yet.result;\n            if (!db.objectStoreNames.contains('versions played')) db.createObjectStore('versions played', {\n                autoIncrement: true\n            });\n            notImportantRequest_____yet.addEventListener('success', (event)=>{\n                const db = notImportantRequest_____yet.result;\n                const transaction = db.transaction('versions played', 'readwrite');\n                const objectStore = transaction.objectStore('versions played');\n                objectStore.add('Beta');\n                transaction.oncomplete = ()=>{\n                    console.log('Data added successfully');\n                };\n                transaction.onerror = (event)=>{\n                    console.error('Transaction error:', notImportantRequest_____yet.error);\n                };\n            });\n            notImportantRequest_____yet.addEventListener('error', (event)=>{\n                console.error('Database error:', notImportantRequest_____yet.error);\n            });\n        });\n    }\n    modifyDocument() {\n        const request = window.indexedDB.open('Vocabulary', 1);\n        request.addEventListener('error', (_)=>{\n            console.error('There is an error. Have fun fixing it. Details:' + request.error);\n        });\n        request.addEventListener('success', (_)=>{\n            this.database = request.result;\n            const transaction = this.database.transaction('vocabulary', 'readonly');\n            transaction.onerror = (_)=>console.error(transaction.error);\n            const objectStore = transaction.objectStore('vocabulary');\n            const req = objectStore.getAll();\n            req.onerror = (_)=>console.error(req.error);\n            req.onsuccess = (_)=>{\n                this.vocabulary = req.result;\n                this.wordIndex = this.vocabulary.length;\n                this.container = document.querySelector('#container');\n                this.iconPlaceholder = document.querySelector('#icon-placeholder');\n                this.navbar = document.querySelector('#navbar');\n                this.container.style.padding = '0';\n                document.body.style.backgroundImage = 'none';\n                document.body.setAttribute('class', '');\n                this.container.setAttribute('class', '');\n                this.iconPlaceholder.setAttribute('class', '');\n                this.navbar.setAttribute('class', '');\n                this.container.innerHTML = '';\n                this.iconPlaceholder.innerHTML = '';\n                this.navbar.innerHTML = '';\n                document.querySelector('body').classList.add('addVocabularyBody');\n                this.iconPlaceholder.classList.add('addVocabularyIconPlaceholder');\n                let addVocabularyIcon = document.createElement('object');\n                addVocabularyIcon.data = './add_vocabulary.svg';\n                addVocabularyIcon.id = 'addVocabularyIcon';\n                this.iconPlaceholder.insertAdjacentElement('beforeend', addVocabularyIcon);\n                this.container.classList.add('addVocabularyContainer');\n                let classes = 'inp bg inp bg inp bg inp'.split(' ');\n                for(let i = 0; i < classes.length; i++){\n                    let div = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`div${i}`, `${classes[i]}`, `100%`, `${100 / classes.length}%`);\n                    this.container.appendChild(div);\n                    div.style.padding = `${0.05 * div.offsetHeight}px`;\n                }\n                this.navbar.classList.add('addVocabularyNavbar');\n                this.buttonLeft = document.createElement('button');\n                this.buttonLeft.classList.add('navButton');\n                this.buttonLeft.innerHTML = '<';\n                this.navbar.appendChild(this.buttonLeft);\n                this.homeButton = document.createElement('button');\n                this.homeButton.classList.add('navButton');\n                let icon = document.createElement('object');\n                icon.classList.add('homeIcon');\n                icon.data = './home.svg';\n                icon.style.height = '9vh';\n                icon.addEventListener('load', (_)=>{\n                    icon.contentDocument.addEventListener('click', (_)=>{\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$d12a05a2da93ee73).modifyDocument();\n                    });\n                });\n                this.homeButton.insertAdjacentElement('beforeend', icon);\n                this.navbar.appendChild(this.homeButton);\n                this.buttonRight = document.createElement('button');\n                this.buttonRight.classList.add('navButton');\n                this.buttonRight.innerHTML = '>';\n                this.navbar.appendChild(this.buttonRight);\n                this.type();\n            };\n        });\n    }\n    type() {\n        let inputs = [\n            0,\n            2,\n            4,\n            6\n        ];\n        let inputIndex = 0;\n        let keys = 0;\n        let selectedInput;\n        let currentWord = {\n            latinWord: '',\n            inflections: '',\n            germanTranslation: '',\n            relatedForeignWords: '',\n            selected: true,\n            probability: 1\n        };\n        for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].addEventListener('click', (_)=>{\n            for(let ii = 0; ii < this.container.childElementCount; ii += 2)if (this.container.children[ii] === this.container.children[i]) {\n                inputIndex = ii / 2;\n                selectedInput = this.container.children[ii];\n                selectedInput.classList.add('selected');\n                keys = selectedInput.childElementCount;\n            } else this.container.children[ii].classList.remove('selected');\n        });\n        this.container.children[inputs[inputIndex]].classList.add('selected');\n        selectedInput = this.container.children[inputs[inputIndex]];\n        let object = selectedInput.appendChild((0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)('temporary'));\n        let width = selectedInput.offsetHeight - (selectedInput.clientHeight - object.clientHeight) - parseFloat(selectedInput.style.padding);\n        this.maxCharacters = Math.floor(window.innerWidth / width);\n        object.remove();\n        this.homeButton.addEventListener('click', (_)=>{\n            (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n            (0, $543d6d2a56ed7d8d$export$d12a05a2da93ee73).modifyDocument();\n        });\n        this.buttonLeft.addEventListener('mousedown', (_)=>{\n            for(let i = 0; i < this.container.childElementCount; i += 2){\n                this.container.children[i].classList.add('shadow');\n                this.buttonLeft.classList.add('clicked');\n            }\n        });\n        this.buttonRight.addEventListener('mousedown', (_)=>{\n            for(let i = 0; i < this.container.childElementCount; i += 2){\n                this.container.children[i].classList.add('shadow');\n                this.buttonRight.classList.add('clicked');\n            }\n        });\n        this.buttonLeft.addEventListener('mouseout', (_)=>{\n            for(let i = 0; i < this.container.childElementCount; i += 2){\n                this.container.children[i].classList.remove('shadow');\n                this.buttonLeft.classList.remove('clicked');\n            }\n        });\n        this.buttonRight.addEventListener('mouseout', (_)=>{\n            for(let i = 0; i < this.container.childElementCount; i += 2){\n                this.container.children[i].classList.remove('shadow');\n                this.buttonRight.classList.remove('clicked');\n            }\n        });\n        this.buttonLeft.addEventListener('mouseup', (_)=>{\n            if (this.vocabulary[this.wordIndex - 1]) {\n                if (Object.values(currentWord).filter((value)=>value === '').length === 4 && this.wordIndex === this.vocabulary.length) {\n                    for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.remove('shadow');\n                    this.wordIndex--;\n                    currentWord = this.vocabulary[this.wordIndex];\n                    for(let i = 0; i < this.container.childElementCount; i += 2){\n                        let value = Object.values(currentWord)[i / 2];\n                        this.container.children[i].innerHTML = '';\n                        for(let ii = 0; ii < value.length; ii++){\n                            let object = document.createElement('object');\n                            object.data = './keys/OG_T.svg';\n                            object.id = `key${ii}-inp${i / 2}`;\n                            object.style.height = `100%`;\n                            this.container.children[i].insertAdjacentElement('beforeend', object);\n                            object.addEventListener('load', (_)=>{\n                                let svg = object.contentDocument;\n                                svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\n                            });\n                        }\n                    }\n                } else {\n                    this.vocabulary[this.wordIndex] = currentWord;\n                    const transaction = this.database.transaction(`vocabulary`, 'readwrite');\n                    transaction.onerror = (_)=>console.error(transaction.error);\n                    const objectStore = transaction.objectStore(`vocabulary`);\n                    const req = objectStore.get(this.wordIndex);\n                    req.onerror = (_)=>console.error(req.error);\n                    req.onsuccess = (_)=>{\n                        for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.remove('shadow');\n                        const idontcare = objectStore.put(currentWord, this.wordIndex + 1);\n                        idontcare.onerror = (_)=>console.error(idontcare.error);\n                        this.wordIndex--;\n                        currentWord = this.vocabulary[this.wordIndex];\n                        for(let i = 0; i < this.container.childElementCount; i += 2){\n                            let value = Object.values(currentWord)[i / 2];\n                            this.container.children[i].innerHTML = '';\n                            for(let ii = 0; ii < value.length; ii++){\n                                let object = document.createElement('object');\n                                object.data = './keys/OG_T.svg';\n                                object.id = `key${ii}-inp${i / 2}`;\n                                object.style.height = `100%`;\n                                this.container.children[i].insertAdjacentElement('beforeend', object);\n                                object.addEventListener('load', (_)=>{\n                                    let svg = object.contentDocument;\n                                    svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\n                                });\n                            }\n                        }\n                    };\n                }\n            }\n        });\n        this.buttonRight.addEventListener('mouseup', (_)=>{\n            this.buttonRight.classList.remove('clicked');\n            if (!this.vocabulary[this.wordIndex + 1]) {\n                this.vocabulary[this.wordIndex] = currentWord;\n                const transaction = this.database.transaction(`vocabulary`, 'readwrite');\n                transaction.onerror = (_)=>console.error(transaction.error);\n                const objectStore = transaction.objectStore(`vocabulary`);\n                const req = objectStore.put(currentWord, this.wordIndex + 1);\n                req.onerror = (_)=>console.error(req.error);\n                transaction.oncomplete = (_)=>{\n                    for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.remove('shadow');\n                    this.wordIndex++;\n                    keys = 0;\n                    currentWord = {\n                        latinWord: '',\n                        inflections: '',\n                        germanTranslation: '',\n                        relatedForeignWords: '',\n                        selected: true,\n                        probability: 1\n                    };\n                    for(let i = 0; i < this.container.childElementCount; i += 2){\n                        this.container.children[i].innerHTML = '';\n                        inputIndex = 0;\n                        selectedInput = this.container.children[0];\n                        selectedInput.classList.add('selected');\n                        if (i != 0) this.container.children[i].classList.remove('selected');\n                    }\n                };\n            } else {\n                this.vocabulary[this.wordIndex] = currentWord;\n                for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.remove('shadow');\n                const transaction = this.database.transaction(`vocabulary`, 'readwrite');\n                transaction.onerror = (_)=>console.error(transaction.error);\n                const objectStore = transaction.objectStore(`vocabulary`);\n                const req = objectStore.get(this.wordIndex);\n                req.onerror = (_)=>console.error(req.error);\n                req.onsuccess = (_)=>{\n                    const idontcare = objectStore.put(currentWord, this.wordIndex + 1);\n                    idontcare.onerror = (_)=>console.log(idontcare.error);\n                    this.wordIndex++;\n                    currentWord = this.vocabulary[this.wordIndex];\n                    for(let i = 0; i < this.container.childElementCount; i += 2){\n                        let value = Object.values(currentWord)[i / 2];\n                        this.container.children[i].innerHTML = '';\n                        for(let ii = 0; ii < value.length; ii++){\n                            let object = document.createElement('object');\n                            object.data = './keys/OG_T.svg';\n                            object.id = `key${ii}-inp${i / 2}`;\n                            object.style.height = `100%`;\n                            this.container.children[i].insertAdjacentElement('beforeend', object);\n                            object.addEventListener('load', (_)=>{\n                                let svg = object.contentDocument;\n                                svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\n                            });\n                        }\n                    }\n                };\n            }\n        });\n        this.keyDownFunction = (event)=>{\n            let forbiddenCharacters = [\n                '<',\n                \"\\xb4\",\n                '`',\n                '^'\n            ];\n            if (event.key === 'Backspace') {\n                if (selectedInput.lastElementChild) {\n                    selectedInput.lastElementChild.remove();\n                    Object.defineProperty(currentWord, Object.keys(currentWord)[inputIndex], {\n                        value: Object.values(currentWord)[inputIndex].slice(0, keys - 1)\n                    });\n                    keys--;\n                }\n                return;\n            } else if (event.key === 'Enter' || event.key === 'ArrowDown') {\n                if (inputIndex + 1 < 4) {\n                    inputIndex++;\n                    selectedInput = this.container.children[inputs[inputIndex]];\n                    for(let i = 0; i < this.container.childElementCount; i++)if (this.container.children[i] != selectedInput) this.container.children[i].classList.remove('selected');\n                    else {\n                        selectedInput.classList.add('selected');\n                        keys = selectedInput.childElementCount;\n                    }\n                } else {\n                    for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.add('shadow');\n                    if (this.enterMode) {\n                        this.buttonRight.classList.remove('clicked');\n                        if (!this.vocabulary[this.wordIndex + 1]) {\n                            this.vocabulary[this.wordIndex] = currentWord;\n                            const transaction = this.database.transaction(`vocabulary`, 'readwrite');\n                            transaction.onerror = (_)=>console.error(transaction.error);\n                            const objectStore = transaction.objectStore(`vocabulary`);\n                            const req = objectStore.put(currentWord, this.wordIndex + 1);\n                            req.onerror = (_)=>console.error(req.error);\n                            transaction.oncomplete = (_)=>{\n                                for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.remove('shadow');\n                                this.wordIndex++;\n                                keys = 0;\n                                currentWord = {\n                                    latinWord: '',\n                                    inflections: '',\n                                    germanTranslation: '',\n                                    relatedForeignWords: '',\n                                    selected: true,\n                                    probability: 1\n                                };\n                                for(let i = 0; i < this.container.childElementCount; i += 2){\n                                    this.container.children[i].innerHTML = '';\n                                    inputIndex = 0;\n                                    selectedInput = this.container.children[0];\n                                    selectedInput.classList.add('selected');\n                                    if (i != 0) this.container.children[i].classList.remove('selected');\n                                }\n                            };\n                        } else {\n                            this.vocabulary[this.wordIndex] = currentWord;\n                            for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.remove('shadow');\n                            const transaction = this.database.transaction(`vocabulary`, 'readwrite');\n                            transaction.onerror = (_)=>console.error(transaction.error);\n                            const objectStore = transaction.objectStore(`vocabulary`);\n                            const req = objectStore.get(this.wordIndex);\n                            req.onerror = (_)=>console.error(req.error);\n                            req.onsuccess = (_)=>{\n                                const idontcare = objectStore.put(currentWord, this.wordIndex + 1);\n                                idontcare.onerror = (_)=>console.log(idontcare.error);\n                                this.wordIndex++;\n                                currentWord = this.vocabulary[this.wordIndex];\n                                for(let i = 0; i < this.container.childElementCount; i += 2){\n                                    let value = Object.values(currentWord)[i / 2];\n                                    this.container.children[i].innerHTML = '';\n                                    for(let ii = 0; ii < value.length; ii++){\n                                        let object = document.createElement('object');\n                                        object.data = './keys/OG_T.svg';\n                                        object.id = `key${ii}-inp${i / 2}`;\n                                        object.style.height = `100%`;\n                                        this.container.children[i].insertAdjacentElement('beforeend', object);\n                                        object.addEventListener('load', (_)=>{\n                                            let svg = object.contentDocument;\n                                            svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\n                                        });\n                                    }\n                                }\n                            };\n                        }\n                        this.enterMode = false;\n                    } else this.enterMode = true;\n                    const transaction = this.database.transaction(`vocabulary`, 'readwrite');\n                    transaction.onerror = (_)=>console.error(transaction.error);\n                    const objectStore = transaction.objectStore(`vocabulary`);\n                    const req = objectStore.put(currentWord, this.wordIndex + 1);\n                    req.onerror = (_)=>console.error(req.error);\n                    setTimeout((_)=>{\n                        for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].classList.remove('shadow');\n                    }, 250);\n                }\n                return;\n            } else if (event.key === 'ArrowUp') {\n                if (inputIndex > 0) inputIndex--;\n                selectedInput = this.container.children[inputs[inputIndex]];\n                for(let i = 0; i < this.container.childElementCount; i++)if (this.container.children[i] != selectedInput) this.container.children[i].classList.remove('selected');\n                else {\n                    selectedInput.classList.add('selected');\n                    keys = selectedInput.childElementCount;\n                }\n                return;\n            } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) return;\n            let object = document.createElement('object');\n            object.data = './keys/OG_T.svg';\n            object.id = `key${keys}-inp${inputIndex}`;\n            object.style.height = `100%`;\n            selectedInput.insertAdjacentElement('beforeend', object);\n            let width = object.clientHeight;\n            object.hidden = true;\n            object.addEventListener('load', (_)=>{\n                if (keys >= Math.floor(window.innerWidth / width)) {\n                    object.remove();\n                    for(let i = 0; i < keys; i++)this.failureAnimation(selectedInput.children[i]);\n                    return;\n                }\n                object.hidden = false;\n                let svg = object.contentDocument;\n                svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\n                Object.defineProperty(currentWord, Object.keys(currentWord)[inputIndex], {\n                    value: Object.values(currentWord)[inputIndex] + event.key.charAt(0)\n                });\n                keys++;\n                this.idleAnimation(object);\n            });\n        };\n        document.addEventListener('keydown', this.keyDownFunction);\n    }\n    failureAnimation(object) {\n        if (!object) return;\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = [\n            {\n                stroke: \"rgb(186, 2, 70)\",\n                offset: 0.025\n            },\n            {\n                rotate: \"10deg z\",\n                offset: 0.25\n            },\n            {\n                rotate: \"0deg z\",\n                offset: 0.5\n            },\n            {\n                rotate: \"-10deg z\",\n                offset: 0.75,\n                stroke: \"rgb(186, 2, 70)\"\n            },\n            {\n                stroke: \"#eeeeeeff\",\n                offset: 0.925\n            },\n            {\n                rotate: \"0deg z\",\n                offset: 1\n            }\n        ];\n        let animationOptions = {\n            duration: 500\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    idleAnimation(object) {\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#8f8f8f',\n                '#fff',\n                '#eeeeeeff'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 250\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n}\n\n\n\nclass $0605b9bc60daa790$export$70f2439247e54615 {\n    constructor(){\n        this.command = '';\n        this.modifyDocument();\n    }\n    modifyDocument() {\n        this.resizeFunction = ()=>this.movementAnimation();\n        window.addEventListener('resize', this.resizeFunction);\n        this.input = document.querySelector('#container');\n        this.iconPlaceholder = document.querySelector('#icon-placeholder');\n        this.navbar = document.querySelector('#navbar');\n        if (document.querySelector('.homeDiv')) {\n            let homeDiv = document.querySelector('.homeDiv');\n            homeDiv.remove();\n        }\n        document.body.style.backgroundImage = 'none';\n        document.body.style.backgroundImage = 'linear-gradient(180deg, #140063 0%, #06011b 65%, #06011b 77%, #140063 100%)';\n        document.body.setAttribute('class', '');\n        this.input.setAttribute('class', '');\n        this.iconPlaceholder.setAttribute('class', '');\n        this.navbar.setAttribute('class', '');\n        this.input.innerHTML = '';\n        this.iconPlaceholder.innerHTML = '';\n        this.navbar.innerHTML = '';\n        let icon = document.createElement('object');\n        icon.data = './icon.svg';\n        icon.id = 'icon';\n        this.iconPlaceholder.insertAdjacentElement('beforeend', icon);\n        console.log('servas');\n        let version = document.createElement('object');\n        version.data = './version.svg';\n        version.id = 'version';\n        this.iconPlaceholder.insertAdjacentElement('beforeend', version);\n        document.body.classList.add('homeBody');\n        this.input.classList.add('homeInput');\n        this.iconPlaceholder.classList.add('homeIconPlaceholder');\n        this.navbar.classList.add('homeNavbar');\n        this.type();\n    }\n    type() {\n        let keys = 0;\n        this.keyDownFunction = (event)=>{\n            let forbiddenCharacters = [\n                '<',\n                \"\\xb4\",\n                '`',\n                '^'\n            ];\n            if (event.key === 'Backspace' && this.input.lastElementChild) {\n                this.input.lastElementChild.remove();\n                this.movementAnimation();\n                this.command = this.command.slice(0, this.command.length - 1);\n                keys--;\n                return;\n            } else if (event.key === 'Enter') {\n                switch(this.command){\n                    case 'add vocabulary':\n                    case 'add':\n                    case 'add vocabulary':\n                    case 'neu':\n                    case \"hinzuf\\xfcgen\":\n                    case 'neues wort':\n                    case 'neues Wort':\n                    case \"Vokabeln hinzuf\\xfcgen\":\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).modifyDocument();\n                        break;\n                    case 'show vocabulary':\n                    case 'show':\n                    case 'tabelle':\n                    case 'Tabelle':\n                    case 'Vokabeln anzeigen':\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$927980128d33596b).modifyDocument();\n                        break;\n                    case 'training':\n                    case 'Training':\n                    case 'trainer':\n                    case 'Training':\n                    case \"\\xfcben\":\n                    case \"\\xdcben\":\n                    case 'vocabuary training':\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$e73a7799776ae73d).modifyDocument();\n                        break;\n                    case 'declinations':\n                    case 'deklinationen':\n                    case 'Deklinationen':\n                    case 'conj':\n                    case 'add declinations':\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$82d34e6fb29a1ab3).modifyDocument('add nouns');\n                        break;\n                    case 'deklinieren':\n                    case 'deklinationstraining':\n                    case 'Deklinationstraining':\n                    case 'decline nouns':\n                    case 'decline':\n                    case 'ct':\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$82d34e6fb29a1ab3).modifyDocument('nouns');\n                        break;\n                    case 'v':\n                    case 'conjugations':\n                    case 'konjugationen':\n                    case 'Konjugationen':\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$82d34e6fb29a1ab3).modifyDocument('add verbs');\n                        break;\n                    case 'conjugate':\n                    case 'konjugieren':\n                    case 'konjugationstraining':\n                    case 'Konjugationstraining':\n                    case 'vt':\n                        (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                        (0, $543d6d2a56ed7d8d$export$82d34e6fb29a1ab3).modifyDocument('verbs');\n                        break;\n                    default:\n                        break;\n                }\n                this.command = '';\n                keys = 0;\n                this.input.innerHTML = '';\n                return;\n            } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) return;\n            let object = document.createElement('object');\n            object.data = './Latein-Trainer/keys/OG_T.svg';\n            object.id = `key${keys}`;\n            object.style.height = `100%`;\n            this.input.insertAdjacentElement('beforeend', object);\n            let width = object.clientHeight;\n            object.hidden = true;\n            object.addEventListener('load', (_)=>{\n                if (keys >= Math.floor(window.innerWidth / width)) {\n                    object.remove();\n                    for(let i = 0; i < keys; i++)this.failureAnimation(this.input.children[i]);\n                    return;\n                }\n                object.hidden = false;\n                let svg = object.contentDocument;\n                svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\n                this.command += event.key;\n                keys++;\n                this.idleAnimation(object);\n                this.movementAnimation();\n            });\n        };\n        document.addEventListener('keydown', this.keyDownFunction);\n    }\n    idleAnimation(object) {\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#8f8f8f',\n                '#fff',\n                '#eeeeeeff'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 250\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    failureAnimation(object) {\n        if (!object) return;\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = [\n            {\n                stroke: \"rgb(186, 2, 70)\",\n                offset: 0.025\n            },\n            {\n                rotate: \"10deg z\",\n                offset: 0.25\n            },\n            {\n                rotate: \"0deg z\",\n                offset: 0.5\n            },\n            {\n                rotate: \"-10deg z\",\n                offset: 0.75,\n                stroke: \"rgb(186, 2, 70)\"\n            },\n            {\n                stroke: \"#eeeeeeff\",\n                offset: 0.925\n            },\n            {\n                rotate: \"0deg z\",\n                offset: 1\n            }\n        ];\n        let animationOptions = {\n            duration: 500\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    movementAnimation() {\n        if (!this.input) return;\n        let object = this.input.firstChild;\n        let inp = this.input;\n        if (object) {\n            if (inp.childElementCount > 1) inp.style.transition = 'padding 250ms';\n            inp.style.paddingLeft = `${(window.innerWidth - inp.childElementCount * object.clientHeight) / 2}px`;\n        }\n    }\n}\n\n\n\nclass $5e3b93ee4c6a7549$export$d5e53f8bbb738c78 {\n    constructor(){}\n    modifyDocument() {\n        const request = window.indexedDB.open('Vocabulary', 1);\n        request.addEventListener('error', (_)=>{\n            this.vocabulary = [];\n            this.modifyDocument();\n            console.error(request.error);\n        });\n        request.addEventListener('success', (_)=>{\n            this.database = request.result;\n            const transaction = this.database.transaction('vocabulary', 'readonly');\n            transaction.onerror = (_)=>console.error(transaction.error);\n            const objectStore = transaction.objectStore('vocabulary');\n            const req = objectStore.getAll();\n            req.onerror = (_)=>console.error(req.error);\n            req.onsuccess = (_)=>{\n                this.vocabulary = req.result;\n                this.container = document.querySelector('#container');\n                this.iconPlaceholder = document.querySelector('#icon-placeholder');\n                this.navbar = document.querySelector('#navbar');\n                this.container.style.padding = '0';\n                document.body.style.backgroundImage = 'none';\n                document.body.setAttribute('class', '');\n                this.container.setAttribute('class', '');\n                this.iconPlaceholder.setAttribute('class', '');\n                this.navbar.setAttribute('class', '');\n                this.container.innerHTML = '';\n                this.iconPlaceholder.innerHTML = '';\n                this.navbar.innerHTML = '';\n                let showVocabularyIcon = document.createElement('object');\n                showVocabularyIcon.data = './show_vocabulary.svg';\n                showVocabularyIcon.id = 'showVocabularyIcon';\n                this.iconPlaceholder.insertAdjacentElement('beforeend', showVocabularyIcon);\n                for(let i = 0, str = 'HOME MENU'; i < str.length; i++){\n                    let span = document.createElement('span');\n                    span.innerText = str[i];\n                    this.navbar.insertAdjacentElement('beforeend', span);\n                }\n                let navbarClickFunction = (_)=>{\n                    (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                    this.navbar.removeEventListener('click', navbarClickFunction);\n                    (0, $543d6d2a56ed7d8d$export$d12a05a2da93ee73).modifyDocument();\n                };\n                this.navbar.addEventListener('click', navbarClickFunction);\n                document.body.classList.add('showVocabularyBody');\n                this.container.classList.add('showVocabularyContainer');\n                this.iconPlaceholder.classList.add('showVocabularyIconPlaceholder');\n                this.navbar.classList.add('showVocabularyNavbar');\n                let str = '';\n                this.vocabulary.forEach((word, i)=>{\n                    str += 'auto ';\n                    let Cdiv = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`checkboxDiv${i}`, 'word');\n                    let div1 = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`latinWord${i}`, 'word');\n                    let div2 = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`inflections${i}`, 'word');\n                    let div3 = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`germanTranslation${i}`, 'word');\n                    let div4 = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`relatedForeignWords${i}`, 'word');\n                    Cdiv.classList.add('cdiv');\n                    Cdiv.innerHTML = `<input type=\"checkbox\" id=\"C${i}\" class=\"checkbox\" ${word.selected ? \"checked\" : ''}></input>`;\n                    div1.innerHTML = `<input type=\"text\" id=\"0-${i}\" class=\"edit\" value=\"${word.latinWord === '' ? ' ' : word.latinWord}\" maxlength=\"${word.latinWord.length > (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters ? word.latinWord.length : (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters}\"></input>`;\n                    div2.innerHTML = `<input type=\"text\" id=\"1-${i}\" class=\"edit\" value=\"${word.inflections === '' ? ' ' : word.inflections}\" maxlength=\"${word.inflections.length > (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters ? word.inflections.length : (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters}\"></input>`;\n                    div3.innerHTML = `<input type=\"text\" id=\"2-${i}\" class=\"edit\" value=\"${word.germanTranslation === '' ? ' ' : word.germanTranslation}\" maxlength=\"${word.germanTranslation.length > (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters ? word.germanTranslation.length : (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters}\"></input>`;\n                    div4.innerHTML = `<input type=\"text\" id=\"3-${i}\" class=\"edit\" value=\"${word.relatedForeignWords === '' ? ' ' : word.relatedForeignWords}\" maxlength=\"${word.relatedForeignWords.length > (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters ? word.relatedForeignWords.length : (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).maxCharacters}\"></input>`;\n                    this.container.append(Cdiv, div1, div2, div3, div4);\n                });\n                this.container.style.gridTemplateRows = str;\n                let inputList = document.getElementsByClassName('edit');\n                for(let i = 0; i < inputList.length; i++){\n                    let input = inputList.item(i);\n                    input.size = input.maxLength;\n                    input.onblur = (_)=>{\n                        const transaction = this.database.transaction('vocabulary', 'readwrite');\n                        transaction.onerror = (_)=>console.error(transaction.error);\n                        const objectStore = transaction.objectStore('vocabulary');\n                        const request = objectStore.get(parseInt(input.id.split('-')[1]) + 1);\n                        request.onerror = (_)=>console.error(request.error);\n                        request.onsuccess = (_)=>{\n                            const data = request.result;\n                            Object.defineProperty(data, Object.keys(data)[parseInt(input.id.split('-')[0])], {\n                                value: input.value.trim()\n                            });\n                            const req = objectStore.put(data, parseInt(input.id.split('-')[1]) + 1);\n                            req.onerror = (_)=>console.error(req.error);\n                        };\n                    };\n                    input.onkeydown = (event)=>{\n                        if (event.key === 'Enter') input.blur();\n                    };\n                    input.onkeyup = (_)=>{\n                        if (input.value.includes('^')) {\n                            let str = '';\n                            input.value.split('').forEach((letter)=>{\n                                if (letter != '^') str += letter;\n                            });\n                            input.value = str;\n                        }\n                    };\n                }\n                let checkboxList = document.getElementsByClassName('checkbox');\n                for(let i = 0; i < checkboxList.length; i++){\n                    let input = checkboxList.item(i);\n                    input.addEventListener('change', (_)=>{\n                        const transaction = this.database.transaction('vocabulary', 'readwrite');\n                        transaction.onerror = (_)=>console.error(transaction.error);\n                        const objectStore = transaction.objectStore('vocabulary');\n                        const request = objectStore.get(parseInt(input.id.slice(1)) + 1);\n                        request.onerror = (_)=>console.error(request.error);\n                        request.onsuccess = (_)=>{\n                            const data = request.result;\n                            Object.defineProperty(data, 'selected', {\n                                value: input.checked\n                            });\n                            const req = objectStore.put(data, parseInt(input.id.slice(1)) + 1);\n                            req.onerror = (_)=>console.error(req.error);\n                            this.vocabulary[i].selected = this.vocabulary[i].selected ? false : true;\n                        };\n                    });\n                }\n                let checkboxDivList = document.getElementsByClassName('cdiv');\n                for(let i = 0; i < checkboxDivList.length; i++){\n                    let element = checkboxDivList[i];\n                    let mouseover = false;\n                    let saved;\n                    let clickFunction = (event)=>{\n                        let cdiv = event.target;\n                        let index = parseInt(cdiv.id.slice(11));\n                        this.deleteWord(index);\n                    };\n                    let indicator;\n                    element.addEventListener('mousemove', (event)=>{\n                        if (event.target === element.querySelector('input')) {\n                            mouseover = false;\n                            element.classList.remove('mouseon');\n                            clearTimeout(indicator);\n                            element.removeEventListener('click', clickFunction);\n                            document.querySelectorAll('.danger').forEach((e)=>e.classList.remove('danger'));\n                        } else if (!mouseover) {\n                            mouseover = true;\n                            saved = element.innerHTML;\n                            element.classList.add('mouseon');\n                            indicator = setTimeout((_)=>{\n                                if (mouseover) {\n                                    element.innerHTML = '<span>X</span>';\n                                    element.addEventListener('click', clickFunction);\n                                    document.querySelector(`#latinWord${i}`).classList.add('danger');\n                                    document.querySelector(`#inflections${i}`).classList.add('danger');\n                                    document.querySelector(`#germanTranslation${i}`).classList.add('danger');\n                                    document.querySelector(`#relatedForeignWords${i}`).classList.add('danger');\n                                }\n                            }, 1500);\n                        }\n                    });\n                    element.addEventListener('mouseleave', (_)=>{\n                        mouseover = false;\n                        element.classList.remove('mouseon');\n                        clearTimeout(indicator);\n                        document.querySelectorAll('.danger').forEach((e)=>e.classList.remove('danger'));\n                        if (saved && !element.querySelector('input')) {\n                            element.innerHTML = saved;\n                            let input = element.querySelector('input');\n                            input.checked = this.vocabulary[i].selected;\n                            input.addEventListener('change', (_)=>{\n                                const transaction = this.database.transaction('vocabulary', 'readwrite');\n                                transaction.onerror = (_)=>console.error(transaction.error);\n                                const objectStore = transaction.objectStore('vocabulary');\n                                const request = objectStore.get(parseInt(input.id[input.id.length - 1]) + 1);\n                                request.onerror = (_)=>console.error(request.error);\n                                request.onsuccess = (_)=>{\n                                    const data = request.result;\n                                    Object.defineProperty(data, 'selected', {\n                                        value: input.checked\n                                    });\n                                    const req = objectStore.put(data, parseInt(input.id[input.id.length - 1]) + 1);\n                                    req.onerror = (_)=>console.error(req.error);\n                                    this.vocabulary[i].selected = input.checked;\n                                };\n                            });\n                        }\n                        element.removeEventListener('click', clickFunction);\n                    });\n                }\n            };\n        });\n    }\n    deleteWord(key) {\n        this.vocabulary.splice(key, 1);\n        const transaction = this.database.transaction('vocabulary', 'readwrite');\n        const objectStore = transaction.objectStore('vocabulary');\n        const request = objectStore.openCursor();\n        request.onsuccess = (_)=>{\n            let cursor = request.result;\n            if (cursor) {\n                let k = cursor.key;\n                let word = this.vocabulary[k - 1];\n                if (word) {\n                    const updatedData = cursor.value;\n                    updatedData.latinWord = word.latinWord;\n                    updatedData.inflections = word.inflections;\n                    updatedData.germanTranslation = word.germanTranslation;\n                    updatedData.relatedForeignWords = word.relatedForeignWords;\n                    updatedData.selected = word.selected;\n                    updatedData.probability = word.probability;\n                    cursor.update(updatedData);\n                    cursor.continue();\n                } else {\n                    cursor.delete();\n                    (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                    this.modifyDocument();\n                }\n            }\n        };\n    }\n}\n\n\n\nclass $b6fe10105ad30798$export$564a2d2b8c542ee9 {\n    constructor(){\n        this.totalAttempts = 0;\n        this.totalPoints = 0;\n        this.commandMode = false;\n        this.command = '';\n        this.inputIndex = 0;\n        this.time = 0;\n        this.round = 0;\n        this.backgroundColor = '#140063';\n        setInterval((_)=>this.time += 1, 1);\n        this.resizeFunction = (_)=>{\n            let inputs = document.querySelectorAll('.inp');\n            inputs.forEach((inp)=>{\n                if (inp.firstChild && !inp.classList.contains('not-editable')) this.movementAnimation();\n            });\n        };\n    }\n    modifyDocument() {\n        window.addEventListener('resize', this.resizeFunction);\n        const request = window.indexedDB.open('Vocabulary', 1);\n        request.addEventListener('error', (_)=>{\n            this.vocabulary = [];\n            this.modifyDocument();\n            console.error(request.error);\n        });\n        request.addEventListener('success', (_)=>{\n            this.database = request.result;\n            const transaction = this.database.transaction('vocabulary', 'readonly');\n            transaction.onerror = (_)=>console.error(transaction.error);\n            const objectStore = transaction.objectStore('vocabulary');\n            const req = objectStore.getAll();\n            req.onerror = (_)=>console.error(req.error);\n            req.onsuccess = (_)=>{\n                this.vocabulary = req.result;\n                this.backgroundColor = '#140063';\n                this.container = document.querySelector('#container');\n                this.iconPlaceholder = document.querySelector('#icon-placeholder');\n                this.navbar = document.querySelector('#navbar');\n                this.container.style.padding = '0';\n                document.body.style.backgroundImage = 'none';\n                document.body.setAttribute('class', '');\n                this.container.setAttribute('class', '');\n                this.iconPlaceholder.setAttribute('class', '');\n                this.navbar.setAttribute('class', '');\n                this.container.innerHTML = '';\n                this.iconPlaceholder.innerHTML = '';\n                this.navbar.innerHTML = '';\n                let trainingIcon = document.createElement('object');\n                trainingIcon.data = './training.svg';\n                trainingIcon.id = 'trainingIcon';\n                this.iconPlaceholder.insertAdjacentElement('beforeend', trainingIcon);\n                document.body.classList.add(\"trainingBody\");\n                this.container.classList.add(\"trainingContainer\");\n                this.iconPlaceholder.classList.add(\"trainingIconPlaceholder\");\n                this.navbar.classList.add(\"trainingNavbar\");\n                let classes = 'inp bg inp bg inp bg inp'.split(' ');\n                for(let i = 0; i < classes.length; i++){\n                    let div = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`div${i}`, `${classes[i]}`, `100%`, `${100 / classes.length}%`);\n                    div.classList.add('t');\n                    this.container.appendChild(div);\n                    div.style.padding = `${0.05 * div.offsetHeight}px`;\n                }\n                let height;\n                this.mouseOverFunction = (event)=>{\n                    let homeDiv = document.querySelector('.homeDiv');\n                    if (homeDiv && homeDiv != event.target && event.target != this.navbar && !(document.querySelector('.homeButton') && event.target === document.querySelector('.homeButton')) && event.target != document.querySelector('.homeIcon')) {\n                        homeDiv.classList.remove('moveUp');\n                        setTimeout((_)=>homeDiv.classList.add('moveDown'), 0);\n                    } else if (!(event.target != this.navbar && !(document.querySelector('.homeButton') && event.target === document.querySelector('.homeButton')) && event.target != document.querySelector('.homeIcon'))) {\n                        if (!homeDiv.classList.contains('moveUp')) {\n                            homeDiv.classList.remove('moveDown');\n                            homeDiv.classList.add('moveUp');\n                        }\n                    }\n                    if (!homeDiv) {\n                        let hd = document.createElement('div');\n                        hd.setAttribute('class', 'homeDiv');\n                        this.navbar.insertAdjacentElement('afterend', hd);\n                        let button = document.createElement('div');\n                        button.classList.add('homeButton');\n                        let icon = document.createElement('object');\n                        icon.classList.add('homeIcon');\n                        icon.data = './home.svg';\n                        icon.style.height = '6vh';\n                        hd.insertAdjacentElement('beforeend', button);\n                        button.insertAdjacentElement('beforeend', icon);\n                        let clickFunction = (_)=>{\n                            (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                            (0, $543d6d2a56ed7d8d$export$d12a05a2da93ee73).modifyDocument();\n                            return;\n                        };\n                        button.addEventListener('click', clickFunction);\n                        icon.addEventListener('load', (_)=>{\n                            icon.contentDocument.addEventListener('click', clickFunction);\n                        });\n                    }\n                };\n                document.addEventListener('mouseover', this.mouseOverFunction);\n                this.type();\n            };\n        });\n    }\n    type() {\n        let inputs = [\n            0,\n            2,\n            4,\n            6\n        ];\n        let keys = 0;\n        for(let i = 0; i < this.container.childElementCount; i += 2)this.container.children[i].addEventListener('click', (_)=>{\n            this.inputIndex = i / 2;\n            this.selectedInput = this.container.children[i];\n            this.inputStyling();\n            keys = this.selectedInput.childElementCount;\n        });\n        for(let i = 1; i < this.container.childElementCount; i += 2)this.container.children[i].addEventListener('click', (event)=>{\n            if (event.offsetY > this.container.children[i].clientHeight / 2) {\n                this.inputIndex = (i + 1) / 2;\n                this.selectedInput = this.container.children[i + 1];\n                this.inputStyling();\n                keys = this.selectedInput.childElementCount;\n            } else {\n                this.inputIndex = (i - 1) / 2;\n                this.selectedInput = this.container.children[i - 1];\n                this.inputStyling();\n                keys = this.selectedInput.childElementCount;\n            }\n        });\n        this.selectedInput = this.container.children[inputs[this.inputIndex]];\n        this.inputStyling();\n        this.keyDownFunction = (event)=>{\n            let mode = this.commandMode;\n            let forbiddenCharacters = [\n                '<',\n                \"\\xb4\",\n                '`',\n                '^'\n            ];\n            if (this.commandMode) {\n                if (event.key === 'Enter') {\n                    switch(this.command){\n                        case '#hint':\n                        case '#t':\n                        case '#tip':\n                        case '#tipp':\n                        case '#Tipp':\n                            this.command.split('').forEach((_)=>{\n                                this.returnLastElement(this.selectedInput).remove();\n                                keys--;\n                                if (this.selectedInput.firstChild) this.movementAnimation();\n                            });\n                            let object = document.createElement('object');\n                            object.data = './keys/OG_T.svg';\n                            object.id = `key${keys}-inp${this.inputIndex}`;\n                            object.style.height = `100%`;\n                            let width = object.clientHeight;\n                            let index = 0;\n                            let word = Object.values(this.currentWord)[this.inputIndex];\n                            let str = '';\n                            let maxLength;\n                            let changeMade = false;\n                            for(let i = 0; i < word.length; i++)if (word[i] != Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex][i] && !changeMade) {\n                                index = i;\n                                if (this.vocabulary[this.currentWordIndex][Object.keys(this.vocabulary[this.currentWordIndex])[this.inputIndex]][index]) str += this.vocabulary[this.currentWordIndex][Object.keys(this.vocabulary[this.currentWordIndex])[this.inputIndex]][index];\n                                else maxLength = word.length - 1;\n                                changeMade = true;\n                            } else str += word[i];\n                            this.currentWord[Object.keys(this.currentWord)[this.inputIndex]] = maxLength ? str.slice(0, maxLength) : str;\n                            word = maxLength ? str.slice(0, maxLength) : str;\n                            if (maxLength) {\n                                this.returnLastElement(this.selectedInput).remove();\n                                this.movementAnimation();\n                                keys--;\n                                mode = false;\n                                this.commandMode = false;\n                                break;\n                            }\n                            if (!changeMade) {\n                                index = word.length;\n                                if (word.length < Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex].length) this.currentWord[Object.keys(this.currentWord)[this.inputIndex]] += Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex][index];\n                                else {\n                                    mode = false;\n                                    this.commandMode = false;\n                                    break;\n                                }\n                            }\n                            if (word.length > 0 && index < word.length) {\n                                this.selectedInput.children[index].replaceWith(object);\n                                keys--;\n                                object.hidden = true;\n                            } else {\n                                this.selectedInput.insertAdjacentElement('beforeend', object);\n                                object.hidden = true;\n                            }\n                            object.addEventListener('load', (_)=>{\n                                if (keys >= Math.floor(window.innerWidth / width)) {\n                                    object.remove();\n                                    for(let i = 0; i < keys; i++)(0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).failureAnimation(this.selectedInput.children[i]);\n                                    return;\n                                }\n                                object.hidden = false;\n                                keys++;\n                                let svg = object.contentDocument;\n                                svg.querySelector('#tspan7').innerHTML = Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex][index];\n                                this.fixedAnimation(object);\n                                this.movementAnimation();\n                            });\n                            break;\n                        case '#pensionistenmodus':\n                        case '#Pensionistenmodus':\n                            this.backgroundColor = '#7a4aff';\n                            this.inputStyling();\n                            this.command.split('').forEach((_)=>{\n                                this.returnLastElement(this.selectedInput).remove();\n                                keys--;\n                                if (this.selectedInput.firstChild) this.movementAnimation();\n                            });\n                            break;\n                        default:\n                            this.command.split('').forEach((_)=>{\n                                this.returnLastElement(this.selectedInput).remove();\n                                keys--;\n                                if (this.selectedInput.firstChild) this.movementAnimation();\n                            });\n                            if (this.inputIndex + 1 < 4) {\n                                this.inputIndex++;\n                                this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                                if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\n                                    this.inputIndex += 1;\n                                    this.selectedInput = this.container.children[this.inputIndex];\n                                }\n                                keys = this.selectedInput.childElementCount;\n                                this.inputStyling();\n                            }\n                    }\n                    this.command = '';\n                    this.commandMode = false;\n                } else if (event.key === 'ArrowUp') {\n                    this.command.split('').forEach((_)=>{\n                        this.returnLastElement(this.selectedInput).remove();\n                        keys--;\n                        if (this.selectedInput.firstChild) this.movementAnimation();\n                    });\n                    this.command = '';\n                    this.commandMode = false;\n                } else if (event.key === 'ArrowDown') {\n                    this.command.split('').forEach((_)=>{\n                        this.returnLastElement(this.selectedInput).remove();\n                        keys--;\n                        if (this.selectedInput.firstChild) this.movementAnimation();\n                    });\n                    this.command = '';\n                    this.commandMode = false;\n                    if (this.inputIndex + 1 < 4) {\n                        this.inputIndex++;\n                        this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                        if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\n                            this.inputIndex += 1;\n                            this.selectedInput = this.container.children[this.inputIndex];\n                        }\n                        keys = this.selectedInput.childElementCount;\n                        this.inputStyling();\n                    }\n                } else if (event.key === 'Backspace') {\n                    if (this.returnLastElement(this.selectedInput)) {\n                        this.returnLastElement(this.selectedInput).remove();\n                        this.command = this.command.slice(0, this.command.length - 1);\n                        keys--;\n                        if (this.selectedInput.firstChild) this.movementAnimation();\n                        if (this.command === '') this.commandMode = false;\n                    }\n                }\n                if (this.commandMode && (this.selectedInput.classList.contains('not-editable') || forbiddenCharacters.includes(event.key) || event.key.length > 1)) return;\n            }\n            if (!this.commandMode) {\n                //TODO: space styling: style empty lines in green when right and red when wrong\n                if ((event.key === 'Enter' || event.key === 'ArrowDown') && !mode) {\n                    if (this.currentWord && !isNaN(this.currentWordIndex) && event.key === 'Enter') {\n                        if (Object.values(this.currentWord)[this.inputIndex] === Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex] || Object.values(this.currentWord)[this.inputIndex] === '') {\n                            for(let i = 0; i < keys; i++)if (this.selectedInput.children[i] && !this.selectedInput.classList.contains('not-editable')) this.successAnimation(this.selectedInput.children[i]);\n                            if (!this.selectedInput.classList.contains('not-editable')) {\n                                if (this.result[this.inputIndex] === undefined) this.result[this.inputIndex] = true;\n                            }\n                            if (this.inputIndex + 1 < 4) {\n                                this.inputIndex++;\n                                this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                                if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\n                                    this.inputIndex += 1;\n                                    this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                                }\n                                keys = this.selectedInput.childElementCount;\n                                this.inputStyling();\n                            } else if (this.inputIndex + 1 === 4) {\n                                let emptyLines = [\n                                    undefined,\n                                    undefined,\n                                    undefined,\n                                    undefined\n                                ];\n                                Object.values(this.currentWord).slice(0, 4).forEach((value, i)=>{\n                                    if (!document.querySelector(`#div${inputs[i]}`).classList.contains('not-editable')) {\n                                        if (value === Object.values(this.vocabulary[this.currentWordIndex])[i]) {\n                                            let inp = document.querySelector(`#div${inputs[i]}`);\n                                            for(let ii = 0; ii < inp.childElementCount; ii++){\n                                                let obj = inp.children[ii];\n                                                this.successAnimation(obj);\n                                            }\n                                            if (value === '') emptyLines[i] = true;\n                                            if (this.result[i] === undefined) this.result[i] = true;\n                                        } else {\n                                            let inp = document.querySelector(`#div${inputs[i]}`);\n                                            for(let ii = 0; ii < inp.childElementCount; ii++){\n                                                let obj = inp.children[ii];\n                                                (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).failureAnimation(obj);\n                                            }\n                                            if (value === '') emptyLines[i] = false;\n                                            if (this.result[i] === undefined) this.result[i] = false;\n                                        }\n                                    }\n                                });\n                                this.resultStyling(emptyLines);\n                                if (Object.values(this.currentWord).toLocaleString() === Object.values(this.vocabulary[this.currentWordIndex]).toLocaleString()) {\n                                    let addition = this.result.filter((w)=>w === true).length;\n                                    this.totalAttempts += 3;\n                                    this.totalPoints += addition;\n                                    if (addition === 3) this.vocabulary[this.currentWordIndex].probability *= 0.8;\n                                    else this.vocabulary[this.currentWordIndex].probability *= 1.2;\n                                    const transaction = this.database.transaction('vocabulary', 'readwrite');\n                                    transaction.onerror = (_)=>console.error(transaction.error);\n                                    const objectStore = transaction.objectStore('vocabulary');\n                                    const request = objectStore.get(this.currentWordIndex + 1);\n                                    request.onerror = (_)=>console.error(request.error);\n                                    request.onsuccess = (_)=>{\n                                        const req = objectStore.put(this.vocabulary[this.currentWordIndex], this.currentWordIndex + 1);\n                                        req.onerror = (_)=>console.error(req.error);\n                                    };\n                                    setTimeout((_)=>{\n                                        this.inputIndex = 0;\n                                        this.selectedInput = document.querySelector(`#div${inputs[this.inputIndex]}`);\n                                        keys = 0;\n                                        this.inputStyling();\n                                        this.startNewTrainingRound();\n                                    }, 500);\n                                } else setTimeout((_)=>this.inputStyling(), 500);\n                            }\n                        } else if (this.selectedInput.classList.contains('not-editable')) {\n                            if (this.inputIndex + 1 < 4) {\n                                this.inputIndex++;\n                                this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                                if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\n                                    this.inputIndex += 1;\n                                    this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                                }\n                                keys = this.selectedInput.childElementCount;\n                                this.inputStyling();\n                            }\n                            return;\n                        } else {\n                            if (this.inputIndex === 3) {\n                                let emptyLines = [\n                                    undefined,\n                                    undefined,\n                                    undefined,\n                                    undefined\n                                ];\n                                Object.values(this.currentWord).slice(0, 4).forEach((value, i)=>{\n                                    if (!document.querySelector(`#div${inputs[i]}`).classList.contains('not-editable')) {\n                                        if (value === Object.values(this.vocabulary[this.currentWordIndex])[i]) {\n                                            let inp = document.querySelector(`#div${inputs[i]}`);\n                                            for(let ii = 0; ii < inp.childElementCount; ii++){\n                                                let obj = inp.children[ii];\n                                                this.successAnimation(obj);\n                                            }\n                                            if (value === '') emptyLines[i] = true;\n                                            if (this.result[i] === undefined) this.result[i] = true;\n                                        } else {\n                                            let inp = document.querySelector(`#div${inputs[i]}`);\n                                            for(let ii = 0; ii < inp.childElementCount; ii++){\n                                                let obj = inp.children[ii];\n                                                (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).failureAnimation(obj);\n                                            }\n                                            if (value === '') emptyLines[i] = false;\n                                            if (this.result[i] === undefined) this.result[i] = false;\n                                        }\n                                    }\n                                });\n                                this.resultStyling(emptyLines);\n                                setTimeout((_)=>this.inputStyling(), 500);\n                            } else for(let i = 0; i < this.selectedInput.childElementCount; i++)(0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).failureAnimation(this.selectedInput.children[i]);\n                            if (this.result[this.inputIndex] === undefined) this.result[this.inputIndex] = true;\n                            this.result[this.inputIndex] = false;\n                        }\n                    } else if (event.key === 'ArrowDown') {\n                        if (this.inputIndex + 1 < 4) {\n                            this.inputIndex++;\n                            this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                            if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\n                                this.inputIndex += 1;\n                                this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                            }\n                            keys = this.selectedInput.childElementCount;\n                            this.inputStyling();\n                        }\n                        return;\n                    }\n                    return;\n                } else if (event.key === 'ArrowUp') {\n                    if (this.inputIndex > 0) this.inputIndex--;\n                    this.selectedInput = this.container.children[inputs[this.inputIndex]];\n                    keys = this.selectedInput.childElementCount;\n                    this.inputStyling();\n                    return;\n                } else if (this.selectedInput.classList.contains('not-editable')) return;\n                else if (event.key === 'Backspace' && !mode) {\n                    if (this.returnLastElement(this.selectedInput)) {\n                        this.returnLastElement(this.selectedInput).remove();\n                        keys--;\n                        if (this.selectedInput.firstChild) this.movementAnimation();\n                        if (this.currentWord && !isNaN(this.currentWordIndex) && !this.commandMode) Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex], {\n                            value: Object.values(this.currentWord)[this.inputIndex].slice(0, keys)\n                        });\n                    }\n                    return;\n                } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) return;\n                else if (event.key === '#') this.commandMode = true;\n            }\n            let object = document.createElement('object');\n            object.data = './keys/OG_T.svg';\n            object.id = `key${keys}-inp${this.inputIndex}`;\n            object.style.height = `100%`;\n            this.selectedInput.insertAdjacentElement('beforeend', object);\n            let width = object.clientHeight;\n            object.hidden = true;\n            object.addEventListener('load', (_)=>{\n                if (keys >= Math.floor(window.innerWidth / width)) {\n                    object.remove();\n                    for(let i = 0; i < keys; i++)(0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).failureAnimation(this.selectedInput.children[i]);\n                    return;\n                }\n                object.hidden = false;\n                let svg = object.contentDocument;\n                svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\n                if (this.currentWord && !isNaN(this.currentWordIndex) && !this.commandMode) Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex], {\n                    value: Object.values(this.currentWord)[this.inputIndex] + event.key.charAt(0)\n                });\n                keys++;\n                (0, $543d6d2a56ed7d8d$export$abeb1bd8b6f9168).idleAnimation(object);\n                this.movementAnimation();\n                if (this.commandMode) {\n                    this.commandAnimation(object);\n                    this.command += event.key;\n                }\n            });\n        };\n        document.addEventListener('keydown', this.keyDownFunction);\n        this.startNewTrainingRound();\n    }\n    startNewTrainingRound() {\n        if (this.vocabulary.length === 0) {\n            setTimeout((_)=>alert('Keine Vokabeln!'), 50);\n            return;\n        }\n        this.round++;\n        let overallProbabilty = 0;\n        this.vocabulary.forEach((word)=>{\n            if (word.selected) overallProbabilty += word.probability;\n        });\n        let randomNumber = Math.floor(Math.random() * overallProbabilty * 10) / 10;\n        let lowestDifference;\n        let lastProbability = 0;\n        this.vocabulary.forEach((word, i)=>{\n            if (word.selected) {\n                if (lowestDifference === undefined) {\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\n                    this.currentWord = word;\n                    this.currentWordIndex = i;\n                } else if (Math.abs(randomNumber - (lastProbability + word.probability)) < lowestDifference) {\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\n                    this.currentWordIndex = i;\n                    if (Object.values(word).toLocaleString().slice(0, 4) === Object.values(this.currentWord).toLocaleString().slice(0, 4)) word.probability = Math.max(0, word.probability - 1);\n                    this.currentWord = word;\n                }\n                lastProbability += word.probability;\n            }\n        });\n        let savedProperty;\n        do {\n            let rn = Math.random();\n            if (rn <= 0.5) {\n                savedProperty = [\n                    'latinWord',\n                    {\n                        value: this.currentWord.latinWord\n                    }\n                ];\n                this.inputIndex = 1;\n                this.selectedInput = this.container.children[this.inputIndex + 1];\n                this.inputStyling();\n            } else if (rn <= 0.7) savedProperty = [\n                'inflections',\n                {\n                    value: this.currentWord.inflections\n                }\n            ];\n            else if (rn <= 0.95) savedProperty = [\n                'germanTranslation',\n                {\n                    value: this.currentWord.germanTranslation\n                }\n            ];\n            else savedProperty = [\n                'relatedForeignWords',\n                {\n                    value: this.currentWord.relatedForeignWords\n                }\n            ];\n        }while (savedProperty[1].value.trim() === '');\n        this.currentWord = {\n            latinWord: '',\n            inflections: '',\n            germanTranslation: '',\n            relatedForeignWords: '',\n            selected: true,\n            probability: this.currentWord.probability\n        };\n        Object.defineProperty(this.currentWord, savedProperty[0], savedProperty[1]);\n        let previousFixedDiv = document.querySelector('.not-editable');\n        if (previousFixedDiv) previousFixedDiv.classList.remove('not-editable');\n        document.querySelectorAll('.t').forEach((t)=>t.innerHTML = '');\n        let specificationDiv = document.getElementById(`div${Object.keys(this.currentWord).findIndex((k)=>k === savedProperty[0]) * 2}`);\n        specificationDiv.classList.add('not-editable');\n        specificationDiv.innerHTML = `<span style=\"font-size:${specificationDiv.clientHeight * 0.6}px\">${savedProperty[1].value}</span>`;\n        this.result = [\n            undefined,\n            undefined,\n            undefined,\n            undefined\n        ];\n    }\n    movementAnimation() {\n        let object = this.selectedInput.firstChild;\n        let inp = this.selectedInput;\n        if (this.selectedInput.firstChild) {\n            if (inp.childElementCount > 1) inp.style.transition = 'padding 250ms';\n            inp.style.paddingLeft = `${(window.innerWidth - inp.childElementCount * object.clientHeight) / 2}px`;\n        }\n    }\n    commandAnimation(object) {\n        if (!object) return;\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#eeeeeeff',\n                '#ffa500'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 500,\n            fill: 'forwards'\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    fixedAnimation(object) {\n        if (!object) return;\n        object.classList.add('fixed');\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#eeeeeeff',\n                '#ffff00'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 500,\n            fill: 'forwards'\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    successAnimation(object) {\n        if (!object) return;\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#eeeeeeff',\n                '#08a000',\n                '#eeeeeeff'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 500\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    returnLastElement(input) {\n        if (input.childElementCount > 0) {\n            if (!input.lastElementChild.classList.contains('fixed')) return input.lastElementChild;\n        }\n        return undefined;\n    }\n    inputStyling() {\n        document.body.style.backgroundImage = `\n            linear-gradient(180deg, \n                ${this.backgroundColor} 0%, \n                #06011b ${20 + this.inputIndex * 2 * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%,\n                #06011b ${20 + (this.inputIndex * 2 + 1) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%, \n                ${this.backgroundColor} ${window.innerHeight / document.body.scrollHeight * 100}%\n            )\n        `;\n    //#0d0043\n    //#440075\n    }\n    resultStyling(result) {\n        document.body.style.transition = 'background-image 250ms';\n        let str = `linear-gradient(180deg,`;\n        result.forEach((value, i)=>{\n            let color;\n            if (value === true) color = '#2be231';\n            else if (value === false) color = '#e80000';\n            else color = '#140063';\n            str += `#140063 ${20 + i * 2 * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%,\n                ${color} ${20 + (i * 2 + 0.5) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%, \n                #140063 ${20 + (i * 2 + 1) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%, `;\n        });\n        document.body.style.backgroundImage = str.slice(0, str.length - 2) + ')';\n    }\n}\n\n\n\nclass $b9cb672cfbcff24a$export$b0b374fde95c381e {\n    constructor(){\n        this.enterMode = false;\n        this.tabMode = false;\n        this.tabulator = \"\";\n        this.tabCount = 0;\n        this.v = 1;\n        this.round = 0;\n        this.failures = 0;\n        this.totalAttempts = 0;\n        this.totalPoints = 0;\n        this.badColor = 'rgb(186, 2, 70)';\n    }\n    //TODO: Remove greenShadowDesign in certain cases\n    modifyDocument(param) {\n        this.container = document.querySelector('#container');\n        this.iconPlaceholder = document.querySelector('#icon-placeholder');\n        this.navbar = document.querySelector('#navbar');\n        this.container.setAttribute('style', '');\n        document.body.style.backgroundImage = 'none';\n        document.body.setAttribute('class', '');\n        this.container.setAttribute('class', '');\n        this.iconPlaceholder.setAttribute('class', '');\n        this.navbar.setAttribute('class', '');\n        this.container.innerHTML = '';\n        this.iconPlaceholder.innerHTML = '';\n        this.navbar.innerHTML = '';\n        if (!param) param = 'add nouns';\n        let inflectVocabularyIcon;\n        inflectVocabularyIcon = document.createElement('object');\n        inflectVocabularyIcon.id = 'inflectVocabularyIcon';\n        this.v = 0;\n        this.badColor = 'rgb(186, 2, 70)';\n        switch(param){\n            case 'add verbs':\n            case 'verbs':\n                this.v = 9;\n                this.badColor = '#ff00d4';\n                if (param === 'add verbs') inflectVocabularyIcon.data = './conjugations.svg';\n                else inflectVocabularyIcon.data = './conjugate_verbs.svg';\n            case 'add nouns':\n            case 'nouns':\n            default:\n                const request = window.indexedDB.open('Vocabulary', 1);\n                request.onerror = (_)=>console.log(request.error);\n                request.onsuccess = (_)=>{\n                    this.database = request.result;\n                    this.tabulator = '';\n                    const transaction = this.database.transaction('inflected vocabulary', 'readonly');\n                    transaction.onerror = (_)=>console.error(transaction.error);\n                    const objectStore = transaction.objectStore('inflected vocabulary');\n                    const req = objectStore.getAll();\n                    req.onerror = (_)=>console.error(req.error);\n                    req.onsuccess = (_)=>{\n                        this.vocabulary = req.result;\n                        document.body.classList.add('inflectVocabularyBody');\n                        this.iconPlaceholder.classList.add('inflectVocabularyIconPlaceholder');\n                        if (param === 'add nouns') inflectVocabularyIcon.data = './declinations.svg';\n                        else if (param === 'nouns') inflectVocabularyIcon.data = './decline_nouns.svg';\n                        this.iconPlaceholder.insertAdjacentElement('beforeend', inflectVocabularyIcon);\n                        if (param === 'add verbs' || param === 'verbs') this.container.classList.add('inflectVocabularyContainer', 'verbs');\n                        else this.container.classList.add('inflectVocabularyContainer', 'nouns');\n                        this.navbar.classList.add('inflectVocabularyNavbar');\n                        this.container.tabIndex = 0;\n                        for(let i = 0; i < 21 - this.v; i++){\n                            let div = (0, $543d6d2a56ed7d8d$export$331ff980f0d45cff)(`div${i}`, 'editable');\n                            this.container.insertAdjacentElement('beforeend', div);\n                            if (i < 3) {\n                                div.classList.add('firstrow');\n                                div.classList.remove('editable');\n                                div.style.fontSize = `${div.offsetHeight * 0.75}px`;\n                                if (i === 1) div.innerHTML = 'Singular';\n                                else if (i === 2) div.innerHTML = 'Plural';\n                            }\n                            if (i % 3 === 0) {\n                                div.classList.add('firstcolumn');\n                                div.classList.remove('editable');\n                                div.style.fontSize = `${0.25 * div.offsetHeight}px`;\n                                if (i > 0) div.innerHTML = `${i / 3}. ${param.includes('verb') ? 'P' : 'F'}.`;\n                            }\n                            if (!(i < 3 || i % 3 === 0)) {\n                                div.style.padding = `${0.05 * div.offsetHeight}px`;\n                                if (!param.includes('add')) div.classList.add('shadowDesign');\n                            }\n                            if (param.includes('verb')) div.classList.add('v');\n                        }\n                        if (param.startsWith('add')) {\n                            this.buttonLeft = document.createElement('button');\n                            this.buttonLeft.classList.add('roundButton', 'c');\n                            this.buttonLeft.innerHTML = '<';\n                            this.navbar.appendChild(this.buttonLeft);\n                        }\n                        this.homeButton = document.createElement('button');\n                        this.homeButton.classList.add('roundButton');\n                        this.homeButton.tabIndex = -1;\n                        let icon = document.createElement('object');\n                        icon.classList.add('homeIcon');\n                        icon.data = './home.svg';\n                        icon.style.height = '7.5vh';\n                        icon.addEventListener('load', (_)=>{\n                            icon.contentDocument.addEventListener('click', (_)=>{\n                                (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                                if (this.tabMode) this.cancelTabMode();\n                                (0, $543d6d2a56ed7d8d$export$d12a05a2da93ee73).modifyDocument();\n                            });\n                        });\n                        this.homeButton.onclick = (_)=>{\n                            (0, $543d6d2a56ed7d8d$export$7aa98d28c688390a)();\n                            if (this.tabMode) this.cancelTabMode();\n                            (0, $543d6d2a56ed7d8d$export$d12a05a2da93ee73).modifyDocument();\n                        };\n                        this.homeButton.insertAdjacentElement('beforeend', icon);\n                        this.navbar.appendChild(this.homeButton);\n                        if (param.startsWith('add')) {\n                            this.deletionButton = document.createElement('button');\n                            this.deletionButton.classList.add('roundButton', 'deletionButton');\n                            this.deletionButton.innerHTML = 'X';\n                            this.deletionButton.tabIndex = -1;\n                            if (param.includes('verb')) this.deletionButton.classList.add('v');\n                            this.navbar.appendChild(this.deletionButton);\n                            this.buttonRight = document.createElement('button');\n                            this.buttonRight.classList.add('roundButton', 'c');\n                            this.buttonRight.innerHTML = '>';\n                            this.buttonRight.tabIndex = -1;\n                            this.navbar.appendChild(this.buttonRight);\n                        }\n                        if (param) this.type(param);\n                        else this.type();\n                    };\n                };\n                break;\n        }\n    }\n    type(param) {\n        switch(param){\n            case 'verbs':\n            case 'nouns':\n                this.keys = 0;\n                document.querySelectorAll('.editable').forEach((element)=>{\n                    element.addEventListener('click', (_)=>{\n                        this.selectedInput = element;\n                        this.keys = this.selectedInput.childElementCount;\n                        document.querySelectorAll('.selectedElement').forEach((elem)=>elem.classList.remove('selectedElement'));\n                        element.classList.add('selectedElement');\n                        this.inputIndex = parseInt(element.id.slice(3));\n                    });\n                });\n                this.selectedInput = document.getElementById('div4');\n                this.selectedInput.classList.add('selectedElement');\n                this.inputIndex = 4;\n                this.wordIndex = this.vocabulary.length;\n                this.currentWord = {\n                    singular: this.empty(param),\n                    plural: this.empty(param),\n                    verb: param.includes('verb'),\n                    probability: 1\n                };\n                this.keydownFunction = (event)=>{\n                    let forbiddenCharacters = [\n                        '<',\n                        \"\\xb4\",\n                        '`',\n                        '^'\n                    ];\n                    if (event.key === 'ArrowRight') {\n                        if (this.inputIndex < 20 - this.v) {\n                            this.inputIndex++;\n                            if (this.inputIndex % 3 === 0) this.inputIndex++;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        }\n                        return;\n                    } else if (event.key === 'ArrowLeft') {\n                        if (this.inputIndex > 4) {\n                            this.inputIndex--;\n                            if (this.inputIndex % 3 === 0) this.inputIndex--;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        }\n                        return;\n                    } else if (event.key === 'ArrowDown' || event.key === 'Enter') {\n                        if (this.inputIndex < 20 - this.v) {\n                            if (event.key === 'Enter' && !this.selectedInput.classList.contains('known-case')) {\n                                if (this.compare(Object.values(this.currentWord)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1], Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1])) {\n                                    for(let i = 0; i < this.selectedInput.childElementCount; i++){\n                                        let object = this.selectedInput.children[i];\n                                        this.successAnimation(object);\n                                    }\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\n                                        array[Math.floor(this.inputIndex / 3) - 1] = true;\n                                        Object.defineProperty(this.result, Object.keys(this.result)[this.inputIndex % 3 - 1], {\n                                            value: array\n                                        });\n                                        let inp = this.selectedInput;\n                                        setTimeout((_)=>{\n                                            inp.classList.remove('shadowDesign');\n                                            inp.classList.add('greenShadowDesign');\n                                        }, 500);\n                                    }\n                                } else {\n                                    for(let i = 0; i < this.selectedInput.childElementCount; i++){\n                                        let object = this.selectedInput.children[i];\n                                        this.failureAnimation(object);\n                                    }\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\n                                        array[Math.floor(this.inputIndex / 3) - 1] = false;\n                                        Object.defineProperty(this.result, Object.keys(this.result)[this.inputIndex % 3 - 1], {\n                                            value: array\n                                        });\n                                    }\n                                    let inp = this.selectedInput;\n                                    setTimeout((_)=>{\n                                        inp.classList.remove('shadowDesign');\n                                        inp.classList.add('redShadowDesign');\n                                    }, 500);\n                                }\n                            }\n                        }\n                        if (this.inputIndex < 18 - this.v) {\n                            this.inputIndex += 3;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                            if (event.key === 'Enter' && this.selectedInput.classList.contains('known-case')) {\n                                if (this.inputIndex < 18 - this.v) {\n                                    this.inputIndex += 3;\n                                    this.changeSelectedInput();\n                                    this.keys = this.selectedInput.childElementCount;\n                                } else if (this.inputIndex === 19 - this.v) {\n                                    this.inputIndex = 5;\n                                    this.changeSelectedInput();\n                                    this.keys = this.selectedInput.childElementCount;\n                                }\n                            }\n                        } else if (event.key === 'Enter' && this.inputIndex === 19 - this.v) {\n                            this.inputIndex = 5;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        } else if (event.key === 'Enter' && this.inputIndex === 20 - this.v) {\n                            this.currentWord.singular.forEach((word, i)=>{\n                                let index = 1 + (i + 1) * 3;\n                                if (this.compare(word, Object.values(this.vocabulary[this.currentWordIndex])[index % 3 - 1][Math.floor(index / 3) - 1])) {\n                                    for(let ii = 0; ii < this.container.children[index].childElementCount; ii++)if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\n                                        let object = this.container.children[index].children[ii];\n                                        this.successAnimation(object);\n                                    }\n                                    if (Object.values(this.result)[index % 3 - 1][Math.floor(index / 3) - 1] === undefined) {\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\n                                        array[Math.floor(this.inputIndex / 3) - 1] = true;\n                                        Object.defineProperty(this.result, Object.keys(this.result)[index % 3 - 1], {\n                                            value: array\n                                        });\n                                    }\n                                } else {\n                                    for(let ii = 0; ii < this.container.children[index].childElementCount; ii++)if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\n                                        let object = this.container.children[index].children[ii];\n                                        this.failureAnimation(object);\n                                    }\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\n                                        array[Math.floor(this.inputIndex / 3) - 1] = false;\n                                        Object.defineProperty(this.result, Object.keys(this.result)[this.inputIndex % 3 - 1], {\n                                            value: array\n                                        });\n                                    }\n                                }\n                            });\n                            this.currentWord.plural.forEach((word, i)=>{\n                                let index = 2 + (i + 1) * 3;\n                                if (this.compare(word, Object.values(this.vocabulary[this.currentWordIndex])[index % 3 - 1][Math.floor(index / 3) - 1])) {\n                                    for(let ii = 0; ii < this.container.children[index].childElementCount; ii++)if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\n                                        let object = this.container.children[index].children[ii];\n                                        this.successAnimation(object);\n                                    }\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\n                                        array[Math.floor(this.inputIndex / 3) - 1] = true;\n                                        Object.defineProperty(this.result, Object.keys(this.result)[this.inputIndex % 3 - 1], {\n                                            value: array\n                                        });\n                                    }\n                                } else {\n                                    for(let ii = 0; ii < this.container.children[index].childElementCount; ii++)if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\n                                        let object = this.container.children[index].children[ii];\n                                        this.failureAnimation(object);\n                                    }\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\n                                        array[Math.floor(this.inputIndex / 3) - 1] = false;\n                                        Object.defineProperty(this.result, Object.keys(this.result)[this.inputIndex % 3 - 1], {\n                                            value: array\n                                        });\n                                    }\n                                }\n                            });\n                            if (this.compareObjects(this.currentWord, this.vocabulary[this.currentWordIndex])) {\n                                this.totalAttempts += 11 - this.v / 3 * 2;\n                                let addition = this.result.singular.filter((w)=>w === true).length + this.result.plural.filter((w)=>w === true).length;\n                                this.totalPoints += addition;\n                                if (addition != 12 - this.v / 3 * 2) this.vocabulary[this.currentWordIndex].probability *= 0.8;\n                                else this.vocabulary[this.currentWordIndex].probability *= 1.2;\n                                const transaction = this.database.transaction('inflected vocabulary', 'readwrite');\n                                const objectStore = transaction.objectStore('inflected vocabulary');\n                                const request = objectStore.put(this.vocabulary[this.currentWordIndex], this.currentWordIndex + 1);\n                                request.onerror = (_)=>console.error(request.error);\n                                setTimeout((_)=>{\n                                    document.querySelectorAll('.selectedElement').forEach((div)=>{\n                                        div.classList.remove('selectedElement');\n                                    });\n                                    this.keys = 0;\n                                    this.inputIndex = 4;\n                                    this.selectedInput = document.querySelector('#div4');\n                                    this.selectedInput.classList.add('selectedElement');\n                                    this.startNewTrainingRound(param || 'nouns');\n                                }, 500);\n                            }\n                        }\n                        return;\n                    } else if (event.key === 'ArrowUp') {\n                        if (this.inputIndex > 6) {\n                            this.inputIndex -= 3;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        }\n                        return;\n                    } else if (event.key === 'Backspace') {\n                        if (this.selectedInput.lastElementChild) {\n                            this.selectedInput.lastElementChild.remove();\n                            let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                            array[Math.floor(this.inputIndex / 3) - 1] = array[Math.floor(this.inputIndex / 3) - 1].slice(0, this.keys - 1);\n                            Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                                value: array\n                            });\n                            this.keys--;\n                        }\n                        return;\n                    } else if (this.selectedInput.classList.contains('known-case')) return;\n                    else if (event.key == 'Tab') {\n                        if (this.tabulator) {\n                            if (this.keys + this.tabulator.length >= this.selectedInput.clientWidth / (this.selectedInput.clientHeight - parseFloat(this.selectedInput.style.padding))) this.selectedInput.childNodes.forEach((v, i)=>{\n                                this.failureAnimation(this.selectedInput.children[i]);\n                            });\n                            else {\n                                let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                                let n = Math.floor(this.inputIndex / 3) - 1;\n                                array[n] += this.tabulator;\n                                Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                                    value: array\n                                });\n                                this.tabulator.split('').forEach((letter)=>{\n                                    let object = document.createElement('object');\n                                    object.data = './keys/OG_T.svg';\n                                    object.id = `key${this.keys}-inp${this.inputIndex}`;\n                                    object.style.height = `100%`;\n                                    this.selectedInput.insertAdjacentElement('beforeend', object);\n                                    object.hidden = true;\n                                    object.addEventListener('load', (_)=>{\n                                        object.hidden = false;\n                                        let svg = object.contentDocument;\n                                        svg.querySelector('#tspan7').innerHTML = letter;\n                                        this.keys++;\n                                        this.tabulatorAnimation(object);\n                                    });\n                                });\n                            }\n                        }\n                        return;\n                    } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) return;\n                    let object = document.createElement('object');\n                    object.data = './keys/OG_T.svg';\n                    object.id = `key${this.keys}-inp${this.inputIndex}`;\n                    object.style.height = `100%`;\n                    this.selectedInput.insertAdjacentElement('beforeend', object);\n                    let width = object.clientHeight;\n                    object.hidden = true;\n                    object.addEventListener('load', (_)=>{\n                        if (this.keys + 1 >= Math.floor(this.selectedInput.clientWidth / width)) {\n                            object.remove();\n                            for(let i = 0; i < this.keys; i++)this.failureAnimation(this.selectedInput.children[i]);\n                            return;\n                        }\n                        object.hidden = false;\n                        let svg = object.contentDocument;\n                        svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\n                        let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                        array[Math.floor(this.inputIndex / 3) - 1] += event.key;\n                        Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                            value: array\n                        });\n                        this.keys++;\n                        this.idleAnimation(object);\n                    });\n                };\n                document.addEventListener('keydown', this.keydownFunction);\n                window.onkeyup = (event)=>{\n                    if (event.key === 'Tab') this.container.focus();\n                };\n                this.startNewTrainingRound(param ? param : 'nouns');\n                break;\n            case 'add verbs':\n            case 'add nouns':\n                this.keys = 0;\n                document.querySelectorAll('.editable').forEach((element)=>{\n                    element.addEventListener('click', (_)=>{\n                        if (this.tabMode) this.cancelTabMode();\n                        this.inputIndex = parseInt(element.id.slice(3));\n                        this.changeSelectedInput();\n                        this.keys = this.selectedInput.childElementCount;\n                    });\n                });\n                this.selectedInput = document.getElementById('div4');\n                this.selectedInput.classList.add('selectedElement');\n                this.inputIndex = 4;\n                this.wordIndex = this.vocabulary.length;\n                this.currentWord = {\n                    singular: this.empty(param),\n                    plural: this.empty(param),\n                    verb: param.includes('verb'),\n                    probability: 1\n                };\n                let deletionMode = false;\n                let indicator;\n                let deletionFunction = (_)=>{\n                    this.vocabulary.splice(this.wordIndex, 1);\n                    const transaction = this.database.transaction('inflected vocabulary', 'readwrite');\n                    const objectStore = transaction.objectStore('inflected vocabulary');\n                    const request = objectStore.openCursor();\n                    request.onsuccess = (_)=>{\n                        let cursor = request.result;\n                        if (cursor) {\n                            let k = cursor.key;\n                            let word = this.vocabulary[k - 1];\n                            if (word) {\n                                const updatedData = cursor.value;\n                                updatedData.singular = word.singular;\n                                updatedData.plural = word.plural;\n                                updatedData.verb = word.verb;\n                                updatedData.probability = word.probability;\n                                cursor.update(updatedData);\n                                cursor.continue();\n                            } else {\n                                cursor.delete();\n                                let vocab1 = this.vocabulary.slice(0, this.wordIndex);\n                                let vocab2 = this.vocabulary.slice(this.wordIndex);\n                                let wi1 = vocab1.findLastIndex((w)=>w.verb === param.includes('verb'));\n                                let wi2 = vocab2.findIndex((w)=>w.verb === param.includes('verb')) + this.wordIndex;\n                                if (this.vocabulary[wi1]) {\n                                    this.wordIndex = wi1;\n                                    this.currentWord = this.vocabulary[wi1];\n                                    let overallIndexes = [];\n                                    let tabulatorStyle = false;\n                                    for(let i = 3; i < this.container.childElementCount; i++){\n                                        let tabulatorIndexes = [];\n                                        let n = Math.floor(i / 3) - 1;\n                                        let singular = this.currentWord.singular;\n                                        let plural = this.currentWord.plural;\n                                        if (i % 3 === 1) {\n                                            this.container.children[i].innerHTML = '';\n                                            for(let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++)if (singular[n].slice(ii, ii + 5) === '^tab^') {\n                                                tabulatorStyle = !tabulatorStyle;\n                                                ii += 4;\n                                            } else {\n                                                let object = document.createElement('object');\n                                                object.data = './keys/OG_T.svg';\n                                                object.id = `key${ii}-inp${i}`;\n                                                object.style.height = `100%`;\n                                                this.container.children[i].insertAdjacentElement('beforeend', object);\n                                                if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                                object.addEventListener('load', (_)=>{\n                                                    let svg = object.contentDocument;\n                                                    svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\n                                                    if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                        this.tabulatorAnimation(object);\n                                                        object.classList.add('tabulator');\n                                                    }\n                                                });\n                                            }\n                                            overallIndexes.push([\n                                                i,\n                                                tabulatorIndexes\n                                            ]);\n                                        } else if (i % 3 === 2) {\n                                            this.container.children[i].innerHTML = '';\n                                            for(let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++)if (plural[n].slice(ii, ii + 5) === '^tab^') {\n                                                tabulatorStyle = !tabulatorStyle;\n                                                ii += 4;\n                                            } else {\n                                                let object = document.createElement('object');\n                                                object.data = './keys/OG_T.svg';\n                                                object.id = `key${ii}-inp${i}`;\n                                                object.style.height = `100%`;\n                                                this.container.children[i].insertAdjacentElement('beforeend', object);\n                                                if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                                object.addEventListener('load', (_)=>{\n                                                    let svg = object.contentDocument;\n                                                    svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\n                                                    if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                        this.tabulatorAnimation(object);\n                                                        object.classList.add('tabulator');\n                                                    }\n                                                });\n                                            }\n                                        }\n                                        overallIndexes.push([\n                                            i,\n                                            tabulatorIndexes\n                                        ]);\n                                    }\n                                    this.changeSelectedInput();\n                                } else if (this.vocabulary[wi2]) {\n                                    this.currentWord = this.vocabulary[wi2];\n                                    let overallIndexes = [];\n                                    let tabulatorStyle = false;\n                                    for(let i = 3; i < this.container.childElementCount; i++){\n                                        let tabulatorIndexes = [];\n                                        let n = Math.floor(i / 3) - 1;\n                                        let singular = this.currentWord.singular;\n                                        let plural = this.currentWord.plural;\n                                        if (i % 3 === 1) {\n                                            this.container.children[i].innerHTML = '';\n                                            for(let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++)if (singular[n].slice(ii, ii + 5) === '^tab^') {\n                                                tabulatorStyle = !tabulatorStyle;\n                                                ii += 4;\n                                            } else {\n                                                let object = document.createElement('object');\n                                                object.data = './keys/OG_T.svg';\n                                                object.id = `key${ii}-inp${i}`;\n                                                object.style.height = `100%`;\n                                                this.container.children[i].insertAdjacentElement('beforeend', object);\n                                                if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                                object.addEventListener('load', (_)=>{\n                                                    let svg = object.contentDocument;\n                                                    svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\n                                                    if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                        this.tabulatorAnimation(object);\n                                                        object.classList.add('tabulator');\n                                                    }\n                                                });\n                                            }\n                                            overallIndexes.push([\n                                                i,\n                                                tabulatorIndexes\n                                            ]);\n                                        } else if (i % 3 === 2) {\n                                            this.container.children[i].innerHTML = '';\n                                            for(let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++)if (plural[n].slice(ii, ii + 5) === '^tab^') {\n                                                tabulatorStyle = !tabulatorStyle;\n                                                ii += 4;\n                                            } else {\n                                                let object = document.createElement('object');\n                                                object.data = './keys/OG_T.svg';\n                                                object.id = `key${ii}-inp${i}`;\n                                                object.style.height = `100%`;\n                                                this.container.children[i].insertAdjacentElement('beforeend', object);\n                                                if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                                object.addEventListener('load', (_)=>{\n                                                    let svg = object.contentDocument;\n                                                    svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\n                                                    if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                        this.tabulatorAnimation(object);\n                                                        object.classList.add('tabulator');\n                                                    }\n                                                });\n                                            }\n                                            overallIndexes.push([\n                                                i,\n                                                tabulatorIndexes\n                                            ]);\n                                        }\n                                    }\n                                    this.changeSelectedInput();\n                                } else {\n                                    this.keys = 0;\n                                    this.currentWord = {\n                                        singular: this.empty(param),\n                                        plural: this.empty(param),\n                                        verb: param.includes('verb'),\n                                        probability: 1\n                                    };\n                                    for(let i = 0; i < this.container.childElementCount; i++){\n                                        if (i % 3 != 0) this.container.children[i].innerHTML = '';\n                                        this.container.children[i].classList.remove('selectedElement');\n                                    }\n                                    this.inputIndex = 4;\n                                    this.selectedInput = this.container.children[4];\n                                    this.tabCount = 0;\n                                    this.selectedInput.classList.add('selectedElement');\n                                }\n                            }\n                        }\n                    };\n                    deletionMode = false;\n                    this.deletionButton.removeEventListener('click', deletionFunction);\n                    this.deletionButton.classList.remove('click');\n                    document.querySelectorAll('object').forEach((object)=>{\n                        if (object.contentDocument.getElementById('tspan7')) this.deletionAnimation(object, 1, 'reverse');\n                    });\n                    Array.from(document.getElementsByClassName('editable')).forEach((div)=>{\n                        div.classList.remove('redShadowDesign');\n                    });\n                };\n                this.deletionButton.addEventListener('mousemove', (_)=>{\n                    if (deletionMode) return;\n                    deletionMode = true;\n                    this.deletionAnimation(this.deletionButton, 2000, 'normal');\n                    let broken = false;\n                    this.container.querySelectorAll('object').forEach((object)=>{\n                        if (object.contentDocument.getElementById('tspan7')) this.deletionAnimation(object, 2000, 'normal');\n                        else {\n                            broken = true;\n                            return;\n                        }\n                    });\n                    if (broken) this.container.querySelectorAll('object').forEach((object)=>{\n                        if (object.contentDocument.getElementById('tspan7')) this.deletionAnimation(object, 1, 'reverse');\n                    });\n                    indicator = setTimeout((_)=>{\n                        if (deletionMode) {\n                            this.deletionButton.addEventListener('click', deletionFunction);\n                            Array.from(document.getElementsByClassName('editable')).forEach((div)=>{\n                                div.classList.add('redShadowDesign');\n                            });\n                        }\n                    }, 2000);\n                });\n                this.deletionButton.addEventListener('mouseleave', (_)=>{\n                    clearTimeout(indicator);\n                    deletionMode = false;\n                    this.deletionAnimation(this.deletionButton, 1, 'reverse');\n                    this.container.querySelectorAll('object').forEach((object)=>{\n                        if (object.contentDocument.getElementById('tspan7')) this.deletionAnimation(object, 1, 'reverse');\n                    });\n                    Array.from(document.getElementsByClassName('editable')).forEach((div)=>{\n                        div.classList.remove('redShadowDesign');\n                    });\n                    this.deletionButton.removeEventListener('click', deletionFunction);\n                });\n                document.querySelectorAll('.c').forEach((element)=>{\n                    element.addEventListener('mousedown', (_)=>{\n                        element.classList.add('click');\n                        document.querySelectorAll('.editable').forEach((div)=>{\n                            div.classList.add('savedElement');\n                        });\n                    });\n                    element.addEventListener('mouseout', (_)=>{\n                        element.classList.remove('click');\n                        document.querySelectorAll('.editable').forEach((div)=>{\n                            div.classList.remove('savedElement');\n                        });\n                    });\n                });\n                this.buttonLeft.addEventListener('mouseup', (_)=>{\n                    console.log('left', this.vocabulary.map((w)=>w.singular[0]));\n                    if (this.tabMode) this.cancelTabMode();\n                    let vocab = this.vocabulary.slice(0, this.wordIndex);\n                    let wi = vocab.findLastIndex((w)=>w.verb === param.includes('verb'));\n                    if (this.vocabulary[wi]) {\n                        if (this.currentWord.singular.filter((value)=>value === '').length === (param.includes('verb') ? 3 : 6) && this.currentWord.plural.filter((value)=>value === '').length === (param.includes('verb') ? 3 : 6) && this.wordIndex === this.vocabulary.length) {\n                            for(let i = 0; i < this.container.childElementCount; i++){\n                                this.container.children[i].classList.remove('savedElement');\n                                this.buttonLeft.classList.remove('click');\n                            }\n                            this.wordIndex = wi;\n                            this.currentWord = this.vocabulary[wi];\n                            let overallIndexes = [];\n                            let tabulatorStyle = false;\n                            for(let i = 3; i < this.container.childElementCount; i++){\n                                let tabulatorIndexes = [];\n                                let n = Math.floor(i / 3) - 1;\n                                let singular = this.currentWord.singular;\n                                let plural = this.currentWord.plural;\n                                if (i % 3 === 1) {\n                                    this.container.children[i].innerHTML = '';\n                                    for(let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++)if (singular[n].slice(ii, ii + 5) === '^tab^') {\n                                        tabulatorStyle = !tabulatorStyle;\n                                        ii += 4;\n                                    } else {\n                                        let object = document.createElement('object');\n                                        object.data = './keys/OG_T.svg';\n                                        object.id = `key${ii}-inp${i}`;\n                                        object.style.height = `100%`;\n                                        this.container.children[i].insertAdjacentElement('beforeend', object);\n                                        if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                        object.addEventListener('load', (_)=>{\n                                            let svg = object.contentDocument;\n                                            svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\n                                            if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                this.tabulatorAnimation(object);\n                                                object.classList.add('tabulator');\n                                            }\n                                        });\n                                    }\n                                    overallIndexes.push([\n                                        i,\n                                        tabulatorIndexes\n                                    ]);\n                                } else if (i % 3 === 2) {\n                                    this.container.children[i].innerHTML = '';\n                                    for(let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++)if (plural[n].slice(ii, ii + 5) === '^tab^') {\n                                        tabulatorStyle = !tabulatorStyle;\n                                        ii += 4;\n                                    } else {\n                                        let object = document.createElement('object');\n                                        object.data = './keys/OG_T.svg';\n                                        object.id = `key${ii}-inp${i}`;\n                                        object.style.height = `100%`;\n                                        this.container.children[i].insertAdjacentElement('beforeend', object);\n                                        if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                        object.addEventListener('load', (_)=>{\n                                            let svg = object.contentDocument;\n                                            svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\n                                            if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                this.tabulatorAnimation(object);\n                                                object.classList.add('tabulator');\n                                            }\n                                        });\n                                    }\n                                }\n                                overallIndexes.push([\n                                    i,\n                                    tabulatorIndexes\n                                ]);\n                            }\n                            this.changeSelectedInput();\n                        } else {\n                            this.vocabulary[this.wordIndex] = this.currentWord;\n                            const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\n                            transaction.onerror = (_)=>console.error(transaction.error);\n                            const objectStore = transaction.objectStore(`inflected vocabulary`);\n                            const req = objectStore.get(this.wordIndex);\n                            req.onerror = (_)=>console.error(req.error);\n                            req.onsuccess = (_)=>{\n                                for(let i = 0; i < this.container.childElementCount; i++){\n                                    this.container.children[i].classList.remove('savedElement');\n                                    this.buttonLeft.classList.remove('click');\n                                }\n                                const idontcare = objectStore.put(this.currentWord, this.wordIndex + 1);\n                                idontcare.onerror = (_)=>console.error(idontcare.error);\n                                this.wordIndex = wi;\n                                let tabulatorStyle = false;\n                                this.currentWord = this.vocabulary[wi];\n                                let overallIndexes = [];\n                                for(let i = 3; i < this.container.childElementCount; i++){\n                                    let tabulatorIndexes = [];\n                                    let n = Math.floor(i / 3) - 1;\n                                    let singular = this.currentWord.singular;\n                                    let plural = this.currentWord.plural;\n                                    if (i % 3 === 1) {\n                                        this.container.children[i].innerHTML = '';\n                                        for(let ii = 0; ii < singular[n].length; ii++)if (singular[n].slice(ii, ii + 5) === '^tab^') {\n                                            tabulatorStyle = !tabulatorStyle;\n                                            ii += 4;\n                                        } else {\n                                            let object = document.createElement('object');\n                                            object.data = './keys/OG_T.svg';\n                                            object.id = `key${ii}-inp${i}`;\n                                            object.style.height = `100%`;\n                                            this.container.children[i].insertAdjacentElement('beforeend', object);\n                                            if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                            object.addEventListener('load', (_)=>{\n                                                let svg = object.contentDocument;\n                                                svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\n                                                if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                    this.tabulatorAnimation(object);\n                                                    object.classList.add('tabulator');\n                                                }\n                                            });\n                                        }\n                                        overallIndexes.push([\n                                            i,\n                                            tabulatorIndexes\n                                        ]);\n                                    } else if (i % 3 === 2) {\n                                        this.container.children[i].innerHTML = '';\n                                        for(let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++)if (plural[n].slice(ii, ii + 5) === '^tab^') {\n                                            tabulatorStyle = !tabulatorStyle;\n                                            ii += 4;\n                                        } else {\n                                            let object = document.createElement('object');\n                                            object.data = './keys/OG_T.svg';\n                                            object.id = `key${ii}-inp${i}`;\n                                            object.style.height = `100%`;\n                                            this.container.children[i].insertAdjacentElement('beforeend', object);\n                                            if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                            object.addEventListener('load', (_)=>{\n                                                let svg = object.contentDocument;\n                                                svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\n                                                if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                    this.tabulatorAnimation(object);\n                                                    object.classList.add('tabulator');\n                                                }\n                                            });\n                                        }\n                                        overallIndexes.push([\n                                            i,\n                                            tabulatorIndexes\n                                        ]);\n                                    }\n                                }\n                            };\n                        }\n                    }\n                    console.log('left end', this.vocabulary.map((w)=>w.singular[0]));\n                });\n                this.buttonRight.addEventListener('mouseup', (_)=>{\n                    console.log('right', this.vocabulary.map((w)=>w.singular[0]));\n                    if (this.tabMode) this.cancelTabMode();\n                    let vocab = this.vocabulary.slice(this.wordIndex + 1);\n                    let wi = vocab.findIndex((w)=>w.verb === param.includes('verb')) >= 0 ? vocab.findIndex((w)=>w.verb === param.includes('verb')) + this.wordIndex + 1 : -1;\n                    if (!this.vocabulary[wi]) {\n                        console.log('!this.vocabulary[wi]');\n                        this.vocabulary[this.wordIndex] = this.currentWord;\n                        const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\n                        transaction.onerror = (_)=>console.error(transaction.error);\n                        const objectStore = transaction.objectStore(`inflected vocabulary`);\n                        const req = objectStore.put(this.currentWord, this.wordIndex + 1);\n                        req.onerror = (_)=>console.error(req.error);\n                        transaction.oncomplete = (_)=>{\n                            for(let i = 0; i < this.container.childElementCount; i++){\n                                this.container.children[i].classList.remove('savedElement');\n                                this.buttonRight.classList.remove('click');\n                            }\n                            this.wordIndex = this.vocabulary.length;\n                            this.keys = 0;\n                            this.currentWord = {\n                                singular: this.empty(param),\n                                plural: this.empty(param),\n                                verb: param.includes('verb'),\n                                probability: 1\n                            };\n                            for(let i = 3; i < this.container.childElementCount; i++){\n                                if (i % 3 != 0) this.container.children[i].innerHTML = '';\n                                this.container.children[i].classList.remove('selectedElement');\n                            }\n                            this.inputIndex = 4;\n                            this.selectedInput = this.container.children[4];\n                            this.tabCount = 0;\n                            this.selectedInput.classList.add('selectedElement');\n                        };\n                    } else {\n                        console.log('this.vocabulary[wi]');\n                        this.vocabulary[this.wordIndex] = this.currentWord;\n                        for(let i = 0; i < this.container.childElementCount; i++){\n                            this.container.children[i].classList.remove('savedElement');\n                            this.buttonRight.classList.remove('click');\n                        }\n                        const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\n                        transaction.onerror = (_)=>console.error(transaction.error);\n                        const objectStore = transaction.objectStore(`inflected vocabulary`);\n                        const req = objectStore.get(this.wordIndex);\n                        req.onerror = (_)=>console.error(req.error);\n                        req.onsuccess = (_)=>{\n                            const idontcare = objectStore.put(this.currentWord, this.wordIndex + 1);\n                            idontcare.onerror = (_)=>console.error(idontcare.error);\n                            this.wordIndex = wi;\n                            this.currentWord = this.vocabulary[wi];\n                            let overallIndexes = [];\n                            let tabulatorStyle = false;\n                            for(let i = 3; i < this.container.childElementCount; i++){\n                                let tabulatorIndexes = [];\n                                let n = Math.floor(i / 3) - 1;\n                                let singular = this.currentWord.singular;\n                                let plural = this.currentWord.plural;\n                                if (i % 3 === 1) {\n                                    this.container.children[i].innerHTML = '';\n                                    for(let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++)if (singular[n].slice(ii, ii + 5) === '^tab^') {\n                                        tabulatorStyle = !tabulatorStyle;\n                                        ii += 4;\n                                    } else {\n                                        let object = document.createElement('object');\n                                        object.data = './keys/OG_T.svg';\n                                        object.id = `key${ii}-inp${i}`;\n                                        object.style.height = `100%`;\n                                        this.container.children[i].insertAdjacentElement('beforeend', object);\n                                        if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                        object.addEventListener('load', (_)=>{\n                                            let svg = object.contentDocument;\n                                            svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\n                                            if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                this.tabulatorAnimation(object);\n                                                object.classList.add('tabulator');\n                                            }\n                                        });\n                                    }\n                                    overallIndexes.push([\n                                        i,\n                                        tabulatorIndexes\n                                    ]);\n                                } else if (i % 3 === 2) {\n                                    this.container.children[i].innerHTML = '';\n                                    for(let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++)if (plural[n].slice(ii, ii + 5) === '^tab^') {\n                                        tabulatorStyle = !tabulatorStyle;\n                                        ii += 4;\n                                    } else {\n                                        let object = document.createElement('object');\n                                        object.data = './keys/OG_T.svg';\n                                        object.id = `key${ii}-inp${i}`;\n                                        object.style.height = `100%`;\n                                        this.container.children[i].insertAdjacentElement('beforeend', object);\n                                        if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                        object.addEventListener('load', (_)=>{\n                                            let svg = object.contentDocument;\n                                            svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\n                                            if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                this.tabulatorAnimation(object);\n                                                object.classList.add('tabulator');\n                                            }\n                                        });\n                                    }\n                                    overallIndexes.push([\n                                        i,\n                                        tabulatorIndexes\n                                    ]);\n                                }\n                                this.changeSelectedInput();\n                            }\n                        };\n                    }\n                    console.log('right end', this.vocabulary.map((w)=>w.singular[0]));\n                });\n                this.keydownFunction = (event)=>{\n                    let forbiddenCharacters = [\n                        '<',\n                        \"\\xb4\",\n                        '`',\n                        '^'\n                    ];\n                    if (event.key === 'ArrowRight') {\n                        if (this.tabMode) this.cancelTabMode();\n                        if (this.inputIndex < 20 - this.v) {\n                            this.inputIndex++;\n                            if (this.inputIndex % 3 === 0) this.inputIndex++;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        }\n                        return;\n                    } else if (event.key === 'ArrowLeft') {\n                        if (this.tabMode) this.cancelTabMode();\n                        if (this.inputIndex > 4) {\n                            this.inputIndex--;\n                            if (this.inputIndex % 3 === 0) this.inputIndex--;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        }\n                        return;\n                    } else if (event.key === 'ArrowDown' || event.key === 'Enter') {\n                        if (this.tabMode) {\n                            this.cancelTabMode();\n                            if (this.inputIndex === 19) return;\n                        }\n                        if (this.inputIndex < 18 - this.v) {\n                            this.inputIndex += 3;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        } else if (event.key === 'Enter' && this.inputIndex === 19 - this.v) {\n                            this.inputIndex = 5;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        } else if (event.key === 'Enter' && this.inputIndex === 20 - this.v) {\n                            document.querySelectorAll('.editable').forEach((element)=>{\n                                element.classList.add('savedElement');\n                            });\n                            if (this.enterMode) {\n                                let vocab = this.vocabulary.slice(this.wordIndex + 1);\n                                let wi = vocab.findIndex((w)=>w.verb === param.includes('verb'));\n                                if (!this.vocabulary[wi]) {\n                                    this.vocabulary[this.wordIndex] = this.currentWord;\n                                    const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\n                                    transaction.onerror = (_)=>console.error(transaction.error);\n                                    const objectStore = transaction.objectStore(`inflected vocabulary`);\n                                    const req = objectStore.put(this.currentWord, this.wordIndex + 1);\n                                    req.onerror = (_)=>console.error(req.error);\n                                    transaction.oncomplete = (_)=>{\n                                        for(let i = 0; i < this.container.childElementCount; i++)this.container.children[i].classList.remove('savedElement');\n                                        this.wordIndex++;\n                                        this.keys = 0;\n                                        this.currentWord = {\n                                            singular: this.empty(param),\n                                            plural: this.empty(param),\n                                            verb: param.includes('verb'),\n                                            probability: 1\n                                        };\n                                        for(let i = 0; i < this.container.childElementCount; i++){\n                                            if (i % 3 != 0) this.container.children[i].innerHTML = '';\n                                            this.container.children[i].classList.remove('selectedElement');\n                                        }\n                                        this.inputIndex = 4;\n                                        this.selectedInput = this.container.children[4];\n                                        this.tabCount = 0;\n                                        this.selectedInput.classList.add('selectedElement');\n                                    };\n                                } else {\n                                    this.vocabulary[this.wordIndex] = this.currentWord;\n                                    for(let i = 0; i < this.container.childElementCount; i++)this.container.children[i].classList.remove('savedElement');\n                                    const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\n                                    transaction.onerror = (_)=>console.error(transaction.error);\n                                    const objectStore = transaction.objectStore(`inflected vocabulary`);\n                                    const req = objectStore.get(this.wordIndex);\n                                    req.onerror = (_)=>console.error(req.error);\n                                    req.onsuccess = (_)=>{\n                                        const idontcare = objectStore.put(this.currentWord, this.wordIndex + 1);\n                                        idontcare.onerror = (_)=>console.log(idontcare.error);\n                                        this.wordIndex = wi;\n                                        this.currentWord = this.vocabulary[wi];\n                                        let overallIndexes = [];\n                                        let tabulatorStyle = false;\n                                        for(let i = 3; i < this.container.childElementCount; i++){\n                                            let tabulatorIndexes = [];\n                                            let n = Math.floor(i / 3) - 1;\n                                            let singular = this.currentWord.singular;\n                                            let plural = this.currentWord.plural;\n                                            if (i % 3 === 1) {\n                                                this.container.children[i].innerHTML = '';\n                                                for(let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++)if (singular[n].slice(ii, ii + 5) === '^tab^') {\n                                                    tabulatorStyle = !tabulatorStyle;\n                                                    ii += 4;\n                                                } else {\n                                                    let object = document.createElement('object');\n                                                    object.data = './keys/OG_T.svg';\n                                                    object.id = `key${ii}-inp${i}`;\n                                                    object.style.height = `100%`;\n                                                    this.container.children[i].insertAdjacentElement('beforeend', object);\n                                                    if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                                    object.addEventListener('load', (_)=>{\n                                                        let svg = object.contentDocument;\n                                                        svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\n                                                        if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                            this.tabulatorAnimation(object);\n                                                            object.classList.add('tabulator');\n                                                        }\n                                                    });\n                                                }\n                                                overallIndexes.push([\n                                                    i,\n                                                    tabulatorIndexes\n                                                ]);\n                                            } else if (i % 3 === 2) {\n                                                this.container.children[i].innerHTML = '';\n                                                for(let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++)if (plural[n].slice(ii, ii + 5) === '^tab^') {\n                                                    tabulatorStyle = !tabulatorStyle;\n                                                    ii += 4;\n                                                } else {\n                                                    let object = document.createElement('object');\n                                                    object.data = './keys/OG_T.svg';\n                                                    object.id = `key${ii}-inp${i}`;\n                                                    object.style.height = `100%`;\n                                                    this.container.children[i].insertAdjacentElement('beforeend', object);\n                                                    if (tabulatorStyle) tabulatorIndexes.push(ii);\n                                                    object.addEventListener('load', (_)=>{\n                                                        let svg = object.contentDocument;\n                                                        svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\n                                                        if (overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3))) && overallIndexes.find((indexes)=>indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))) {\n                                                            this.tabulatorAnimation(object);\n                                                            object.classList.add('tabulator');\n                                                        }\n                                                    });\n                                                }\n                                                overallIndexes.push([\n                                                    i,\n                                                    tabulatorIndexes\n                                                ]);\n                                            }\n                                            this.changeSelectedInput();\n                                        }\n                                    };\n                                }\n                                this.enterMode = false;\n                            } else this.enterMode = true;\n                            const transaction = this.database.transaction('inflected vocabulary', 'readwrite');\n                            const objectStore = transaction.objectStore('inflected vocabulary');\n                            const req = objectStore.put(this.currentWord, this.wordIndex + 1);\n                            req.onerror = (_)=>console.error(req.error);\n                            setTimeout((_)=>{\n                                for(let i = 0; i < this.container.childElementCount; i++)this.container.children[i].classList.remove('savedElement');\n                            }, 250);\n                        }\n                        return;\n                    } else if (event.key === 'ArrowUp') {\n                        if (this.tabMode) this.cancelTabMode();\n                        if (this.inputIndex > 6) {\n                            this.inputIndex -= 3;\n                            this.changeSelectedInput();\n                            this.keys = this.selectedInput.childElementCount;\n                        }\n                        return;\n                    } else if (event.key === 'Backspace') {\n                        if (this.selectedInput.lastElementChild) {\n                            this.selectedInput.lastElementChild.remove();\n                            let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                            let n = Math.floor(this.inputIndex / 3) - 1;\n                            if (array[n].slice(-5) === '^tab^') {\n                                array[n] = array[n].slice(0, array[n].length - 6);\n                                if (this.tabCount > 1) this.tabCount--;\n                                this.tabMode = !this.tabMode;\n                                this.selectedInput.classList.add('tab');\n                                if (!this.tabMode) this.selectedInput.classList.remove('tab');\n                            } else array[n] = array[n].slice(0, array[n].length - 1);\n                            Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                                value: array\n                            });\n                            this.keys--;\n                            if (this.tabMode) this.tabulator = this.tabulator.slice(0, this.tabulator.length - 1);\n                        } else if (this.tabMode) this.cancelTabMode();\n                        return;\n                    } else if (event.key === 'Tab') {\n                        if (!this.tabMode) {\n                            if (this.tabCount >= 2) {\n                                let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                                let n = Math.floor(this.inputIndex / 3) - 1;\n                                let index;\n                                while(array[n].search('\\\\^tab\\\\^') !== -1){\n                                    let c = array[n].search('\\\\^tab\\\\^');\n                                    if (index === undefined) index = c;\n                                    array[n] = array[n].slice(0, c) + array[n].slice(c + 5, array[n].length);\n                                }\n                                array[n] = array[n].slice(0, index) + '^tab^' + array[n].slice(index, array[n].length);\n                                Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                                    value: array\n                                });\n                                let tabulatorStyle = false;\n                                for(let i = 0; i < array[n].length; i++){\n                                    if (array[n].slice(i, i + 5) === '^tab^') {\n                                        tabulatorStyle = !tabulatorStyle;\n                                        i += 4;\n                                    } else if (this.selectedInput.children[i > index ? i - 5 : i]) {\n                                        let object = this.selectedInput.children[i > index ? i - 5 : i];\n                                        let svg = object.contentDocument;\n                                        svg.querySelector('#tspan7').innerHTML = array[n].charAt(i);\n                                        if (tabulatorStyle) {\n                                            this.tabulatorAnimation(object);\n                                            object.classList.add('tabulator');\n                                        } else object.classList.remove('tabulator');\n                                        this.selectedInput.children[i];\n                                    }\n                                }\n                                this.tabulator = array[n].slice(index + 5, array[n].length);\n                                this.tabCount = 1;\n                                this.tabMode = true;\n                                this.selectedInput.classList.add('tab');\n                            } else {\n                                this.tabMode = true;\n                                this.selectedInput.classList.add('tab');\n                                let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                                array[Math.floor(this.inputIndex / 3) - 1] += \"^tab^\";\n                                Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                                    value: array\n                                });\n                                this.tabCount++;\n                            }\n                        } else if (this.tabulator.length > 0) {\n                            if (Object.values(this.currentWord)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1].slice(-5) != '^tab^') {\n                                this.tabMode = false;\n                                this.selectedInput.classList.remove('tab');\n                                let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                                array[Math.floor(this.inputIndex / 3) - 1] += \"^tab^\";\n                                Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                                    value: array\n                                });\n                                this.tabCount++;\n                            } else {\n                                let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                                let n = Math.floor(this.inputIndex / 3) - 1;\n                                array[n] += this.tabulator + \"^tab^\";\n                                let index = array[n].search(this.tabulator);\n                                if (index === -1) index = 0;\n                                if (this.keys + this.tabulator.length <= Math.floor(this.selectedInput.clientWidth / (this.selectedInput.clientHeight - parseFloat(this.selectedInput.style.padding)))) for(let i = 0; i < this.tabulator.length; i++){\n                                    let object = document.createElement('object');\n                                    object.data = './keys/OG_T.svg';\n                                    object.id = `key${this.keys}-inp${this.inputIndex}`;\n                                    object.style.height = `100%`;\n                                    this.selectedInput.insertAdjacentElement('beforeend', object);\n                                    object.hidden = true;\n                                    object.addEventListener('load', (_)=>{\n                                        object.hidden = false;\n                                        this.tabulatorAnimation(object);\n                                        object.classList.add('tabulator');\n                                        let svg = object.contentDocument;\n                                        svg.querySelector('#tspan7').innerHTML = this.tabulator.charAt(i);\n                                        this.tabulator.length;\n                                    });\n                                    this.keys++;\n                                }\n                                else {\n                                    for(let ii = 0; ii < this.keys; ii++)this.failureAnimation(this.selectedInput.children[ii]);\n                                    return;\n                                }\n                                Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                                    value: array\n                                });\n                                this.tabMode = false;\n                                this.tabCount++;\n                                this.selectedInput.classList.remove('tab');\n                            }\n                        } else {\n                            this.tabCount = 0;\n                            this.cancelTabMode();\n                        }\n                        return;\n                    } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) return;\n                    this.enterMode = false;\n                    let object = document.createElement('object');\n                    object.data = './keys/OG_T.svg';\n                    object.id = `key${this.keys}-inp${this.inputIndex}`;\n                    object.style.height = `100%`;\n                    this.selectedInput.insertAdjacentElement('beforeend', object);\n                    let width = object.clientHeight;\n                    object.hidden = true;\n                    object.addEventListener('load', (_)=>{\n                        if (this.keys + 1 >= Math.floor(this.selectedInput.clientWidth / width)) {\n                            object.remove();\n                            for(let i = 0; i < this.keys; i++)this.failureAnimation(this.selectedInput.children[i]);\n                            return;\n                        }\n                        object.hidden = false;\n                        let svg = object.contentDocument;\n                        svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\n                        let n = Math.floor(this.inputIndex / 3) - 1;\n                        let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n                        array[n] += event.key;\n                        Object.defineProperty(this.currentWord, Object.keys(this.currentWord)[this.inputIndex % 3 - 1], {\n                            value: array\n                        });\n                        if (this.tabMode) {\n                            if (array[n].slice(-6, -1) === '^tab^') this.tabulator = '';\n                            this.tabulator += event.key;\n                            this.tabulatorAnimation(object);\n                            object.classList.add('tabulator');\n                        } else this.idleAnimation(object);\n                        this.keys++;\n                    });\n                };\n                document.addEventListener('keydown', this.keydownFunction);\n                window.onkeyup = (event)=>{\n                    if (event.key === 'Tab') this.container.focus();\n                };\n                break;\n            default:\n                break;\n        }\n    }\n    empty(param) {\n        let l = param.includes('verb') ? 3 : 6;\n        let array = [];\n        for(let i = 0; i < l; i++)array.push('');\n        return array;\n    }\n    changeSelectedInput() {\n        document.querySelectorAll('.selectedElement').forEach((elem)=>elem.classList.remove('selectedElement'));\n        this.selectedInput = document.getElementById(`div${this.inputIndex}`);\n        let word = Object.values(this.currentWord)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1];\n        let regex = new RegExp('\\\\^tab\\\\^', 'g');\n        let matches = word.match(regex);\n        this.tabCount = matches ? matches.length : 0;\n        if (!matches ? false : matches.length % 2 === 0) this.selectedInput.classList.remove('tab');\n        this.selectedInput.classList.add('selectedElement');\n    }\n    cancelTabMode() {\n        let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\n        let n = Math.floor(this.inputIndex / 3) - 1;\n        if (array[n].includes('^tab^')) {\n            let start_end = [];\n            while(array[n].search('\\\\^tab\\\\^') >= 0){\n                let c = array[n].search('\\\\^tab\\\\^');\n                array[n] = array[n].slice(0, c) + array[n].slice(c + 5, array[n].length);\n                start_end.push(c);\n            }\n            if (start_end.length === 1) start_end.push(array[n].length);\n            let tab = array[n].slice(start_end[0], start_end[1]);\n            for(let i = 0; i < tab.length; i++)this.selectedInput.children[start_end[0]].remove();\n            array[n] = array[n].slice(0, start_end[0]) + array[n].slice(start_end[1], array[n].length);\n            this.keys -= tab.length;\n        }\n        this.tabMode = false;\n        this.selectedInput.classList.remove('tab');\n    }\n    findMostUsedTabulator(inflectedWord) {\n        if (inflectedWord.singular) {\n            let tabs = inflectedWord.singular.map((word)=>{\n                if (word.includes('^tab^')) {\n                    let w = word;\n                    let start;\n                    let end = w.length;\n                    while(w.includes('^tab^')){\n                        let index = w.search('\\\\^tab\\\\^');\n                        w = w.slice(0, index) + w.slice(index + 5, end);\n                        if (start === undefined) start = index;\n                        else end = index;\n                    }\n                    return w.slice(start ? start : 0, end);\n                }\n            }).concat(inflectedWord.plural.map((word)=>{\n                if (word.includes('^tab^')) {\n                    let w = word;\n                    let start;\n                    let end = w.length;\n                    while(w.includes('^tab^')){\n                        let index = w.search('\\\\^tab\\\\^');\n                        w = w.slice(0, index) + w.slice(index + 5, end);\n                        if (start === undefined) start = index;\n                        else end = index;\n                    }\n                    return w.slice(start ? start : 0, end);\n                }\n            })).filter((word)=>word != undefined);\n            let checkedTabs = [];\n            tabs.forEach((tab)=>{\n                if (!checkedTabs.map((t)=>t[0]).includes(tab)) checkedTabs.push([\n                    tab,\n                    1\n                ]);\n                else {\n                    let i = checkedTabs.findIndex((t)=>t[0] === tab);\n                    checkedTabs[i] = [\n                        tab,\n                        checkedTabs[i][1] + 1\n                    ];\n                }\n            });\n            for(let i = 0; i < checkedTabs.length; i++)checkedTabs.sort((a, b)=>b[1] - a[1]);\n            return checkedTabs.length > 0 ? checkedTabs[0][0] : undefined;\n        } else return undefined;\n    }\n    startNewTrainingRound(param) {\n        let vocab = this.vocabulary.filter((w)=>w.verb === param.includes('verb'));\n        if (vocab.length === 0) {\n            setTimeout((_)=>alert(`Keine ${param.includes('verb') ? 'Konjugationen' : 'Deklinationen'}!`), 250);\n            return;\n        } else if (vocab.filter((w)=>!isEmpty(w)).length === 0) {\n            setTimeout((_)=>alert(`Nur leere ${param.includes('verb') ? 'Konjugationen' : 'Deklinationen'}!`), 250);\n            return;\n        }\n        function isEmpty(w) {\n            return w.singular.filter((s)=>s.trim() === '').length === (param.includes('verb') ? 6 : 3) && w.plural.filter((p)=>p.trim() === '').length === (param.includes('verb') ? 6 : 3);\n        }\n        this.round++;\n        let overallProbabilty = 0;\n        vocab.forEach((word)=>{\n            if (!isEmpty(word)) overallProbabilty += word.probability;\n        });\n        let randomNumber = Math.floor(Math.random() * overallProbabilty * 10) / 10;\n        let lowestDifference;\n        let lastProbability = 0;\n        this.failures = 0;\n        this.vocabulary.forEach((word, i)=>{\n            if (!isEmpty(word) && word.verb === param.includes('verb')) {\n                if (lowestDifference === undefined) {\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\n                    this.currentWord = word;\n                    this.currentWordIndex = i;\n                } else if (Math.abs(randomNumber - (lastProbability + word.probability)) < lowestDifference) {\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\n                    this.currentWordIndex = i;\n                    this.currentWord = word;\n                }\n                lastProbability += word.probability;\n            }\n        });\n        this.tabulator = this.findMostUsedTabulator(this.currentWord);\n        document.querySelectorAll('.editable').forEach((div)=>{\n            div.innerHTML = '';\n            div.classList.remove('redShadowDesign');\n            div.classList.remove('greenShadowDesign');\n            div.classList.remove('known-case');\n            div.classList.add('shadowDesign');\n        });\n        let knownCase;\n        let rn;\n        let v = this.v / 3;\n        do {\n            rn = Math.floor(Math.random() * (param.includes('verb') ? 6 : 12));\n            knownCase = Object.values(this.vocabulary[this.currentWordIndex])[rn > 5 - v ? 1 : 0][rn > 5 - v ? rn - 6 + v : rn];\n        }while (knownCase === '');\n        while(knownCase.includes('^tab^')){\n            let index = knownCase.search('\\\\^tab\\\\^');\n            knownCase = knownCase.slice(0, index) + knownCase.slice(index + 5, knownCase.length);\n        }\n        let specificationDiv = document.getElementById(`div${rn > 5 - v ? 2 + (rn - 5 + v) * 3 : 1 + (rn + 1) * 3}`);\n        specificationDiv.classList.add('known-case');\n        specificationDiv.innerHTML = `<span>${knownCase}</span>`;\n        let array = this.empty(param);\n        array[rn > 5 - v ? rn - 6 + v : rn] = knownCase;\n        this.currentWord = {\n            singular: rn <= 5 - v ? array : this.empty(param),\n            plural: rn > 5 - v ? array : this.empty(param),\n            verb: param.includes('verb'),\n            probability: this.currentWord.probability\n        };\n        this.result = {\n            singular: param.includes('verb') ? [\n                undefined,\n                undefined,\n                undefined\n            ] : [\n                undefined,\n                undefined,\n                undefined,\n                undefined,\n                undefined,\n                undefined\n            ],\n            plural: param.includes('verb') ? [\n                undefined,\n                undefined,\n                undefined\n            ] : [\n                undefined,\n                undefined,\n                undefined,\n                undefined,\n                undefined,\n                undefined\n            ]\n        };\n    }\n    compare(string1, string2) {\n        while(string1.includes('^tab^')){\n            let index = string1.search('\\\\^tab\\\\^');\n            string1 = string1.slice(0, index) + string1.slice(index + 5, string1.length);\n        }\n        while(string2.includes('^tab^')){\n            let index = string2.search('\\\\^tab\\\\^');\n            string2 = string2.slice(0, index) + string2.slice(index + 5, string2.length);\n        }\n        return string1 === string2;\n    }\n    compareObjects(obj1, obj2) {\n        let object1 = JSON.parse(JSON.stringify(obj1));\n        let object2 = JSON.parse(JSON.stringify(obj2));\n        object1.singular.forEach((word, i)=>{\n            while(word.includes('^tab^')){\n                let index = word.search('\\\\^tab\\\\^');\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\n            }\n            object1.singular[i] = word;\n        });\n        object1.plural.forEach((word, i)=>{\n            while(word.includes('^tab^')){\n                let index = word.search('\\\\^tab\\\\^');\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\n            }\n            object1.plural[i] = word;\n        });\n        object2.singular.forEach((word, i)=>{\n            while(word.includes('^tab^')){\n                let index = word.search('\\\\^tab\\\\^');\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\n            }\n            object2.singular[i] = word;\n        });\n        object2.plural.forEach((word, i)=>{\n            while(word.includes('^tab^')){\n                let index = word.search('\\\\^tab\\\\^');\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\n            }\n            object2.plural[i] = word;\n        });\n        return Object.values(object1).slice(0, 3).toLocaleString() === Object.values(object2).slice(0, 3).toLocaleString();\n    }\n    failureAnimation(object) {\n        if (!object) return;\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = [\n            {\n                stroke: this.badColor,\n                offset: 0.025\n            },\n            {\n                rotate: \"10deg z\",\n                offset: 0.25\n            },\n            {\n                rotate: \"0deg z\",\n                offset: 0.5\n            },\n            {\n                rotate: \"-10deg z\",\n                offset: 0.75,\n                stroke: this.badColor\n            },\n            {\n                stroke: \"#eeeeeeff\",\n                offset: 0.925\n            },\n            {\n                rotate: \"0deg z\",\n                offset: 1\n            }\n        ];\n        let animationOptions = {\n            duration: 500\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    idleAnimation(object) {\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#8f8f8f',\n                '#fff',\n                '#eeeeeeff'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 250\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    tabulatorAnimation(object) {\n        if (!object) return;\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#eeeeeeff',\n                this.badColor === 'rgb(186, 2, 70)' ? '#4400ff' : 'rgb(211, 0, 0)'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 250,\n            fill: 'forwards'\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    successAnimation(object) {\n        if (!object) return;\n        let svg = object.contentDocument;\n        let rect = svg.querySelector('#mainRect');\n        let text = svg.querySelector('#text7');\n        let animationKeyframes = {\n            stroke: [\n                '#eeeeeeff',\n                '#08a000',\n                '#eeeeeeff'\n            ],\n            offset: [\n                0,\n                1\n            ]\n        };\n        let animationOptions = {\n            duration: 500\n        };\n        rect.animate(animationKeyframes, animationOptions);\n        text.animate(animationKeyframes, animationOptions);\n    }\n    deletionAnimation(element, duration, direction) {\n        if (element.tagName === 'OBJECT') {\n            let object = element;\n            let svg = object.contentDocument;\n            let rect = svg.querySelector('#mainRect');\n            let text = svg.querySelector('#text7');\n            let animationKeyframes = {\n                stroke: [\n                    object.classList.contains('tabulator') ? this.badColor === 'rgb(186, 2, 70)' ? '#4400ff' : 'rgb(211, 0, 0)' : '#eeeeeeff',\n                    this.badColor\n                ],\n                offset: [\n                    0,\n                    1\n                ]\n            };\n            let animationOptions = {\n                duration: duration,\n                fill: 'forwards',\n                direction: direction\n            };\n            rect.animate(animationKeyframes, animationOptions);\n            text.animate(animationKeyframes, animationOptions);\n        } else if (element.tagName === 'BUTTON') {\n            let animationKeyframes = {\n                backgroundColor: [\n                    this.badColor === 'rgb(186, 2, 70)' ? '#ff0000' : this.badColor,\n                    this.badColor === 'rgb(186, 2, 70)' ? '#ba0303' : '#ad0668'\n                ],\n                boxShadow: [\n                    `0 0 0 0 ${this.badColor === 'rgb(186, 2, 70)' ? '#ba0303' : '#ad0668'}`,\n                    `0 0 1vh 1vh ${this.badColor === 'rgb(186, 2, 70)' ? '#ff0000' : this.badColor}`\n                ],\n                color: [\n                    '#ffffff',\n                    '#eeffff'\n                ],\n                border: [\n                    'none',\n                    'none'\n                ],\n                offset: [\n                    0,\n                    1\n                ]\n            };\n            let animationOptions = {\n                duration: duration,\n                fill: 'forwards',\n                direction: direction\n            };\n            element.animate(animationKeyframes, animationOptions);\n        }\n    }\n}\n\n\nfunction $543d6d2a56ed7d8d$export$331ff980f0d45cff(id, c, width, height) {\n    let div = document.createElement('div');\n    if (id) div.id = id;\n    if (c) div.classList.add(c);\n    if (height && width) {\n        div.style.height = height;\n        div.style.width = width;\n    }\n    return div;\n}\nconst $543d6d2a56ed7d8d$export$abeb1bd8b6f9168 = new (0, $4d277e047e39cff6$export$69a62912f7243a04)();\nconst $543d6d2a56ed7d8d$export$927980128d33596b = new (0, $5e3b93ee4c6a7549$export$d5e53f8bbb738c78)();\nconst $543d6d2a56ed7d8d$export$e73a7799776ae73d = new (0, $b6fe10105ad30798$export$564a2d2b8c542ee9)();\nconst $543d6d2a56ed7d8d$export$82d34e6fb29a1ab3 = new (0, $b9cb672cfbcff24a$export$b0b374fde95c381e)();\nconst $543d6d2a56ed7d8d$export$d12a05a2da93ee73 = new (0, $0605b9bc60daa790$export$70f2439247e54615)();\nfunction $543d6d2a56ed7d8d$export$7aa98d28c688390a() {\n    document.removeEventListener('keydown', $543d6d2a56ed7d8d$export$abeb1bd8b6f9168.keyDownFunction);\n    document.removeEventListener('keydown', $543d6d2a56ed7d8d$export$e73a7799776ae73d.keyDownFunction);\n    document.removeEventListener('keydown', $543d6d2a56ed7d8d$export$d12a05a2da93ee73.keyDownFunction);\n    document.removeEventListener('keydown', $543d6d2a56ed7d8d$export$82d34e6fb29a1ab3.keydownFunction);\n    document.removeEventListener('mouseover', $543d6d2a56ed7d8d$export$e73a7799776ae73d.mouseOverFunction);\n    window.removeEventListener('resize', $543d6d2a56ed7d8d$export$d12a05a2da93ee73.resizeFunction);\n    window.removeEventListener('resize', $543d6d2a56ed7d8d$export$e73a7799776ae73d.resizeFunction);\n}\n\n\n//# sourceMappingURL=index.5b63dd8f.js.map\n","import { AddVocabulary, WordBundle } from \"./src/add-vocabulary\";\r\nimport { HomeMenu } from \"./src/home-menu\";\r\nimport { ShowVocabulary } from \"./src/show-vocabulary\";\r\nimport { VocabularyTraining } from \"./src/vocabulary-training\";\r\nimport { InflectVocabulary } from \"./src/inflect-vocabulary\"\r\n\r\nexport function createDiv(id?: string, c?: string, width?: string, height?: string): HTMLDivElement {\r\n    let div = document.createElement('div');\r\n    if (id) div.id = id;\r\n    if (c) div.classList.add(c);\r\n    if (height && width) {\r\n        div.style.height = height;\r\n        div.style.width = width;\r\n    }\r\n    return div;\r\n}\r\n\r\nexport const addVocabulary = new AddVocabulary();\r\n\r\nexport const showVocabulary = new ShowVocabulary();\r\n\r\nexport const training = new VocabularyTraining();\r\n\r\nexport const inflectVocabulary = new InflectVocabulary();\r\n\r\nexport const home = new HomeMenu();\r\n\r\nexport function removeAllEventListeners(): void {\r\n    document.removeEventListener('keydown', addVocabulary.keyDownFunction);\r\n    document.removeEventListener('keydown', training.keyDownFunction);\r\n    document.removeEventListener('keydown', home.keyDownFunction);\r\n    document.removeEventListener('keydown', inflectVocabulary.keydownFunction);\r\n    document.removeEventListener('mouseover', training.mouseOverFunction);\r\n    window.removeEventListener('resize', home.resizeFunction);\r\n    window.removeEventListener('resize', training.resizeFunction);\r\n}","import { createDiv, home, removeAllEventListeners } from \"..\";\r\n\r\nexport class AddVocabulary {\r\n    container: HTMLDivElement;\r\n    iconPlaceholder: HTMLDivElement;\r\n    navbar: HTMLDivElement;\r\n    buttonLeft: HTMLButtonElement\r\n    buttonRight: HTMLButtonElement;\r\n    homeButton: HTMLButtonElement;\r\n\r\n    vocabulary: WordBundle[] = [];\r\n    wordIndex = 0;\r\n    database: IDBDatabase;\r\n    enterMode = false;\r\n\r\n    keyDownFunction: EventListenerOrEventListenerObject;\r\n    maxCharacters: number;\r\n\r\n    constructor() {\r\n        const request = window.indexedDB.open('Vocabulary', 1);\r\n\r\n        request.addEventListener('error', _ => {\r\n            console.error('There is an error. Have fun fixing it. Details:' + request.error);\r\n        })\r\n\r\n        request.addEventListener('success', _ => {\r\n            this.database = request.result;\r\n\r\n            const transaction = this.database.transaction('vocabulary', 'readonly');\r\n            transaction.onerror = _ => console.error(transaction.error);\r\n            const objectStore = transaction.objectStore('vocabulary');\r\n            const req = objectStore.getAll();\r\n            req.onerror = _ => console.error(req.error);\r\n            req.onsuccess = _ => {\r\n                this.vocabulary = req.result;\r\n                this.wordIndex = this.vocabulary.length;\r\n            }\r\n        })\r\n\r\n        request.addEventListener('upgradeneeded', (event: IDBVersionChangeEvent) => {\r\n            const db = request.result;\r\n            const objectStore = db.createObjectStore(`vocabulary`, { autoIncrement: true });\r\n            objectStore.createIndex(\"latinWord\", \"latinWord\", { unique: false });\r\n            objectStore.createIndex(\"inflections\", \"inflections\", { unique: false });\r\n            objectStore.createIndex(\"germanTranslation\", \"germanTranslation\", { unique: false });\r\n            objectStore.createIndex(\"relatedForeignWords\", \"relatedForeignWords\", { unique: false });\r\n            objectStore.createIndex(\"selected\", \"selected\", { unique: false });\r\n            objectStore.createIndex(\"probability\", \"probability\", { unique: false });\r\n            const objectStore2 = db.createObjectStore(`inflected vocabulary`, { autoIncrement: true });\r\n            objectStore2.createIndex(\"singular\", \"singular\", { unique: false });\r\n            objectStore2.createIndex(\"plural\", \"plural\", { unique: false });\r\n            objectStore2.createIndex(\"verb\", \"verb\", { unique: false });\r\n            objectStore2.createIndex(\"probability\", \"probability\", { unique: false });\r\n            this.database = request.result;\r\n        })\r\n\r\n        const notImportantRequest_____yet = window.indexedDB.open('player data', 1);\r\n\r\n        notImportantRequest_____yet.addEventListener('upgradeneeded', (event) => {\r\n            const db = notImportantRequest_____yet.result;\r\n            if (!db.objectStoreNames.contains('versions played')) {\r\n                db.createObjectStore('versions played', { autoIncrement: true });\r\n            }\r\n\r\n            notImportantRequest_____yet.addEventListener('success', (event) => {\r\n                const db = notImportantRequest_____yet.result;\r\n                const transaction = db.transaction('versions played', 'readwrite');\r\n                const objectStore = transaction.objectStore('versions played');\r\n                objectStore.add('Beta');\r\n    \r\n                transaction.oncomplete = () => {\r\n                    console.log('Data added successfully');\r\n                };\r\n    \r\n                transaction.onerror = (event) => {\r\n                    console.error('Transaction error:', notImportantRequest_____yet.error);\r\n                };\r\n            });\r\n    \r\n            notImportantRequest_____yet.addEventListener('error', (event) => {\r\n                console.error('Database error:', notImportantRequest_____yet.error);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    modifyDocument(): void {\r\n        const request = window.indexedDB.open('Vocabulary', 1);\r\n\r\n        request.addEventListener('error', _ => {\r\n            console.error('There is an error. Have fun fixing it. Details:' + request.error);\r\n        })\r\n\r\n        request.addEventListener('success', _ => {\r\n            this.database = request.result;\r\n\r\n            const transaction = this.database.transaction('vocabulary', 'readonly');\r\n            transaction.onerror = _ => console.error(transaction.error);\r\n            const objectStore = transaction.objectStore('vocabulary');\r\n            const req = objectStore.getAll();\r\n            req.onerror = _ => console.error(req.error);\r\n            req.onsuccess = _ => {\r\n                this.vocabulary = req.result;\r\n                this.wordIndex = this.vocabulary.length;\r\n\r\n\r\n                this.container = document.querySelector('#container');\r\n                this.iconPlaceholder = document.querySelector('#icon-placeholder');\r\n                this.navbar = document.querySelector('#navbar');\r\n\r\n                this.container.style.padding = '0';\r\n                document.body.style.backgroundImage = 'none';\r\n\r\n                document.body.setAttribute('class', '');\r\n                this.container.setAttribute('class', '');\r\n                this.iconPlaceholder.setAttribute('class', '');\r\n                this.navbar.setAttribute('class', '');\r\n\r\n                this.container.innerHTML = '';\r\n                this.iconPlaceholder.innerHTML = '';\r\n                this.navbar.innerHTML = '';\r\n\r\n                document.querySelector('body').classList.add('addVocabularyBody');\r\n\r\n                this.iconPlaceholder.classList.add('addVocabularyIconPlaceholder');\r\n                let addVocabularyIcon = document.createElement('object');\r\n                addVocabularyIcon.data = './add_vocabulary.svg';\r\n                addVocabularyIcon.id = 'addVocabularyIcon';\r\n                this.iconPlaceholder.insertAdjacentElement('beforeend', addVocabularyIcon);\r\n\r\n\r\n                this.container.classList.add('addVocabularyContainer');\r\n\r\n                let classes = 'inp bg inp bg inp bg inp'.split(' ');\r\n                for (let i = 0; i < classes.length; i++) {\r\n                    let div = createDiv(`div${i}`, `${classes[i]}`, `100%`, `${100 / classes.length}%`);\r\n                    this.container.appendChild(div);\r\n                    div.style.padding = `${0.05 * div.offsetHeight}px`;\r\n                }\r\n\r\n                this.navbar.classList.add('addVocabularyNavbar');\r\n\r\n                this.buttonLeft = document.createElement('button');\r\n                this.buttonLeft.classList.add('navButton');\r\n                this.buttonLeft.innerHTML = '<';\r\n                this.navbar.appendChild(this.buttonLeft);\r\n\r\n                this.homeButton = document.createElement('button');\r\n                this.homeButton.classList.add('navButton');\r\n                let icon = document.createElement('object');\r\n                icon.classList.add('homeIcon');\r\n                icon.data = './home.svg';\r\n                icon.style.height = '9vh';\r\n                icon.addEventListener('load', _ => {\r\n                    icon.contentDocument.addEventListener('click', _ => {\r\n                        removeAllEventListeners();\r\n                        home.modifyDocument();\r\n                    })\r\n                })\r\n                this.homeButton.insertAdjacentElement('beforeend', icon);\r\n                this.navbar.appendChild(this.homeButton);\r\n\r\n                this.buttonRight = document.createElement('button');\r\n                this.buttonRight.classList.add('navButton');\r\n                this.buttonRight.innerHTML = '>';\r\n                this.navbar.appendChild(this.buttonRight);\r\n\r\n                this.type();\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    type(): void {\r\n        let inputs = [0, 2, 4, 6];\r\n        let inputIndex = 0;\r\n        let keys = 0;\r\n        let selectedInput: HTMLDivElement;\r\n        let currentWord: WordBundle = {\r\n            latinWord: '',\r\n            inflections: '',\r\n            germanTranslation: '',\r\n            relatedForeignWords: '',\r\n            selected: true,\r\n            probability: 1\r\n        }\r\n\r\n        for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n            this.container.children[i].addEventListener('click', _ => {\r\n                for (let ii = 0; ii < this.container.childElementCount; ii += 2) {\r\n                    if (this.container.children[ii] === this.container.children[i]) {\r\n                        inputIndex = ii / 2;\r\n                        selectedInput = <HTMLDivElement>this.container.children[ii];\r\n                        selectedInput.classList.add('selected');\r\n                        keys = selectedInput.childElementCount;\r\n                    } else {\r\n                        this.container.children[ii].classList.remove('selected');\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        this.container.children[inputs[inputIndex]].classList.add('selected');\r\n        selectedInput = <HTMLDivElement>this.container.children[inputs[inputIndex]];\r\n\r\n        let object = selectedInput.appendChild(createDiv('temporary'));\r\n        let width = selectedInput.offsetHeight - (selectedInput.clientHeight - object.clientHeight) - parseFloat(selectedInput.style.padding);\r\n        this.maxCharacters = Math.floor(window.innerWidth / width);\r\n        object.remove();\r\n\r\n        this.homeButton.addEventListener('click', _ => {\r\n            removeAllEventListeners();\r\n            home.modifyDocument();\r\n        });\r\n\r\n        this.buttonLeft.addEventListener('mousedown', _ => {\r\n            for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                this.container.children[i].classList.add('shadow');\r\n                this.buttonLeft.classList.add('clicked');\r\n            }\r\n        })\r\n\r\n        this.buttonRight.addEventListener('mousedown', _ => {\r\n            for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                this.container.children[i].classList.add('shadow');\r\n                this.buttonRight.classList.add('clicked');\r\n            }\r\n        })\r\n\r\n        this.buttonLeft.addEventListener('mouseout', _ => {\r\n            for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                this.container.children[i].classList.remove('shadow');\r\n                this.buttonLeft.classList.remove('clicked');\r\n            }\r\n        })\r\n\r\n        this.buttonRight.addEventListener('mouseout', _ => {\r\n            for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                this.container.children[i].classList.remove('shadow');\r\n                this.buttonRight.classList.remove('clicked');\r\n            }\r\n        });\r\n\r\n        this.buttonLeft.addEventListener('mouseup', _ => {\r\n            if (this.vocabulary[this.wordIndex - 1]) {\r\n                if (\r\n                    Object.values(currentWord).filter((value) => value === '').length === 4\r\n                    && this.wordIndex === this.vocabulary.length\r\n                ) {\r\n                    for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                        this.container.children[i].classList.remove('shadow');\r\n                    }\r\n\r\n                    this.wordIndex--;\r\n                    currentWord = this.vocabulary[this.wordIndex];\r\n\r\n                    for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                        let value = Object.values(currentWord)[i / 2];\r\n                        this.container.children[i].innerHTML = '';\r\n                        for (let ii = 0; ii < value.length; ii++) {\r\n                            let object = document.createElement('object');\r\n                            object.data = './keys/OG_T.svg';\r\n                            object.id = `key${ii}-inp${i / 2}`;\r\n                            object.style.height = `100%`;\r\n                            this.container.children[i].insertAdjacentElement('beforeend', object);\r\n\r\n                            object.addEventListener('load', _ => {\r\n                                let svg = object.contentDocument;\r\n                                svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\r\n                            })\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.vocabulary[this.wordIndex] = currentWord;\r\n\r\n                    const transaction = this.database.transaction(`vocabulary`, 'readwrite');\r\n                    transaction.onerror = _ => console.error(transaction.error);\r\n                    const objectStore = transaction.objectStore(`vocabulary`);\r\n                    const req = objectStore.get(this.wordIndex);\r\n                    req.onerror = _ => console.error(req.error);\r\n                    req.onsuccess = _ => {\r\n                        for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                            this.container.children[i].classList.remove('shadow');\r\n                        }\r\n\r\n                        const idontcare = objectStore.put(currentWord, this.wordIndex + 1);\r\n                        idontcare.onerror = _ => console.error(idontcare.error);\r\n\r\n                        this.wordIndex--;\r\n\r\n                        currentWord = this.vocabulary[this.wordIndex];\r\n                        for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                            let value = Object.values(currentWord)[i / 2];\r\n                            this.container.children[i].innerHTML = '';\r\n                            for (let ii = 0; ii < value.length; ii++) {\r\n                                let object = document.createElement('object');\r\n                                object.data = './keys/OG_T.svg';\r\n                                object.id = `key${ii}-inp${i / 2}`;\r\n                                object.style.height = `100%`;\r\n                                this.container.children[i].insertAdjacentElement('beforeend', object);\r\n\r\n                                object.addEventListener('load', _ => {\r\n                                    let svg = object.contentDocument;\r\n                                    svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.buttonRight.addEventListener('mouseup', _ => {\r\n            this.buttonRight.classList.remove('clicked');\r\n            if (!this.vocabulary[this.wordIndex + 1]) {\r\n                this.vocabulary[this.wordIndex] = currentWord;\r\n\r\n                const transaction = this.database.transaction(`vocabulary`, 'readwrite');\r\n                transaction.onerror = _ => console.error(transaction.error);\r\n                const objectStore = transaction.objectStore(`vocabulary`);\r\n                const req = objectStore.put(currentWord, this.wordIndex + 1);\r\n                req.onerror = _ => console.error(req.error)\r\n                transaction.oncomplete = _ => {\r\n                    for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                        this.container.children[i].classList.remove('shadow');\r\n                    }\r\n\r\n                    this.wordIndex++;\r\n                    keys = 0;\r\n                    currentWord = {\r\n                        latinWord: '',\r\n                        inflections: '',\r\n                        germanTranslation: '',\r\n                        relatedForeignWords: '',\r\n                        selected: true,\r\n                        probability: 1\r\n                    };\r\n\r\n                    for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                        this.container.children[i].innerHTML = '';\r\n\r\n                        inputIndex = 0;\r\n                        selectedInput = <HTMLDivElement>this.container.children[0];\r\n                        selectedInput.classList.add('selected');\r\n                        if (i != 0) this.container.children[i].classList.remove('selected');\r\n                    }\r\n                }\r\n            } else {\r\n                this.vocabulary[this.wordIndex] = currentWord;\r\n\r\n                for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                    this.container.children[i].classList.remove('shadow');\r\n                }\r\n\r\n                const transaction = this.database.transaction(`vocabulary`, 'readwrite');\r\n                transaction.onerror = _ => console.error(transaction.error);\r\n                const objectStore = transaction.objectStore(`vocabulary`);\r\n                const req = objectStore.get(this.wordIndex);\r\n                req.onerror = _ => console.error(req.error);\r\n                req.onsuccess = _ => {\r\n                    const idontcare = objectStore.put(currentWord, this.wordIndex + 1);\r\n                    idontcare.onerror = _ => console.log(idontcare.error);\r\n\r\n                    this.wordIndex++;\r\n                    currentWord = this.vocabulary[this.wordIndex];\r\n\r\n                    for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                        let value = Object.values(currentWord)[i / 2];\r\n                        this.container.children[i].innerHTML = '';\r\n                        for (let ii = 0; ii < value.length; ii++) {\r\n                            let object = document.createElement('object');\r\n                            object.data = './keys/OG_T.svg';\r\n                            object.id = `key${ii}-inp${i / 2}`;\r\n                            object.style.height = `100%`;\r\n                            this.container.children[i].insertAdjacentElement('beforeend', object);\r\n\r\n                            object.addEventListener('load', _ => {\r\n                                let svg = object.contentDocument;\r\n                                svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        this.keyDownFunction = (event: KeyboardEvent) => {\r\n            let forbiddenCharacters = ['<', '´', '`', '^'];\r\n            if (event.key === 'Backspace') {\r\n                if (selectedInput.lastElementChild) {\r\n                    selectedInput.lastElementChild.remove();\r\n\r\n                    Object.defineProperty(\r\n                        currentWord,\r\n                        Object.keys(currentWord)[inputIndex],\r\n                        { value: Object.values(currentWord)[inputIndex].slice(0, keys - 1) }\r\n                    );\r\n\r\n                    keys--;\r\n                }\r\n                return;\r\n            } else if (event.key === 'Enter' || event.key === 'ArrowDown') {\r\n                if (inputIndex + 1 < 4) {\r\n                    inputIndex++;\r\n                    selectedInput = <HTMLDivElement>this.container.children[inputs[inputIndex]];\r\n                    for (let i = 0; i < this.container.childElementCount; i++) {\r\n                        if (this.container.children[i] != selectedInput) {\r\n                            this.container.children[i].classList.remove('selected');\r\n                        } else {\r\n                            selectedInput.classList.add('selected');\r\n                            keys = selectedInput.childElementCount;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                        this.container.children[i].classList.add('shadow');\r\n                    }\r\n\r\n                    if (this.enterMode) {\r\n                        this.buttonRight.classList.remove('clicked');\r\n                        if (!this.vocabulary[this.wordIndex + 1]) {\r\n                            this.vocabulary[this.wordIndex] = currentWord;\r\n\r\n                            const transaction = this.database.transaction(`vocabulary`, 'readwrite');\r\n                            transaction.onerror = _ => console.error(transaction.error);\r\n                            const objectStore = transaction.objectStore(`vocabulary`);\r\n                            const req = objectStore.put(currentWord, this.wordIndex + 1);\r\n                            req.onerror = _ => console.error(req.error)\r\n                            transaction.oncomplete = _ => {\r\n                                for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                                    this.container.children[i].classList.remove('shadow');\r\n                                }\r\n\r\n                                this.wordIndex++;\r\n                                keys = 0;\r\n                                currentWord = {\r\n                                    latinWord: '',\r\n                                    inflections: '',\r\n                                    germanTranslation: '',\r\n                                    relatedForeignWords: '',\r\n                                    selected: true,\r\n                                    probability: 1\r\n                                };\r\n\r\n                                for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                                    this.container.children[i].innerHTML = '';\r\n\r\n                                    inputIndex = 0;\r\n                                    selectedInput = <HTMLDivElement>this.container.children[0];\r\n                                    selectedInput.classList.add('selected');\r\n                                    if (i != 0) this.container.children[i].classList.remove('selected');\r\n                                }\r\n                            }\r\n                        } else {\r\n                            this.vocabulary[this.wordIndex] = currentWord;\r\n\r\n                            for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                                this.container.children[i].classList.remove('shadow');\r\n                            }\r\n\r\n                            const transaction = this.database.transaction(`vocabulary`, 'readwrite');\r\n                            transaction.onerror = _ => console.error(transaction.error);\r\n                            const objectStore = transaction.objectStore(`vocabulary`);\r\n                            const req = objectStore.get(this.wordIndex);\r\n                            req.onerror = _ => console.error(req.error);\r\n                            req.onsuccess = _ => {\r\n                                const idontcare = objectStore.put(currentWord, this.wordIndex + 1);\r\n                                idontcare.onerror = _ => console.log(idontcare.error);\r\n\r\n                                this.wordIndex++;\r\n                                currentWord = this.vocabulary[this.wordIndex];\r\n\r\n                                for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                                    let value = Object.values(currentWord)[i / 2];\r\n                                    this.container.children[i].innerHTML = '';\r\n                                    for (let ii = 0; ii < value.length; ii++) {\r\n                                        let object = document.createElement('object');\r\n                                        object.data = './keys/OG_T.svg';\r\n                                        object.id = `key${ii}-inp${i / 2}`;\r\n                                        object.style.height = `100%`;\r\n                                        this.container.children[i].insertAdjacentElement('beforeend', object);\r\n\r\n                                        object.addEventListener('load', _ => {\r\n                                            let svg = object.contentDocument;\r\n                                            svg.querySelector('#tspan7').innerHTML = value.charAt(ii);\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        this.enterMode = false;\r\n                    } else {\r\n                        this.enterMode = true;\r\n                    }\r\n\r\n                    const transaction = this.database.transaction(`vocabulary`, 'readwrite');\r\n                    transaction.onerror = _ => console.error(transaction.error);\r\n                    const objectStore = transaction.objectStore(`vocabulary`);\r\n                    const req = objectStore.put(currentWord, this.wordIndex + 1);\r\n                    req.onerror = _ => console.error(req.error);\r\n\r\n                    setTimeout(_ => {\r\n                        for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n                            this.container.children[i].classList.remove('shadow');\r\n                        }\r\n                    }, 250);\r\n                }\r\n\r\n                return;\r\n            } else if (event.key === 'ArrowUp') {\r\n                if (inputIndex > 0) inputIndex--;\r\n                selectedInput = <HTMLDivElement>this.container.children[inputs[inputIndex]];\r\n                for (let i = 0; i < this.container.childElementCount; i++) {\r\n                    if (this.container.children[i] != selectedInput) {\r\n                        this.container.children[i].classList.remove('selected');\r\n                    } else {\r\n                        selectedInput.classList.add('selected');\r\n                        keys = selectedInput.childElementCount;\r\n                    }\r\n                }\r\n                return;\r\n            } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) {\r\n                return;\r\n            }\r\n\r\n            let object = document.createElement('object');\r\n            object.data = './keys/OG_T.svg';\r\n            object.id = `key${keys}-inp${inputIndex}`;\r\n            object.style.height = `100%`;\r\n            selectedInput.insertAdjacentElement('beforeend', object);\r\n            let width = object.clientHeight;\r\n            object.hidden = true;\r\n\r\n            object.addEventListener('load', _ => {\r\n                if (keys >= Math.floor(window.innerWidth / width)) {\r\n                    object.remove();\r\n                    for (let i = 0; i < keys; i++) {\r\n                        this.failureAnimation(<HTMLObjectElement>selectedInput.children[i]);\r\n                    }\r\n                    return;\r\n                }\r\n                object.hidden = false;\r\n\r\n                let svg = object.contentDocument;\r\n                svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\r\n\r\n                Object.defineProperty(\r\n                    currentWord,\r\n                    Object.keys(currentWord)[inputIndex],\r\n                    { value: Object.values(currentWord)[inputIndex] + event.key.charAt(0) }\r\n                );\r\n\r\n                keys++;\r\n\r\n                this.idleAnimation(object);\r\n            });\r\n        }\r\n\r\n        document.addEventListener('keydown', this.keyDownFunction);\r\n\r\n    }\r\n\r\n    failureAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: Keyframe[] = [\r\n            { stroke: \"rgb(186, 2, 70)\", offset: 0.025 },\r\n\r\n            { rotate: \"10deg z\", offset: 0.25 },\r\n\r\n            { rotate: \"0deg z\", offset: 0.5 },\r\n\r\n            { rotate: \"-10deg z\", offset: 0.75, stroke: \"rgb(186, 2, 70)\" },\r\n\r\n            { stroke: \"#eeeeeeff\", offset: 0.925 },\r\n\r\n            { rotate: \"0deg z\", offset: 1 }\r\n        ];\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 500\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    idleAnimation(object: HTMLObjectElement): void {\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#8f8f8f', '#fff', '#eeeeeeff'],\r\n            offset: [0, 1]\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 250\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n}\r\n\r\nexport interface WordBundle {\r\n    latinWord: string;\r\n    inflections: string;\r\n    germanTranslation: string;\r\n    relatedForeignWords: string;\r\n    selected: boolean;\r\n    probability: number;\r\n}","import { addVocabulary, removeAllEventListeners, showVocabulary, inflectVocabulary, training } from \"..\";\r\n\r\nexport class HomeMenu {\r\n    input: HTMLDivElement;\r\n    iconPlaceholder: HTMLDivElement;\r\n    navbar: HTMLDivElement;\r\n\r\n    command = '';\r\n    keyDownFunction: EventListenerOrEventListenerObject;\r\n    resizeFunction: EventListenerOrEventListenerObject;\r\n\r\n    constructor() {\r\n        this.modifyDocument();\r\n    }\r\n\r\n    modifyDocument(): void {\r\n        this.resizeFunction = () => this.movementAnimation();\r\n        window.addEventListener('resize', this.resizeFunction);\r\n        this.input = document.querySelector('#container');\r\n        this.iconPlaceholder = document.querySelector('#icon-placeholder');\r\n        this.navbar = document.querySelector('#navbar');\r\n\r\n        if (document.querySelector('.homeDiv')) {\r\n            let homeDiv = document.querySelector('.homeDiv');\r\n            homeDiv.remove();\r\n        }\r\n\r\n        document.body.style.backgroundImage = 'none';\r\n        document.body.style.backgroundImage = 'linear-gradient(180deg, #140063 0%, #06011b 65%, #06011b 77%, #140063 100%)';\r\n        document.body.setAttribute('class', '');\r\n        this.input.setAttribute('class', '');\r\n        this.iconPlaceholder.setAttribute('class', '');\r\n        this.navbar.setAttribute('class', '');\r\n        this.input.innerHTML = '';\r\n        this.iconPlaceholder.innerHTML = '';\r\n        this.navbar.innerHTML = '';\r\n\r\n        let icon = document.createElement('object');\r\n        icon.data = './icon.svg';\r\n        icon.id = 'icon';\r\n        this.iconPlaceholder.insertAdjacentElement('beforeend', icon);\r\n        console.log('servas');\r\n        let version = document.createElement('object');\r\n        version.data = './version.svg';\r\n        version.id = 'version';\r\n        this.iconPlaceholder.insertAdjacentElement('beforeend', version);\r\n\r\n        document.body.classList.add('homeBody');\r\n        this.input.classList.add('homeInput');\r\n        this.iconPlaceholder.classList.add('homeIconPlaceholder');\r\n        this.navbar.classList.add('homeNavbar');\r\n\r\n        this.type();\r\n    }\r\n\r\n    type(): void {\r\n        let keys = 0;\r\n        this.keyDownFunction = (event: KeyboardEvent) => {\r\n            let forbiddenCharacters = ['<', '´', '`', '^'];\r\n            if (event.key === 'Backspace' && this.input.lastElementChild) {\r\n                this.input.lastElementChild.remove();\r\n                this.movementAnimation();\r\n                this.command = this.command.slice(0, this.command.length - 1);\r\n                keys--;\r\n                return;\r\n            } else if (event.key === 'Enter') {\r\n                switch (this.command) {\r\n                    case 'add vocabulary':\r\n                    case 'add':\r\n                    case 'add vocabulary':\r\n                    case 'neu':\r\n                    case 'hinzufügen':\r\n                    case 'neues wort':\r\n                    case 'neues Wort':\r\n                    case 'Vokabeln hinzufügen':\r\n                        removeAllEventListeners();\r\n                        addVocabulary.modifyDocument();\r\n                        break;\r\n                    case 'show vocabulary':\r\n                    case 'show':\r\n                    case 'tabelle':\r\n                    case 'Tabelle':\r\n                    case 'Vokabeln anzeigen':\r\n                        removeAllEventListeners();\r\n                        showVocabulary.modifyDocument();\r\n                        break;\r\n                    case 'training':\r\n                    case 'Training':\r\n                    case 'trainer':\r\n                    case 'Training':\r\n                    case 'üben':\r\n                    case 'Üben':\r\n                    case 'vocabuary training':\r\n                        removeAllEventListeners();\r\n                        training.modifyDocument();\r\n                        break;\r\n                    case 'declinations':\r\n                    case 'deklinationen':\r\n                    case 'Deklinationen':\r\n                    case 'conj':\r\n                    case 'add declinations':\r\n                        removeAllEventListeners();\r\n                        inflectVocabulary.modifyDocument('add nouns');\r\n                        break;\r\n                    case 'deklinieren':\r\n                    case 'deklinationstraining':\r\n                    case 'Deklinationstraining':\r\n                    case 'decline nouns':\r\n                    case 'decline':\r\n                    case 'ct':\r\n                        removeAllEventListeners();\r\n                        inflectVocabulary.modifyDocument('nouns');\r\n                        break;\r\n                    case 'v':\r\n                    case 'conjugations':\r\n                    case 'konjugationen':\r\n                    case 'Konjugationen':\r\n                        removeAllEventListeners();\r\n                        inflectVocabulary.modifyDocument('add verbs');\r\n                        break;\r\n                    case 'conjugate':\r\n                    case 'konjugieren':\r\n                    case 'konjugationstraining':\r\n                    case 'Konjugationstraining':\r\n                    case 'vt':\r\n                        removeAllEventListeners();\r\n                        inflectVocabulary.modifyDocument('verbs');\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.command = '';\r\n                keys = 0;\r\n                this.input.innerHTML = '';\r\n                return;\r\n            } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) {\r\n                return;\r\n            }\r\n\r\n            let object = document.createElement('object');\r\n            object.data = './Latein-Trainer/keys/OG_T.svg';\r\n            object.id = `key${keys}`;\r\n            object.style.height = `100%`;\r\n            this.input.insertAdjacentElement('beforeend', object);\r\n            let width = object.clientHeight;\r\n            object.hidden = true;\r\n\r\n            object.addEventListener('load', _ => {\r\n                if (keys >= Math.floor(window.innerWidth / width)) {\r\n                    object.remove();\r\n                    for (let i = 0; i < keys; i++) {\r\n                        this.failureAnimation(<HTMLObjectElement>this.input.children[i]);\r\n                    }\r\n                    return;\r\n                }\r\n                object.hidden = false;\r\n\r\n                let svg = object.contentDocument;\r\n                svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\r\n\r\n                this.command += event.key;\r\n\r\n                keys++;\r\n\r\n                this.idleAnimation(object);\r\n                this.movementAnimation();\r\n            });\r\n        }\r\n\r\n        document.addEventListener('keydown', this.keyDownFunction);\r\n    }\r\n\r\n    idleAnimation(object: HTMLObjectElement): void {\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#8f8f8f', '#fff', '#eeeeeeff'],\r\n            offset: [0, 1]\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 250\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    failureAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: Keyframe[] = [\r\n            { stroke: \"rgb(186, 2, 70)\", offset: 0.025 },\r\n\r\n            { rotate: \"10deg z\", offset: 0.25 },\r\n\r\n            { rotate: \"0deg z\", offset: 0.5 },\r\n\r\n            { rotate: \"-10deg z\", offset: 0.75, stroke: \"rgb(186, 2, 70)\" },\r\n\r\n            { stroke: \"#eeeeeeff\", offset: 0.925 },\r\n\r\n            { rotate: \"0deg z\", offset: 1 }\r\n        ];\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 500\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    movementAnimation(): void {\r\n        if (!this.input) {\r\n            return;\r\n        }\r\n\r\n        let object = <HTMLObjectElement>this.input.firstChild;\r\n        let inp = this.input;\r\n        if (object) {\r\n            if (inp.childElementCount > 1) {\r\n                inp.style.transition = 'padding 250ms';\r\n            }\r\n            inp.style.paddingLeft = `${(window.innerWidth - inp.childElementCount * object.clientHeight) / 2}px`;\r\n        }\r\n    }\r\n}\r\n\r\n","import { addVocabulary, createDiv, home, removeAllEventListeners } from \"..\";\r\nimport { AddVocabulary, WordBundle } from \"./add-vocabulary\";\r\n\r\nexport class ShowVocabulary {\r\n    container: HTMLDivElement;\r\n    iconPlaceholder: HTMLDivElement;\r\n    navbar: HTMLDivElement;\r\n\r\n    vocabulary: WordBundle[];\r\n    database: IDBDatabase;\r\n\r\n    constructor() { }\r\n\r\n    modifyDocument(): void {\r\n        const request = window.indexedDB.open('Vocabulary', 1);\r\n\r\n        request.addEventListener('error', _ => {\r\n            this.vocabulary = [];\r\n            this.modifyDocument();\r\n            console.error(request.error);\r\n        });\r\n\r\n        request.addEventListener('success', _ => {\r\n            this.database = request.result;\r\n\r\n            const transaction = this.database.transaction('vocabulary', 'readonly');\r\n            transaction.onerror = _ => console.error(transaction.error);\r\n            const objectStore = transaction.objectStore('vocabulary');\r\n            const req = objectStore.getAll();\r\n            req.onerror = _ => console.error(req.error);\r\n            req.onsuccess = _ => {\r\n                this.vocabulary = req.result;\r\n                this.container = document.querySelector('#container');\r\n                this.iconPlaceholder = document.querySelector('#icon-placeholder');\r\n                this.navbar = document.querySelector('#navbar');\r\n\r\n                this.container.style.padding = '0';\r\n                document.body.style.backgroundImage = 'none';\r\n\r\n                document.body.setAttribute('class', '');\r\n                this.container.setAttribute('class', '');\r\n                this.iconPlaceholder.setAttribute('class', '');\r\n                this.navbar.setAttribute('class', '');\r\n\r\n                this.container.innerHTML = '';\r\n                this.iconPlaceholder.innerHTML = '';\r\n                this.navbar.innerHTML = '';\r\n\r\n                let showVocabularyIcon = document.createElement('object'); \r\n                showVocabularyIcon.data = './show_vocabulary.svg';\r\n                showVocabularyIcon.id = 'showVocabularyIcon';\r\n                this.iconPlaceholder.insertAdjacentElement('beforeend', showVocabularyIcon);\r\n\r\n                for (let i = 0, str = 'HOME MENU'; i < str.length; i++) {\r\n                    let span = document.createElement('span');\r\n                    span.innerText = str[i];\r\n                    this.navbar.insertAdjacentElement('beforeend', span);\r\n                }\r\n\r\n                let navbarClickFunction = _ => {\r\n                    removeAllEventListeners();\r\n                    this.navbar.removeEventListener('click', navbarClickFunction);\r\n                    home.modifyDocument();\r\n                }\r\n                this.navbar.addEventListener('click', navbarClickFunction);\r\n\r\n\r\n                document.body.classList.add('showVocabularyBody');\r\n                this.container.classList.add('showVocabularyContainer');\r\n                this.iconPlaceholder.classList.add('showVocabularyIconPlaceholder');\r\n                this.navbar.classList.add('showVocabularyNavbar');\r\n\r\n                let str = '';\r\n                this.vocabulary.forEach((word, i) => {\r\n                    str += 'auto ';\r\n\r\n                    let Cdiv = createDiv(`checkboxDiv${i}`, 'word');\r\n                    let div1 = createDiv(`latinWord${i}`, 'word');\r\n                    let div2 = createDiv(`inflections${i}`, 'word');\r\n                    let div3 = createDiv(`germanTranslation${i}`, 'word');\r\n                    let div4 = createDiv(`relatedForeignWords${i}`, 'word');\r\n\r\n                    Cdiv.classList.add('cdiv');\r\n\r\n                    Cdiv.innerHTML = `<input type=\"checkbox\" id=\"C${i}\" class=\"checkbox\" ${(word.selected) ? \"checked\" : ''}></input>`;\r\n                    div1.innerHTML = `<input type=\"text\" id=\"0-${i}\" class=\"edit\" value=\"${(word.latinWord === '') ? ' ' : word.latinWord}\" maxlength=\"${(word.latinWord.length > addVocabulary.maxCharacters) ? word.latinWord.length : addVocabulary.maxCharacters}\"></input>`;\r\n                    div2.innerHTML = `<input type=\"text\" id=\"1-${i}\" class=\"edit\" value=\"${(word.inflections === '') ? ' ' : word.inflections}\" maxlength=\"${(word.inflections.length > addVocabulary.maxCharacters) ? word.inflections.length : addVocabulary.maxCharacters}\"></input>`;\r\n                    div3.innerHTML = `<input type=\"text\" id=\"2-${i}\" class=\"edit\" value=\"${(word.germanTranslation === '') ? ' ' : word.germanTranslation}\" maxlength=\"${(word.germanTranslation.length > addVocabulary.maxCharacters) ? word.germanTranslation.length : addVocabulary.maxCharacters}\"></input>`;\r\n                    div4.innerHTML = `<input type=\"text\" id=\"3-${i}\" class=\"edit\" value=\"${(word.relatedForeignWords === '') ? ' ' : word.relatedForeignWords}\" maxlength=\"${(word.relatedForeignWords.length > addVocabulary.maxCharacters) ? word.relatedForeignWords.length : addVocabulary.maxCharacters}\"></input>`;\r\n\r\n                    this.container.append(Cdiv, div1, div2, div3, div4);\r\n                });\r\n                this.container.style.gridTemplateRows = str;\r\n\r\n                let inputList = document.getElementsByClassName('edit');\r\n                for (let i = 0; i < inputList.length; i++) {\r\n                    let input: HTMLInputElement = <HTMLInputElement>inputList.item(i);\r\n                    input.size = input.maxLength;\r\n\r\n                    input.onblur = _ => {\r\n                        const transaction = this.database.transaction('vocabulary', 'readwrite');\r\n                        transaction.onerror = _ => console.error(transaction.error);\r\n                        const objectStore = transaction.objectStore('vocabulary');\r\n                        const request = objectStore.get(parseInt(input.id.split('-')[1]) + 1);\r\n                        request.onerror = _ => console.error(request.error);\r\n                        request.onsuccess = _ => {\r\n                            const data = request.result;\r\n\r\n                            Object.defineProperty(\r\n                                data,\r\n                                Object.keys(data)[parseInt(input.id.split('-')[0])],\r\n                                { value: input.value.trim() }\r\n                            );\r\n\r\n                            const req = objectStore.put(data, parseInt(input.id.split('-')[1]) + 1);\r\n                            req.onerror = _ => console.error(req.error);\r\n                        }\r\n                    }\r\n\r\n                    input.onkeydown = (event: KeyboardEvent) => {\r\n                        if (event.key === 'Enter') {\r\n                            input.blur();\r\n                        }\r\n                    }\r\n\r\n                    input.onkeyup = _ => {\r\n                        if (input.value.includes('^')) {\r\n                            let str = '';\r\n                            input.value.split('').forEach(letter => {\r\n                                if (letter != '^') {\r\n                                    str += letter;\r\n                                }\r\n                            })\r\n                            input.value = str;\r\n                        }\r\n                    }   \r\n                }\r\n\r\n                let checkboxList = document.getElementsByClassName('checkbox');\r\n                for (let i = 0; i < checkboxList.length; i++) {\r\n                    let input: HTMLInputElement = <HTMLInputElement>checkboxList.item(i);\r\n                    input.addEventListener('change', _ => {\r\n                        const transaction = this.database.transaction('vocabulary', 'readwrite');\r\n                        transaction.onerror = _ => console.error(transaction.error);\r\n                        const objectStore = transaction.objectStore('vocabulary');\r\n                        const request = objectStore.get(parseInt(input.id.slice(1)) + 1);\r\n                        request.onerror = _ => console.error(request.error);\r\n                        request.onsuccess = _ => {\r\n                            const data = request.result;\r\n\r\n                            Object.defineProperty(\r\n                                data,\r\n                                'selected',\r\n                                { value: input.checked }\r\n                            );\r\n\r\n                            const req = objectStore.put(data, parseInt(input.id.slice(1)) + 1);\r\n                            req.onerror = _ => console.error(req.error);\r\n\r\n                            this.vocabulary[i].selected = this.vocabulary[i].selected ? false : true;\r\n                        }\r\n                    })\r\n                }\r\n\r\n                let checkboxDivList = document.getElementsByClassName('cdiv');\r\n                for (let i = 0; i < checkboxDivList.length; i++) {\r\n                    let element = <HTMLDivElement>checkboxDivList[i];\r\n                    let mouseover = false;\r\n                    let saved;\r\n                    let clickFunction = (event: MouseEvent) => {\r\n                        let cdiv = <HTMLDivElement>event.target;\r\n                        let index = parseInt(cdiv.id.slice(11));\r\n                        this.deleteWord(index);\r\n                    }\r\n\r\n                    let indicator;\r\n                    element.addEventListener('mousemove', (event) => {\r\n                        if (event.target === element.querySelector('input')) {\r\n                            mouseover = false;\r\n                            element.classList.remove('mouseon');\r\n                            clearTimeout(indicator);\r\n                            element.removeEventListener('click', clickFunction);\r\n                            document.querySelectorAll('.danger').forEach(e => e.classList.remove('danger'));\r\n                        } else if (!mouseover) {\r\n                            mouseover = true;\r\n                            saved = element.innerHTML;\r\n                            element.classList.add('mouseon');\r\n                            indicator = setTimeout(_ => {\r\n                                if (mouseover) {\r\n                                    element.innerHTML = '<span>X</span>';\r\n                                    element.addEventListener('click', clickFunction);\r\n                                    document.querySelector(`#latinWord${i}`).classList.add('danger');\r\n                                    document.querySelector(`#inflections${i}`).classList.add('danger');\r\n                                    document.querySelector(`#germanTranslation${i}`).classList.add('danger');\r\n                                    document.querySelector(`#relatedForeignWords${i}`).classList.add('danger');\r\n                                }\r\n                            }, 1500)\r\n                        }\r\n                    });\r\n\r\n                    element.addEventListener('mouseleave', _ => {\r\n                        mouseover = false;\r\n                        element.classList.remove('mouseon');\r\n                        clearTimeout(indicator);\r\n                        document.querySelectorAll('.danger').forEach(e => e.classList.remove('danger'));\r\n                        if (saved && !element.querySelector('input')) {\r\n                            element.innerHTML = saved;\r\n                            let input = element.querySelector('input');\r\n                            input.checked = this.vocabulary[i].selected;\r\n                            input.addEventListener('change', _ => {\r\n                                const transaction = this.database.transaction('vocabulary', 'readwrite');\r\n                                transaction.onerror = _ => console.error(transaction.error);\r\n                                const objectStore = transaction.objectStore('vocabulary');\r\n                                const request = objectStore.get(parseInt(input.id[input.id.length - 1]) + 1);\r\n                                request.onerror = _ => console.error(request.error);\r\n                                request.onsuccess = _ => {\r\n                                    const data = request.result;\r\n\r\n                                    Object.defineProperty(\r\n                                        data,\r\n                                        'selected',\r\n                                        { value: input.checked }\r\n                                    );\r\n\r\n                                    const req = objectStore.put(data, parseInt(input.id[input.id.length - 1]) + 1);\r\n                                    req.onerror = _ => console.error(req.error);\r\n                                    this.vocabulary[i].selected = input.checked;\r\n                                }\r\n                            })\r\n                        }\r\n                        element.removeEventListener('click', clickFunction);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    deleteWord(key: number): void {\r\n        this.vocabulary.splice(key, 1)\r\n        const transaction = this.database.transaction('vocabulary', 'readwrite');\r\n        const objectStore = transaction.objectStore('vocabulary');\r\n        const request = objectStore.openCursor();\r\n        request.onsuccess = _ => {\r\n            let cursor = request.result;\r\n            if (cursor) {\r\n                let k = <number>cursor.key;\r\n                let word = this.vocabulary[k - 1];\r\n                if (word) {\r\n                    const updatedData = cursor.value;\r\n                    updatedData.latinWord = word.latinWord;\r\n                    updatedData.inflections = word.inflections;\r\n                    updatedData.germanTranslation = word.germanTranslation;\r\n                    updatedData.relatedForeignWords = word.relatedForeignWords;\r\n                    updatedData.selected = word.selected;\r\n                    updatedData.probability = word.probability;\r\n                    cursor.update(updatedData);\r\n                    cursor.continue();\r\n                } else {\r\n                    cursor.delete();\r\n                    removeAllEventListeners();\r\n                    this.modifyDocument();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { addVocabulary, createDiv, home, removeAllEventListeners, training } from \"..\";\r\nimport { WordBundle } from \"./add-vocabulary\";\r\n\r\nexport class VocabularyTraining {\r\n    container: HTMLDivElement;\r\n    iconPlaceholder: HTMLDivElement;\r\n    navbar: HTMLDivElement;\r\n\r\n    vocabulary: WordBundle[];\r\n    database: IDBDatabase;\r\n\r\n    keyDownFunction: EventListenerOrEventListenerObject;\r\n    mouseOverFunction: EventListenerOrEventListenerObject;\r\n    resizeFunction: EventListenerOrEventListenerObject;\r\n\r\n    currentWord: WordBundle;\r\n    currentWordIndex: number;\r\n\r\n    totalAttempts = 0;\r\n    totalPoints = 0;\r\n    result: [boolean, boolean, boolean, boolean];\r\n\r\n    commandMode = false;\r\n    command = '';\r\n\r\n    selectedInput: HTMLDivElement;\r\n    inputIndex = 0;\r\n\r\n    time = 0;\r\n    round = 0;\r\n    backgroundColor = '#140063';\r\n\r\n    constructor() {\r\n        setInterval(_ => this.time += 1, 1);\r\n\r\n        this.resizeFunction = _ => {\r\n            let inputs = document.querySelectorAll('.inp');\r\n            inputs.forEach((inp: HTMLDivElement) => {\r\n                if (inp.firstChild && !inp.classList.contains('not-editable')) this.movementAnimation();\r\n            });\r\n        };\r\n    }\r\n\r\n    modifyDocument(): void {\r\n        window.addEventListener('resize', this.resizeFunction);\r\n\r\n        const request = window.indexedDB.open('Vocabulary', 1);\r\n\r\n        request.addEventListener('error', _ => {\r\n            this.vocabulary = [];\r\n            this.modifyDocument();\r\n            console.error(request.error);\r\n        });\r\n\r\n        request.addEventListener('success', _ => {\r\n            this.database = request.result;\r\n\r\n            const transaction = this.database.transaction('vocabulary', 'readonly');\r\n            transaction.onerror = _ => console.error(transaction.error);\r\n            const objectStore = transaction.objectStore('vocabulary');\r\n            const req = objectStore.getAll();\r\n            req.onerror = _ => console.error(req.error);\r\n            req.onsuccess = _ => {\r\n                this.vocabulary = req.result;\r\n                this.backgroundColor = '#140063'\r\n                this.container = document.querySelector('#container');\r\n                this.iconPlaceholder = document.querySelector('#icon-placeholder');\r\n                this.navbar = document.querySelector('#navbar');\r\n\r\n                this.container.style.padding = '0';\r\n                document.body.style.backgroundImage = 'none';\r\n\r\n                document.body.setAttribute('class', '');\r\n                this.container.setAttribute('class', '');\r\n                this.iconPlaceholder.setAttribute('class', '');\r\n                this.navbar.setAttribute('class', '');\r\n\r\n                this.container.innerHTML = '';\r\n                this.iconPlaceholder.innerHTML = '';\r\n                this.navbar.innerHTML = '';\r\n\r\n                let trainingIcon = document.createElement('object');\r\n                trainingIcon.data = './training.svg';\r\n                trainingIcon.id = 'trainingIcon';\r\n                this.iconPlaceholder.insertAdjacentElement('beforeend', trainingIcon);\r\n\r\n                document.body.classList.add(\"trainingBody\");\r\n                this.container.classList.add(\"trainingContainer\");\r\n                this.iconPlaceholder.classList.add(\"trainingIconPlaceholder\");\r\n                this.navbar.classList.add(\"trainingNavbar\");\r\n\r\n                let classes = 'inp bg inp bg inp bg inp'.split(' ');\r\n                for (let i = 0; i < classes.length; i++) {\r\n                    let div = createDiv(`div${i}`, `${classes[i]}`, `100%`, `${100 / classes.length}%`);\r\n                    div.classList.add('t');\r\n                    this.container.appendChild(div);\r\n                    div.style.padding = `${0.05 * div.offsetHeight}px`;\r\n                }\r\n\r\n                let height: number;\r\n                this.mouseOverFunction = (event: MouseEvent) => {\r\n                    let homeDiv = <HTMLDivElement>document.querySelector('.homeDiv');\r\n                    if (\r\n                        homeDiv &&\r\n                        homeDiv != event.target &&\r\n                        event.target != this.navbar &&\r\n                        !(\r\n                            document.querySelector('.homeButton') &&\r\n                            event.target === document.querySelector('.homeButton')\r\n                        ) &&\r\n                        event.target != document.querySelector('.homeIcon')\r\n                    ) {\r\n                        homeDiv.classList.remove('moveUp');\r\n                        setTimeout(_ => homeDiv.classList.add('moveDown'), 0);\r\n                    } else if (!(\r\n                        event.target != this.navbar &&\r\n                        !(\r\n                            document.querySelector('.homeButton') &&\r\n                            event.target === document.querySelector('.homeButton')\r\n                        ) &&\r\n                        event.target != document.querySelector('.homeIcon')\r\n                    )) {\r\n                        if (!homeDiv.classList.contains('moveUp')) {\r\n                            homeDiv.classList.remove('moveDown');\r\n                            homeDiv.classList.add('moveUp');\r\n                        }\r\n                    }\r\n                    if (!homeDiv) {\r\n                        let hd = document.createElement('div');\r\n                        hd.setAttribute('class', 'homeDiv');\r\n                        this.navbar.insertAdjacentElement('afterend', hd);\r\n\r\n                        let button = document.createElement('div');\r\n                        button.classList.add('homeButton');\r\n\r\n                        let icon = document.createElement('object');\r\n                        icon.classList.add('homeIcon');\r\n                        icon.data = './home.svg';\r\n                        icon.style.height = '6vh';\r\n\r\n                        hd.insertAdjacentElement('beforeend', button);\r\n                        button.insertAdjacentElement('beforeend', icon);\r\n\r\n                        let clickFunction = _ => {\r\n                            removeAllEventListeners();\r\n                            home.modifyDocument();\r\n                            return;\r\n                        }\r\n\r\n                        button.addEventListener('click', clickFunction);\r\n                        icon.addEventListener('load', _ => {\r\n                            icon.contentDocument.addEventListener('click', clickFunction);\r\n                        })\r\n                    }\r\n                }\r\n                document.addEventListener('mouseover', this.mouseOverFunction);\r\n\r\n                this.type();\r\n            }\r\n        });\r\n    }\r\n\r\n    type(): void {\r\n        let inputs = [0, 2, 4, 6];\r\n        let keys = 0;\r\n\r\n        for (let i = 0; i < this.container.childElementCount; i += 2) {\r\n            this.container.children[i].addEventListener('click', _ => {\r\n                this.inputIndex = i / 2;\r\n                this.selectedInput = <HTMLDivElement>this.container.children[i];\r\n                this.inputStyling();\r\n                keys = this.selectedInput.childElementCount;\r\n            });\r\n        };\r\n\r\n        for (let i = 1; i < this.container.childElementCount; i += 2) {\r\n            this.container.children[i].addEventListener('click', (event: MouseEvent) => {\r\n                if (event.offsetY > this.container.children[i].clientHeight / 2) {\r\n                    this.inputIndex = (i + 1) / 2;\r\n                    this.selectedInput = <HTMLDivElement>this.container.children[i + 1];\r\n                    this.inputStyling();\r\n                    keys = this.selectedInput.childElementCount;\r\n                } else {\r\n                    this.inputIndex = (i - 1) / 2;\r\n                    this.selectedInput = <HTMLDivElement>this.container.children[i - 1];\r\n                    this.inputStyling();\r\n                    keys = this.selectedInput.childElementCount;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n        this.inputStyling();\r\n\r\n        this.keyDownFunction = (event: KeyboardEvent) => {\r\n            let mode = this.commandMode;\r\n            let forbiddenCharacters = ['<', '´', '`', '^'];\r\n\r\n            if (this.commandMode) {\r\n                if (event.key === 'Enter') {\r\n                    switch (this.command) {\r\n                        case '#hint':\r\n                        case '#t':\r\n                        case '#tip':\r\n                        case '#tipp':\r\n                        case '#Tipp':\r\n                            this.command.split('').forEach(_ => {\r\n                                this.returnLastElement(this.selectedInput).remove();\r\n                                keys--;\r\n                                if (this.selectedInput.firstChild) {\r\n                                    this.movementAnimation();\r\n                                }\r\n                            });\r\n\r\n                            let object = document.createElement('object');\r\n                            object.data = './keys/OG_T.svg';\r\n                            object.id = `key${keys}-inp${this.inputIndex}`;\r\n                            object.style.height = `100%`;\r\n                            let width = object.clientHeight;\r\n\r\n                            let index = 0;\r\n                            let word = <string>Object.values(this.currentWord)[this.inputIndex];\r\n                            let str = '';\r\n                            let maxLength: number;\r\n                            let changeMade = false;\r\n                            for (let i = 0; i < word.length; i++) {\r\n\r\n                                if (word[i] != Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex][i] && !changeMade) {\r\n                                    index = i;\r\n                                    if (this.vocabulary[this.currentWordIndex][Object.keys(this.vocabulary[this.currentWordIndex])[this.inputIndex]][index]) {\r\n                                        str += this.vocabulary[this.currentWordIndex][Object.keys(this.vocabulary[this.currentWordIndex])[this.inputIndex]][index];\r\n                                    } else {\r\n                                        maxLength = word.length - 1;\r\n                                    }\r\n\r\n                                    changeMade = true;\r\n                                } else {\r\n                                    str += word[i];\r\n                                }\r\n                            }\r\n\r\n                            this.currentWord[Object.keys(this.currentWord)[this.inputIndex]] = (maxLength) ? str.slice(0, maxLength) : str;\r\n                            word = (maxLength) ? str.slice(0, maxLength) : str;\r\n\r\n                            if (maxLength) {\r\n                                this.returnLastElement(this.selectedInput).remove();\r\n                                this.movementAnimation();\r\n                                keys--;\r\n                                mode = false;\r\n                                this.commandMode = false;\r\n                                break;\r\n                            }\r\n\r\n                            if (!changeMade) {\r\n                                index = word.length;\r\n                                if (word.length < Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex].length) {\r\n                                    this.currentWord[Object.keys(this.currentWord)[this.inputIndex]] +=\r\n                                        Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex][index];\r\n                                } else {\r\n                                    mode = false;\r\n                                    this.commandMode = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (word.length > 0 && index < word.length) {\r\n                                this.selectedInput.children[index].replaceWith(object);\r\n                                keys--;\r\n                                object.hidden = true;\r\n                            } else {\r\n                                this.selectedInput.insertAdjacentElement('beforeend', object);\r\n                                object.hidden = true;\r\n                            }\r\n\r\n                            object.addEventListener('load', _ => {\r\n                                if (keys >= Math.floor(window.innerWidth / width)) {\r\n                                    object.remove();\r\n                                    for (let i = 0; i < keys; i++) {\r\n                                        addVocabulary.failureAnimation(<HTMLObjectElement>this.selectedInput.children[i]);\r\n                                    }\r\n                                    return;\r\n                                }\r\n                                object.hidden = false;\r\n                                keys++;\r\n\r\n                                let svg = object.contentDocument;\r\n                                svg.querySelector('#tspan7').innerHTML = Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex][index];\r\n\r\n                                this.fixedAnimation(object);\r\n                                this.movementAnimation();\r\n                            });\r\n                            break;\r\n                        case '#pensionistenmodus':\r\n                        case '#Pensionistenmodus':\r\n                            this.backgroundColor = '#7a4aff';\r\n                            this.inputStyling();\r\n\r\n                            this.command.split('').forEach(_ => {\r\n                                this.returnLastElement(this.selectedInput).remove();\r\n                                keys--;\r\n                                if (this.selectedInput.firstChild) {\r\n                                    this.movementAnimation();\r\n                                }\r\n                            });\r\n                            break;\r\n                        default: {\r\n                            this.command.split('').forEach(_ => {\r\n                                this.returnLastElement(this.selectedInput).remove();\r\n                                keys--;\r\n                                if (this.selectedInput.firstChild) {\r\n                                    this.movementAnimation();\r\n                                }\r\n                            });\r\n\r\n                            if (this.inputIndex + 1 < 4) {\r\n                                this.inputIndex++;\r\n                                this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                                if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\r\n                                    this.inputIndex += 1;\r\n                                    this.selectedInput = <HTMLDivElement>this.container.children[this.inputIndex];\r\n                                }\r\n                                keys = this.selectedInput.childElementCount;\r\n                                this.inputStyling();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                    this.command = '';\r\n                    this.commandMode = false;\r\n                } else if (event.key === 'ArrowUp') {\r\n                    this.command.split('').forEach(_ => {\r\n                        this.returnLastElement(this.selectedInput).remove();\r\n                        keys--;\r\n                        if (this.selectedInput.firstChild) {\r\n                            this.movementAnimation();\r\n                        }\r\n                    });\r\n\r\n                    this.command = '';\r\n                    this.commandMode = false;\r\n                } else if (event.key === 'ArrowDown') {\r\n                    this.command.split('').forEach(_ => {\r\n                        this.returnLastElement(this.selectedInput).remove();\r\n                        keys--;\r\n                        if (this.selectedInput.firstChild) {\r\n                            this.movementAnimation();\r\n                        }\r\n                    });\r\n\r\n                    this.command = '';\r\n                    this.commandMode = false;\r\n\r\n                    if (this.inputIndex + 1 < 4) {\r\n                        this.inputIndex++;\r\n                        this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                        if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\r\n                            this.inputIndex += 1;\r\n                            this.selectedInput = <HTMLDivElement>this.container.children[this.inputIndex];\r\n                        }\r\n                        keys = this.selectedInput.childElementCount;\r\n                        this.inputStyling();\r\n                    }\r\n                } else if (event.key === 'Backspace') {\r\n                    if (this.returnLastElement(this.selectedInput)) {\r\n                        this.returnLastElement(this.selectedInput).remove();\r\n                        this.command = this.command.slice(0, this.command.length - 1);\r\n                        keys--;\r\n\r\n                        if (this.selectedInput.firstChild) {\r\n                            this.movementAnimation();\r\n                        }\r\n\r\n                        if (this.command === '') {\r\n                            this.commandMode = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (\r\n                    this.commandMode && (\r\n                        this.selectedInput.classList.contains('not-editable') ||\r\n                        forbiddenCharacters.includes(event.key) ||\r\n                        event.key.length > 1\r\n                    )\r\n                ) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this.commandMode) {\r\n                //TODO: space styling: style empty lines in green when right and red when wrong\r\n                if ((event.key === 'Enter' || event.key === 'ArrowDown') && !mode) {\r\n                    if (this.currentWord && !isNaN(this.currentWordIndex) && event.key === 'Enter') {\r\n                        if (\r\n                            Object.values(this.currentWord)[this.inputIndex] === Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex] ||\r\n                            Object.values(this.currentWord)[this.inputIndex] === ''\r\n                        ) {\r\n                            for (let i = 0; i < keys; i++) {\r\n                                if (this.selectedInput.children[i] && !this.selectedInput.classList.contains('not-editable')) {\r\n                                    this.successAnimation(<HTMLObjectElement>this.selectedInput.children[i]);\r\n                                }\r\n                            }\r\n\r\n                            if (!this.selectedInput.classList.contains('not-editable')) {\r\n                                if (this.result[this.inputIndex] === undefined) {\r\n                                    this.result[this.inputIndex] = true;\r\n                                }\r\n                            }\r\n\r\n                            if (this.inputIndex + 1 < 4) {\r\n                                this.inputIndex++;\r\n                                this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                                if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\r\n                                    this.inputIndex += 1;\r\n                                    this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                                }\r\n                                keys = this.selectedInput.childElementCount;\r\n                                this.inputStyling();\r\n                            } else if (this.inputIndex + 1 === 4) {\r\n                                let emptyLines: [boolean, boolean, boolean, boolean] = [undefined, undefined, undefined, undefined];\r\n                                Object.values(this.currentWord).slice(0, 4).forEach((value, i) => {\r\n                                    if (!document.querySelector(`#div${inputs[i]}`).classList.contains('not-editable')) {\r\n                                        if (value === Object.values(this.vocabulary[this.currentWordIndex])[i]) {\r\n                                            let inp = <HTMLDivElement>document.querySelector(`#div${inputs[i]}`);\r\n                                            for (let ii = 0; ii < inp.childElementCount; ii++) {\r\n                                                let obj = <HTMLObjectElement>inp.children[ii];\r\n                                                this.successAnimation(obj);\r\n                                            }\r\n\r\n                                            if (value === '') {\r\n                                                emptyLines[i] = true;\r\n                                            }\r\n\r\n                                            if (this.result[i] === undefined) {\r\n                                                this.result[i] = true;\r\n                                            }\r\n                                        } else {\r\n                                            let inp = <HTMLDivElement>document.querySelector(`#div${inputs[i]}`);\r\n                                            for (let ii = 0; ii < inp.childElementCount; ii++) {\r\n                                                let obj = <HTMLObjectElement>inp.children[ii];\r\n                                                addVocabulary.failureAnimation(obj);\r\n                                            }\r\n\r\n                                            if (value === '') {\r\n                                                emptyLines[i] = false;\r\n                                            }\r\n\r\n                                            if (this.result[i] === undefined) {\r\n                                                this.result[i] = false;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                });\r\n                                this.resultStyling(emptyLines);\r\n\r\n                                if (Object.values(this.currentWord).toLocaleString() === Object.values(this.vocabulary[this.currentWordIndex]).toLocaleString()) {\r\n                                    let addition = this.result.filter(w => w === true).length;\r\n                                    this.totalAttempts += 3;\r\n                                    this.totalPoints += addition;\r\n                                    if (addition === 3) {\r\n                                        this.vocabulary[this.currentWordIndex].probability *= 0.8;\r\n                                    } else {\r\n                                        this.vocabulary[this.currentWordIndex].probability *= 1.2;\r\n                                    }\r\n\r\n                                    const transaction = this.database.transaction('vocabulary', 'readwrite');\r\n                                    transaction.onerror = _ => console.error(transaction.error);\r\n                                    const objectStore = transaction.objectStore('vocabulary');\r\n                                    const request = objectStore.get(this.currentWordIndex + 1);\r\n                                    request.onerror = _ => console.error(request.error);\r\n                                    request.onsuccess = _ => {\r\n                                        const req = objectStore.put(this.vocabulary[this.currentWordIndex], this.currentWordIndex + 1);\r\n                                        req.onerror = _ => console.error(req.error);\r\n                                    }\r\n\r\n                                    setTimeout(_ => {\r\n                                        this.inputIndex = 0;\r\n                                        this.selectedInput = <HTMLDivElement>document.querySelector(`#div${inputs[this.inputIndex]}`);\r\n                                        keys = 0;\r\n                                        this.inputStyling();\r\n                                        this.startNewTrainingRound();\r\n                                    }, 500);\r\n                                } else {\r\n                                    setTimeout(_ => this.inputStyling(), 500);\r\n                                }\r\n                            }\r\n                        } else if (this.selectedInput.classList.contains('not-editable')) {\r\n                            if (this.inputIndex + 1 < 4) {\r\n                                this.inputIndex++;\r\n                                this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                                if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\r\n                                    this.inputIndex += 1;\r\n                                    this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                                }\r\n                                keys = this.selectedInput.childElementCount;\r\n                                this.inputStyling();\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            if (this.inputIndex === 3) {\r\n                                let emptyLines: [boolean, boolean, boolean, boolean] = [undefined, undefined, undefined, undefined];\r\n                                Object.values(this.currentWord).slice(0, 4).forEach((value, i) => {\r\n                                    if (!document.querySelector(`#div${inputs[i]}`).classList.contains('not-editable')) {\r\n                                        if (value === Object.values(this.vocabulary[this.currentWordIndex])[i]) {\r\n                                            let inp = <HTMLDivElement>document.querySelector(`#div${inputs[i]}`);\r\n                                            for (let ii = 0; ii < inp.childElementCount; ii++) {\r\n                                                let obj = <HTMLObjectElement>inp.children[ii];\r\n                                                this.successAnimation(obj);\r\n                                            }\r\n\r\n                                            if (value === '') {\r\n                                                emptyLines[i] = true;\r\n                                            }\r\n\r\n                                            if (this.result[i] === undefined) {\r\n                                                this.result[i] = true;\r\n                                            }\r\n                                        } else {\r\n                                            let inp = <HTMLDivElement>document.querySelector(`#div${inputs[i]}`);\r\n                                            for (let ii = 0; ii < inp.childElementCount; ii++) {\r\n                                                let obj = <HTMLObjectElement>inp.children[ii];\r\n                                                addVocabulary.failureAnimation(obj);\r\n                                            }\r\n\r\n                                            if (value === '') {\r\n                                                emptyLines[i] = false;\r\n                                            }\r\n\r\n                                            if (this.result[i] === undefined) {\r\n                                                this.result[i] = false;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                });\r\n                                this.resultStyling(emptyLines);\r\n                                setTimeout(_ => this.inputStyling(), 500);\r\n                            } else {\r\n                                for (let i = 0; i < this.selectedInput.childElementCount; i++) {\r\n                                    addVocabulary.failureAnimation(<HTMLObjectElement>this.selectedInput.children[i]);\r\n                                }\r\n                            }\r\n\r\n\r\n                            if (this.result[this.inputIndex] === undefined) {\r\n                                this.result[this.inputIndex] = true;\r\n                            }\r\n\r\n                            this.result[this.inputIndex] = false;\r\n                        }\r\n                    } else if (event.key === 'ArrowDown') {\r\n                        if (this.inputIndex + 1 < 4) {\r\n                            this.inputIndex++;\r\n                            this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                            if (this.inputIndex + 1 < 4 && this.selectedInput.classList.contains('not-editable')) {\r\n                                this.inputIndex += 1;\r\n                                this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                            }\r\n                            keys = this.selectedInput.childElementCount;\r\n                            this.inputStyling();\r\n                        }\r\n                        return;\r\n                    }\r\n                    return;\r\n                } else if (event.key === 'ArrowUp') {\r\n                    if (this.inputIndex > 0) this.inputIndex--;\r\n                    this.selectedInput = <HTMLDivElement>this.container.children[inputs[this.inputIndex]];\r\n                    keys = this.selectedInput.childElementCount;\r\n                    this.inputStyling();\r\n                    return;\r\n                } else if (this.selectedInput.classList.contains('not-editable')) {\r\n                    return;\r\n                } else if (event.key === 'Backspace' && !mode) {\r\n                    if (this.returnLastElement(this.selectedInput)) {\r\n                        this.returnLastElement(this.selectedInput).remove();\r\n                        keys--;\r\n                        if (this.selectedInput.firstChild) {\r\n                            this.movementAnimation();\r\n                        }\r\n\r\n                        if (this.currentWord && !isNaN(this.currentWordIndex) && !this.commandMode) {\r\n                            Object.defineProperty(\r\n                                this.currentWord,\r\n                                Object.keys(this.currentWord)[this.inputIndex],\r\n                                { value: Object.values(this.currentWord)[this.inputIndex].slice(0, keys) }\r\n                            );\r\n                        }\r\n                    }\r\n                    return;\r\n                } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) {\r\n                    return;\r\n                } else if (event.key === '#') {\r\n                    this.commandMode = true;\r\n                }\r\n            }\r\n\r\n            let object = document.createElement('object');\r\n            object.data = './keys/OG_T.svg';\r\n            object.id = `key${keys}-inp${this.inputIndex}`;\r\n            object.style.height = `100%`;\r\n            this.selectedInput.insertAdjacentElement('beforeend', object);\r\n            let width = object.clientHeight;\r\n            object.hidden = true;\r\n\r\n            object.addEventListener('load', _ => {\r\n                if (keys >= Math.floor(window.innerWidth / width)) {\r\n                    object.remove();\r\n                    for (let i = 0; i < keys; i++) {\r\n                        addVocabulary.failureAnimation(<HTMLObjectElement>this.selectedInput.children[i]);\r\n                    }\r\n                    return;\r\n                }\r\n                object.hidden = false;\r\n\r\n                let svg = object.contentDocument;\r\n                svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\r\n\r\n                if (this.currentWord && !isNaN(this.currentWordIndex) && !this.commandMode) {\r\n                    Object.defineProperty(\r\n                        this.currentWord,\r\n                        Object.keys(this.currentWord)[this.inputIndex],\r\n                        { value: Object.values(this.currentWord)[this.inputIndex] + event.key.charAt(0) }\r\n                    );\r\n                }\r\n\r\n                keys++;\r\n\r\n                addVocabulary.idleAnimation(object);\r\n                this.movementAnimation();\r\n\r\n                if (this.commandMode) {\r\n                    this.commandAnimation(object);\r\n                    this.command += event.key;\r\n                }\r\n            });\r\n        }\r\n\r\n        document.addEventListener('keydown', this.keyDownFunction);\r\n        this.startNewTrainingRound();\r\n    }\r\n\r\n    startNewTrainingRound(): void {\r\n        if (this.vocabulary.length === 0) {\r\n            setTimeout(_ => alert('Keine Vokabeln!'), 50);\r\n            return;\r\n        }\r\n\r\n        this.round++;\r\n\r\n        let overallProbabilty = 0;\r\n        this.vocabulary.forEach(word => { if (word.selected) { overallProbabilty += word.probability } });\r\n\r\n        let randomNumber = Math.floor(Math.random() * overallProbabilty * 10) / 10;\r\n        let lowestDifference: number;\r\n        let lastProbability = 0;\r\n\r\n        this.vocabulary.forEach((word, i) => {\r\n            if (word.selected) {\r\n                if (lowestDifference === undefined) {\r\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\r\n                    this.currentWord = word;\r\n                    this.currentWordIndex = i;\r\n                } else if (Math.abs(randomNumber - (lastProbability + word.probability)) < lowestDifference) {\r\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\r\n                    this.currentWordIndex = i;\r\n                    if (Object.values(word).toLocaleString().slice(0, 4) === Object.values(this.currentWord).toLocaleString().slice(0, 4)) {\r\n                        word.probability = Math.max(0, word.probability - 1);\r\n                    }\r\n                    this.currentWord = word;\r\n                }\r\n                lastProbability += word.probability;\r\n            }\r\n        });\r\n\r\n        let savedProperty: [string, { value: string }];\r\n        do {\r\n            let rn = Math.random();\r\n            if (rn <= 0.5) {\r\n                savedProperty = ['latinWord', { value: this.currentWord.latinWord }];\r\n                this.inputIndex = 1;\r\n                this.selectedInput = <HTMLDivElement>this.container.children[this.inputIndex + 1];\r\n                this.inputStyling();\r\n            } else if (rn <= 0.7) {\r\n                savedProperty = ['inflections', { value: this.currentWord.inflections }];\r\n            } else if (rn <= 0.95) {\r\n                savedProperty = ['germanTranslation', { value: this.currentWord.germanTranslation }];\r\n            } else {\r\n                savedProperty = ['relatedForeignWords', { value: this.currentWord.relatedForeignWords }];\r\n            }\r\n        } while (savedProperty[1].value.trim() === '');\r\n\r\n        this.currentWord = {\r\n            latinWord: '',\r\n            inflections: '',\r\n            germanTranslation: '',\r\n            relatedForeignWords: '',\r\n            selected: true,\r\n            probability: this.currentWord.probability\r\n        };\r\n\r\n        Object.defineProperty(this.currentWord, savedProperty[0], savedProperty[1]);\r\n\r\n        let previousFixedDiv = document.querySelector('.not-editable')\r\n        if (previousFixedDiv) {\r\n            previousFixedDiv.classList.remove('not-editable');\r\n        }\r\n\r\n        document.querySelectorAll('.t').forEach(t => t.innerHTML = '');\r\n\r\n        let specificationDiv = document.getElementById(`div${Object.keys(this.currentWord).findIndex(k => k === savedProperty[0]) * 2}`);\r\n        specificationDiv.classList.add('not-editable');\r\n\r\n        specificationDiv.innerHTML = `<span style=\"font-size:${specificationDiv.clientHeight * 0.6}px\">${savedProperty[1].value}</span>`;\r\n\r\n        this.result = [undefined, undefined, undefined, undefined];\r\n    }\r\n\r\n    movementAnimation(): void {\r\n        let object = <HTMLObjectElement>this.selectedInput.firstChild;\r\n        let inp = this.selectedInput;\r\n        if (this.selectedInput.firstChild) {\r\n            if (inp.childElementCount > 1) {\r\n                inp.style.transition = 'padding 250ms';\r\n            }\r\n            inp.style.paddingLeft = `${(window.innerWidth - inp.childElementCount * object.clientHeight) / 2}px`\r\n        }\r\n    }\r\n\r\n    commandAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#eeeeeeff', '#ffa500'],\r\n            offset: [0, 1],\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 500,\r\n            fill: 'forwards'\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    fixedAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n        object.classList.add('fixed');\r\n\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#eeeeeeff', '#ffff00'],\r\n            offset: [0, 1],\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 500,\r\n            fill: 'forwards'\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    successAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#eeeeeeff', '#08a000', '#eeeeeeff'],\r\n            offset: [0, 1]\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 500\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    private returnLastElement(input: HTMLDivElement): HTMLObjectElement {\r\n        if (input.childElementCount > 0) {\r\n            if (!input.lastElementChild.classList.contains('fixed')) {\r\n                return <HTMLObjectElement>input.lastElementChild;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private inputStyling(): void {\r\n        document.body.style.backgroundImage = `\r\n            linear-gradient(180deg, \r\n                ${this.backgroundColor} 0%, \r\n                #06011b ${20 + (this.inputIndex * 2) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%,\r\n                #06011b ${20 + (this.inputIndex * 2 + 1) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%, \r\n                ${this.backgroundColor} ${(window.innerHeight / document.body.scrollHeight) * 100}%\r\n            )\r\n        `;\r\n        //#0d0043\r\n        //#440075\r\n    }\r\n\r\n    private resultStyling(result: [boolean, boolean, boolean, boolean]): void {\r\n        document.body.style.transition = 'background-image 250ms';\r\n        let str = `linear-gradient(180deg,`;\r\n        result.forEach((value, i) => {\r\n            let color: string;\r\n            if (value === true) {\r\n                color = '#2be231';\r\n            } else if (value === false) {\r\n                color = '#e80000';\r\n            } else {\r\n                color = '#140063';\r\n            }\r\n\r\n            str +=\r\n                `#140063 ${20 + (i * 2) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%,\r\n                ${color} ${20 + (i * 2 + 0.5) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%, \r\n                #140063 ${20 + (i * 2 + 1) * (window.innerHeight / document.body.scrollHeight) * (65 / 7)}%, `;\r\n        });\r\n\r\n        document.body.style.backgroundImage = str.slice(0, str.length - 2) + ')';\r\n    }\r\n}","import { createDiv, home, removeAllEventListeners } from \"..\";\r\n\r\nexport class InflectVocabulary {\r\n    container: HTMLDivElement;\r\n    iconPlaceholder: HTMLDivElement;\r\n    navbar: HTMLDivElement;\r\n    buttonLeft: HTMLButtonElement;\r\n    buttonRight: HTMLButtonElement;\r\n    homeButton: HTMLButtonElement;\r\n    deletionButton: HTMLButtonElement;\r\n\r\n    keydownFunction: EventListenerOrEventListenerObject;\r\n    selectedInput: HTMLDivElement;\r\n    inputIndex: number;\r\n\r\n    currentWord: InflectedWord;\r\n    currentWordIndex: number;\r\n    wordIndex: number;\r\n    vocabulary: InflectedWord[];\r\n\r\n    database: IDBDatabase;\r\n\r\n    enterMode = false;\r\n    tabMode = false;\r\n    tabulator = \"\";\r\n    tabCount = 0;\r\n    keys: number;\r\n    v = 1;\r\n\r\n    round = 0;\r\n    failures = 0;\r\n    totalAttempts = 0;\r\n    totalPoints = 0;\r\n    result: {\r\n        singular: [boolean, boolean, boolean, boolean, boolean, boolean] | [boolean, boolean, boolean],\r\n        plural: [boolean, boolean, boolean, boolean, boolean, boolean] | [boolean, boolean, boolean],\r\n    };\r\n\r\n    badColor = 'rgb(186, 2, 70)';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    //TODO: Remove greenShadowDesign in certain cases\r\n    modifyDocument(param?: Parameter): void {\r\n        this.container = document.querySelector('#container');\r\n        this.iconPlaceholder = document.querySelector('#icon-placeholder');\r\n        this.navbar = document.querySelector('#navbar');\r\n\r\n        this.container.setAttribute('style', '');\r\n        document.body.style.backgroundImage = 'none';\r\n\r\n        document.body.setAttribute('class', '');\r\n        this.container.setAttribute('class', '');\r\n        this.iconPlaceholder.setAttribute('class', '');\r\n        this.navbar.setAttribute('class', '');\r\n\r\n        this.container.innerHTML = '';\r\n        this.iconPlaceholder.innerHTML = '';\r\n        this.navbar.innerHTML = '';\r\n\r\n        if (!param) {\r\n            param = 'add nouns';\r\n        }\r\n\r\n        let inflectVocabularyIcon: HTMLObjectElement;\r\n        inflectVocabularyIcon = document.createElement('object');\r\n        inflectVocabularyIcon.id = 'inflectVocabularyIcon';\r\n\r\n        this.v = 0;\r\n        this.badColor = 'rgb(186, 2, 70)';\r\n        switch (param) {\r\n            case 'add verbs':\r\n            case 'verbs':\r\n                this.v = 9;\r\n                this.badColor = '#ff00d4';\r\n                if (param === 'add verbs') {\r\n                    inflectVocabularyIcon.data = './conjugations.svg';\r\n                } else {\r\n                    inflectVocabularyIcon.data = './conjugate_verbs.svg';\r\n                }\r\n            case 'add nouns':\r\n            case 'nouns':\r\n            default:\r\n                const request = window.indexedDB.open('Vocabulary', 1);\r\n                request.onerror = _ => console.log(request.error);\r\n                request.onsuccess = _ => {\r\n                    this.database = request.result;\r\n                    this.tabulator = '';\r\n\r\n                    const transaction = this.database.transaction('inflected vocabulary', 'readonly');\r\n                    transaction.onerror = _ => console.error(transaction.error);\r\n                    const objectStore = transaction.objectStore('inflected vocabulary');\r\n                    const req = objectStore.getAll();\r\n                    req.onerror = _ => console.error(req.error);\r\n                    req.onsuccess = _ => {\r\n                        this.vocabulary = req.result;\r\n\r\n                        document.body.classList.add('inflectVocabularyBody');\r\n                        this.iconPlaceholder.classList.add('inflectVocabularyIconPlaceholder');\r\n                        if (param === 'add nouns') {\r\n                            inflectVocabularyIcon.data = './declinations.svg';\r\n                        } else if (param === 'nouns') {\r\n                            inflectVocabularyIcon.data = './decline_nouns.svg';\r\n                        }\r\n                        this.iconPlaceholder.insertAdjacentElement('beforeend', inflectVocabularyIcon);\r\n\r\n                        if (param === 'add verbs' || param === 'verbs') {\r\n                            this.container.classList.add('inflectVocabularyContainer', 'verbs');\r\n                        } else {\r\n                            this.container.classList.add('inflectVocabularyContainer', 'nouns');\r\n                        }\r\n                        this.navbar.classList.add('inflectVocabularyNavbar');\r\n\r\n                        this.container.tabIndex = 0;\r\n                        for (let i = 0; i < 21 - this.v; i++) {\r\n                            let div = createDiv(`div${i}`, 'editable');\r\n                            this.container.insertAdjacentElement('beforeend', div);\r\n                            if (i < 3) {\r\n                                div.classList.add('firstrow');\r\n                                div.classList.remove('editable');\r\n                                div.style.fontSize = `${div.offsetHeight * 0.75}px`;\r\n                                if (i === 1) {\r\n                                    div.innerHTML = 'Singular';\r\n                                } else if (i === 2) {\r\n                                    div.innerHTML = 'Plural';\r\n                                }\r\n                            }\r\n                            if (i % 3 === 0) {\r\n                                div.classList.add('firstcolumn');\r\n                                div.classList.remove('editable');\r\n                                div.style.fontSize = `${0.25 * div.offsetHeight}px`;\r\n                                if (i > 0) div.innerHTML = `${i / 3}. ${param.includes('verb') ? 'P' : 'F'}.`;\r\n                            }\r\n                            if (!(i < 3 || i % 3 === 0)) {\r\n                                div.style.padding = `${0.05 * div.offsetHeight}px`;\r\n                                if (!param.includes('add')) {\r\n                                    div.classList.add('shadowDesign');\r\n                                }\r\n                            }\r\n\r\n                            if (param.includes('verb')) {\r\n                                div.classList.add('v');\r\n                            }\r\n                        }\r\n\r\n                        if (param.startsWith('add')) {\r\n                            this.buttonLeft = document.createElement('button');\r\n                            this.buttonLeft.classList.add('roundButton', 'c');\r\n                            this.buttonLeft.innerHTML = '<';\r\n                            this.navbar.appendChild(this.buttonLeft);\r\n                        }\r\n\r\n                        this.homeButton = document.createElement('button');\r\n                        this.homeButton.classList.add('roundButton');\r\n                        this.homeButton.tabIndex = -1;\r\n                        let icon = document.createElement('object');\r\n                        icon.classList.add('homeIcon');\r\n                        icon.data = './home.svg';\r\n                        icon.style.height = '7.5vh';\r\n                        icon.addEventListener('load', _ => {\r\n                            icon.contentDocument.addEventListener('click', _ => {\r\n                                removeAllEventListeners();\r\n                                if (this.tabMode) {\r\n                                    this.cancelTabMode();\r\n                                }\r\n                                home.modifyDocument();\r\n                            })\r\n                        })\r\n                        this.homeButton.onclick = _ => {\r\n                            removeAllEventListeners();\r\n                            if (this.tabMode) {\r\n                                this.cancelTabMode();\r\n                            }\r\n                            home.modifyDocument();\r\n                        }\r\n                        this.homeButton.insertAdjacentElement('beforeend', icon);\r\n                        this.navbar.appendChild(this.homeButton);\r\n\r\n                        if (param.startsWith('add')) {\r\n                            this.deletionButton = document.createElement('button');\r\n                            this.deletionButton.classList.add('roundButton', 'deletionButton');\r\n                            this.deletionButton.innerHTML = 'X';\r\n                            this.deletionButton.tabIndex = -1;\r\n                            if (param.includes('verb')) {\r\n                                this.deletionButton.classList.add('v');\r\n                            }\r\n                            this.navbar.appendChild(this.deletionButton);\r\n\r\n                            this.buttonRight = document.createElement('button');\r\n                            this.buttonRight.classList.add('roundButton', 'c');\r\n                            this.buttonRight.innerHTML = '>';\r\n                            this.buttonRight.tabIndex = -1;\r\n                            this.navbar.appendChild(this.buttonRight);\r\n                        }\r\n\r\n\r\n                        if (param) {\r\n                            this.type(param);\r\n                        } else {\r\n                            this.type();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    type(param?: Parameter): void {\r\n        switch (param) {\r\n            case 'verbs':\r\n            case 'nouns':\r\n                this.keys = 0;\r\n\r\n                document.querySelectorAll('.editable').forEach((element: HTMLDivElement) => {\r\n                    element.addEventListener('click', _ => {\r\n                        this.selectedInput = element;\r\n                        this.keys = this.selectedInput.childElementCount;\r\n                        document.querySelectorAll('.selectedElement').forEach(elem => elem.classList.remove('selectedElement'));\r\n                        element.classList.add('selectedElement');\r\n                        this.inputIndex = parseInt(element.id.slice(3));\r\n                    });\r\n                });\r\n\r\n                this.selectedInput = <HTMLDivElement>document.getElementById('div4');\r\n                this.selectedInput.classList.add('selectedElement');\r\n                this.inputIndex = 4;\r\n                this.wordIndex = this.vocabulary.length;\r\n\r\n                this.currentWord = {\r\n                    singular: this.empty(param),\r\n                    plural: this.empty(param),\r\n                    verb: param.includes('verb'),\r\n                    probability: 1\r\n                }\r\n\r\n                this.keydownFunction = (event: KeyboardEvent) => {\r\n                    let forbiddenCharacters = ['<', '´', '`', '^'];\r\n                    if (event.key === 'ArrowRight') {\r\n                        if (this.inputIndex < 20 - this.v) {\r\n                            this.inputIndex++;\r\n                            if (this.inputIndex % 3 === 0) {\r\n                                this.inputIndex++;\r\n                            }\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        }\r\n                        return;\r\n                    } else if (event.key === 'ArrowLeft') {\r\n                        if (this.inputIndex > 4) {\r\n                            this.inputIndex--;\r\n                            if (this.inputIndex % 3 === 0) {\r\n                                this.inputIndex--;\r\n                            }\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        }\r\n                        return;\r\n                    } else if (event.key === 'ArrowDown' || event.key === 'Enter') {\r\n                        if (this.inputIndex < 20 - this.v) {\r\n                            if (event.key === 'Enter' && !this.selectedInput.classList.contains('known-case')) {\r\n                                if (this.compare(Object.values(this.currentWord)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1],\r\n                                    Object.values(this.vocabulary[this.currentWordIndex])[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1])\r\n                                ) {\r\n                                    for (let i = 0; i < this.selectedInput.childElementCount; i++) {\r\n                                        let object = <HTMLObjectElement>this.selectedInput.children[i];\r\n                                        this.successAnimation(object);\r\n                                    }\r\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\r\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\r\n                                        array[Math.floor(this.inputIndex / 3) - 1] = true;\r\n                                        Object.defineProperty(\r\n                                            this.result,\r\n                                            Object.keys(this.result)[this.inputIndex % 3 - 1],\r\n                                            { value: array }\r\n                                        );\r\n\r\n                                        let inp = this.selectedInput;\r\n                                        setTimeout(_ => {\r\n                                            inp.classList.remove('shadowDesign');\r\n                                            inp.classList.add('greenShadowDesign');\r\n                                        }, 500)\r\n                                    }\r\n                                } else {\r\n                                    for (let i = 0; i < this.selectedInput.childElementCount; i++) {\r\n                                        let object = <HTMLObjectElement>this.selectedInput.children[i];\r\n                                        this.failureAnimation(object);\r\n                                    }\r\n\r\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\r\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\r\n                                        array[Math.floor(this.inputIndex / 3) - 1] = false;\r\n                                        Object.defineProperty(\r\n                                            this.result,\r\n                                            Object.keys(this.result)[this.inputIndex % 3 - 1],\r\n                                            { value: array }\r\n                                        );\r\n                                    }\r\n\r\n                                    let inp = this.selectedInput;\r\n                                    setTimeout(_ => {\r\n                                        inp.classList.remove('shadowDesign');\r\n                                        inp.classList.add('redShadowDesign');\r\n                                    }, 500)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (this.inputIndex < 18 - this.v) {\r\n                            this.inputIndex += 3;\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n\r\n                            if (event.key === 'Enter' && this.selectedInput.classList.contains('known-case')) {\r\n                                if (this.inputIndex < 18 - this.v) {\r\n                                    this.inputIndex += 3;\r\n\r\n                                    this.changeSelectedInput();\r\n                                    this.keys = this.selectedInput.childElementCount;\r\n                                } else if (this.inputIndex === 19 - this.v) {\r\n                                    this.inputIndex = 5;\r\n\r\n                                    this.changeSelectedInput();\r\n                                    this.keys = this.selectedInput.childElementCount;\r\n                                }\r\n                            }\r\n\r\n                        } else if (event.key === 'Enter' && this.inputIndex === 19 - this.v) {\r\n                            this.inputIndex = 5;\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        } else if (event.key === 'Enter' && this.inputIndex === 20 - this.v) {\r\n                            this.currentWord.singular.forEach((word, i) => {\r\n                                let index = 1 + (i + 1) * 3;\r\n                                if (this.compare(word, Object.values(this.vocabulary[this.currentWordIndex])[index % 3 - 1][Math.floor(index / 3) - 1])) {\r\n                                    for (let ii = 0; ii < this.container.children[index].childElementCount; ii++) {\r\n                                        if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\r\n                                            let object = <HTMLObjectElement>this.container.children[index].children[ii];\r\n                                            this.successAnimation(object);\r\n                                        }\r\n                                    }\r\n                                    if (Object.values(this.result)[index % 3 - 1][Math.floor(index / 3) - 1] === undefined) {\r\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\r\n                                        array[Math.floor(this.inputIndex / 3) - 1] = true;\r\n                                        Object.defineProperty(\r\n                                            this.result,\r\n                                            Object.keys(this.result)[index % 3 - 1],\r\n                                            { value: array }\r\n                                        )\r\n                                    }\r\n\r\n                                } else {\r\n                                    for (let ii = 0; ii < this.container.children[index].childElementCount; ii++) {\r\n                                        if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\r\n                                            let object = <HTMLObjectElement>this.container.children[index].children[ii];\r\n                                            this.failureAnimation(object);\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\r\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\r\n                                        array[Math.floor(this.inputIndex / 3) - 1] = false;\r\n                                        Object.defineProperty(\r\n                                            this.result,\r\n                                            Object.keys(this.result)[this.inputIndex % 3 - 1],\r\n                                            { value: array }\r\n                                        )\r\n                                    }\r\n                                }\r\n                            })\r\n                            this.currentWord.plural.forEach((word, i) => {\r\n                                let index = 2 + (i + 1) * 3;\r\n                                if (this.compare(word, Object.values(this.vocabulary[this.currentWordIndex])[index % 3 - 1][Math.floor(index / 3) - 1])) {\r\n                                    for (let ii = 0; ii < this.container.children[index].childElementCount; ii++) {\r\n                                        if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\r\n                                            let object = <HTMLObjectElement>this.container.children[index].children[ii];\r\n                                            this.successAnimation(object);\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\r\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\r\n                                        array[Math.floor(this.inputIndex / 3) - 1] = true;\r\n                                        Object.defineProperty(\r\n                                            this.result,\r\n                                            Object.keys(this.result)[this.inputIndex % 3 - 1],\r\n                                            { value: array }\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    for (let ii = 0; ii < this.container.children[index].childElementCount; ii++) {\r\n                                        if (index % 3 != 0 && !this.container.children[index].classList.contains('known-case')) {\r\n                                            let object = <HTMLObjectElement>this.container.children[index].children[ii];\r\n                                            this.failureAnimation(object);\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Object.values(this.result)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1] === undefined) {\r\n                                        let array = Object.values(this.result)[this.inputIndex % 3 - 1];\r\n                                        array[Math.floor(this.inputIndex / 3) - 1] = false;\r\n                                        Object.defineProperty(\r\n                                            this.result,\r\n                                            Object.keys(this.result)[this.inputIndex % 3 - 1],\r\n                                            { value: array }\r\n                                        )\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            if (this.compareObjects(this.currentWord, this.vocabulary[this.currentWordIndex])) {\r\n                                this.totalAttempts += 11 - this.v / 3 * 2;\r\n                                let addition = this.result.singular.filter(w => w === true).length +\r\n                                    this.result.plural.filter(w => w === true).length;\r\n                                this.totalPoints += addition;\r\n                                if (addition != 12 - this.v / 3 * 2) {\r\n                                    this.vocabulary[this.currentWordIndex].probability *= 0.8;\r\n                                } else {\r\n                                    this.vocabulary[this.currentWordIndex].probability *= 1.2;\r\n                                }\r\n                                const transaction = this.database.transaction('inflected vocabulary', 'readwrite');\r\n                                const objectStore = transaction.objectStore('inflected vocabulary');\r\n                                const request = objectStore.put(this.vocabulary[this.currentWordIndex], this.currentWordIndex + 1);\r\n                                request.onerror = _ => console.error(request.error);\r\n\r\n                                setTimeout(_ => {\r\n                                    document.querySelectorAll('.selectedElement').forEach(div => {\r\n                                        div.classList.remove('selectedElement');\r\n                                    });\r\n                                    this.keys = 0;\r\n                                    this.inputIndex = 4;\r\n                                    this.selectedInput = <HTMLDivElement>document.querySelector('#div4');\r\n                                    this.selectedInput.classList.add('selectedElement');\r\n                                    this.startNewTrainingRound(param || 'nouns');\r\n                                }, 500);\r\n                            }\r\n                        }\r\n                        return;\r\n                    } else if (event.key === 'ArrowUp') {\r\n                        if (this.inputIndex > 6) {\r\n                            this.inputIndex -= 3;\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        }\r\n                        return;\r\n                    } else if (event.key === 'Backspace') {\r\n                        if (this.selectedInput.lastElementChild) {\r\n                            this.selectedInput.lastElementChild.remove();\r\n\r\n                            let array = <string[]>Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                            array[Math.floor(this.inputIndex / 3) - 1] = array[Math.floor(this.inputIndex / 3) - 1].slice(0, this.keys - 1);\r\n                            Object.defineProperty(\r\n                                this.currentWord,\r\n                                Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                                { value: array }\r\n                            );\r\n                            this.keys--;\r\n                        }\r\n                        return;\r\n                    } else if (this.selectedInput.classList.contains('known-case')) {\r\n                        return;\r\n                    } else if (event.key == 'Tab') {\r\n                        if (this.tabulator) {\r\n                            if (this.keys + this.tabulator.length >=\r\n                                this.selectedInput.clientWidth /\r\n                                (this.selectedInput.clientHeight - parseFloat(this.selectedInput.style.padding))\r\n                            ) {\r\n                                this.selectedInput.childNodes.forEach((v, i) => {\r\n                                    this.failureAnimation(<HTMLObjectElement>this.selectedInput.children[i]);\r\n                                });\r\n                            } else {\r\n                                let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                                let n = Math.floor(this.inputIndex / 3) - 1;\r\n                                array[n] += this.tabulator;\r\n                                Object.defineProperty(\r\n                                    this.currentWord,\r\n                                    Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                                    { value: array }\r\n                                );\r\n\r\n                                this.tabulator.split('').forEach(letter => {\r\n                                    let object = document.createElement('object');\r\n                                    object.data = './keys/OG_T.svg';\r\n                                    object.id = `key${this.keys}-inp${this.inputIndex}`;\r\n                                    object.style.height = `100%`;\r\n                                    this.selectedInput.insertAdjacentElement('beforeend', object);\r\n                                    object.hidden = true;\r\n\r\n                                    object.addEventListener('load', _ => {\r\n                                        object.hidden = false;\r\n\r\n                                        let svg = object.contentDocument;\r\n                                        svg.querySelector('#tspan7').innerHTML = letter;\r\n                                        this.keys++;\r\n\r\n                                        this.tabulatorAnimation(object);\r\n                                    });\r\n                                })\r\n                            }\r\n                        }\r\n                        return;\r\n                    } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) {\r\n                        return;\r\n                    }\r\n\r\n                    let object = document.createElement('object');\r\n                    object.data = './keys/OG_T.svg';\r\n                    object.id = `key${this.keys}-inp${this.inputIndex}`;\r\n                    object.style.height = `100%`;\r\n                    this.selectedInput.insertAdjacentElement('beforeend', object);\r\n                    let width = object.clientHeight;\r\n                    object.hidden = true;\r\n\r\n                    object.addEventListener('load', _ => {\r\n                        if (this.keys + 1 >= Math.floor(this.selectedInput.clientWidth / width)) {\r\n                            object.remove();\r\n                            for (let i = 0; i < this.keys; i++) {\r\n                                this.failureAnimation(<HTMLObjectElement>this.selectedInput.children[i]);\r\n                            }\r\n                            return;\r\n                        }\r\n                        object.hidden = false;\r\n\r\n                        let svg = object.contentDocument;\r\n                        svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\r\n\r\n                        let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                        array[Math.floor(this.inputIndex / 3) - 1] += event.key;\r\n                        Object.defineProperty(\r\n                            this.currentWord,\r\n                            Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                            { value: array }\r\n                        );\r\n\r\n                        this.keys++;\r\n\r\n                        this.idleAnimation(object);\r\n                    });\r\n                }\r\n\r\n                document.addEventListener('keydown', this.keydownFunction);\r\n\r\n                window.onkeyup = event => {\r\n                    if (event.key === 'Tab') {\r\n                        this.container.focus();\r\n                    }\r\n                }\r\n\r\n                this.startNewTrainingRound(param ? param : 'nouns');\r\n                break;\r\n            case 'add verbs':\r\n            case 'add nouns':\r\n                this.keys = 0;\r\n\r\n                document.querySelectorAll('.editable').forEach((element: HTMLDivElement) => {\r\n                    element.addEventListener('click', _ => {\r\n                        if (this.tabMode) {\r\n                            this.cancelTabMode();\r\n                        }\r\n                        this.inputIndex = parseInt(element.id.slice(3));\r\n                        this.changeSelectedInput();\r\n                        this.keys = this.selectedInput.childElementCount;\r\n                    });\r\n                });\r\n\r\n                this.selectedInput = <HTMLDivElement>document.getElementById('div4');\r\n                this.selectedInput.classList.add('selectedElement');\r\n                this.inputIndex = 4;\r\n                this.wordIndex = this.vocabulary.length;\r\n\r\n                this.currentWord = {\r\n                    singular: this.empty(param),\r\n                    plural: this.empty(param),\r\n                    verb: param.includes('verb'),\r\n                    probability: 1\r\n                }\r\n\r\n                let deletionMode = false;\r\n                let indicator;\r\n                let deletionFunction = _ => {\r\n                    this.vocabulary.splice(this.wordIndex, 1);\r\n                    const transaction = this.database.transaction('inflected vocabulary', 'readwrite');\r\n                    const objectStore = transaction.objectStore('inflected vocabulary');\r\n                    const request = objectStore.openCursor();\r\n                    request.onsuccess = _ => {\r\n                        let cursor = request.result;\r\n                        if (cursor) {\r\n                            let k = <number>cursor.key;\r\n                            let word = this.vocabulary[k - 1];\r\n                            if (word) {\r\n                                const updatedData = cursor.value;\r\n                                updatedData.singular = word.singular;\r\n                                updatedData.plural = word.plural;\r\n                                updatedData.verb = word.verb;\r\n                                updatedData.probability = word.probability;\r\n                                cursor.update(updatedData);\r\n                                cursor.continue();\r\n                            } else {\r\n                                cursor.delete();\r\n\r\n                                let vocab1 = this.vocabulary.slice(0, this.wordIndex);\r\n                                let vocab2 = this.vocabulary.slice(this.wordIndex);\r\n                                let wi1 = vocab1.findLastIndex(w => w.verb === param.includes('verb'));\r\n                                let wi2 = vocab2.findIndex(w => w.verb === param.includes('verb')) + this.wordIndex;\r\n                                if (this.vocabulary[wi1]) {\r\n                                    this.wordIndex = wi1;\r\n\r\n                                    this.currentWord = this.vocabulary[wi1];\r\n                                    let overallIndexes: [number, number[]][] = [];\r\n\r\n                                    let tabulatorStyle = false;\r\n                                    for (let i = 3; i < this.container.childElementCount; i++) {\r\n                                        let tabulatorIndexes: number[] = [];\r\n                                        let n = Math.floor(i / 3) - 1;\r\n                                        let singular = this.currentWord.singular;\r\n                                        let plural = this.currentWord.plural;\r\n                                        if (i % 3 === 1) {\r\n                                            this.container.children[i].innerHTML = '';\r\n                                            for (let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++) {\r\n                                                if (singular[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                    tabulatorStyle = !tabulatorStyle;\r\n                                                    ii += 4;\r\n                                                } else {\r\n                                                    let object = document.createElement('object');\r\n                                                    object.data = './keys/OG_T.svg';\r\n                                                    object.id = `key${ii}-inp${i}`;\r\n                                                    object.style.height = `100%`;\r\n                                                    this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                    if (tabulatorStyle) tabulatorIndexes.push(ii)\r\n\r\n                                                    object.addEventListener('load', _ => {\r\n                                                        let svg = object.contentDocument;\r\n                                                        svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                        if (\r\n                                                            overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined &&\r\n                                                            overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                                .includes(parseInt(object.id.slice(3)))\r\n                                                        ) {\r\n                                                            this.tabulatorAnimation(object);\r\n                                                            object.classList.add('tabulator');\r\n                                                        }\r\n                                                    })\r\n                                                }\r\n                                            }\r\n                                            overallIndexes.push([i, tabulatorIndexes]);\r\n                                        } else if (i % 3 === 2) {\r\n                                            this.container.children[i].innerHTML = '';\r\n                                            for (let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++) {\r\n                                                if (plural[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                    tabulatorStyle = !tabulatorStyle;\r\n                                                    ii += 4;\r\n                                                } else {\r\n                                                    let object = document.createElement('object');\r\n                                                    object.data = './keys/OG_T.svg';\r\n                                                    object.id = `key${ii}-inp${i}`;\r\n                                                    object.style.height = `100%`;\r\n                                                    this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                    if (tabulatorStyle) tabulatorIndexes.push(ii);\r\n\r\n                                                    object.addEventListener('load', _ => {\r\n                                                        let svg = object.contentDocument;\r\n                                                        svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                        if (\r\n                                                            overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined &&\r\n                                                            overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                                .includes(parseInt(object.id.slice(3)))\r\n                                                        ) {\r\n                                                            this.tabulatorAnimation(object);\r\n                                                            object.classList.add('tabulator');\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        overallIndexes.push([i, tabulatorIndexes]);\r\n                                    }\r\n                                    this.changeSelectedInput();\r\n                                } else if (this.vocabulary[wi2]) {\r\n                                    this.currentWord = <InflectedWord>this.vocabulary[wi2];\r\n                                    let overallIndexes: [number, number[]][] = [];\r\n                                    let tabulatorStyle = false;\r\n                                    for (let i = 3; i < this.container.childElementCount; i++) {\r\n                                        let tabulatorIndexes: number[] = [];\r\n                                        let n = Math.floor(i / 3) - 1;\r\n                                        let singular = this.currentWord.singular;\r\n                                        let plural = this.currentWord.plural;\r\n                                        if (i % 3 === 1) {\r\n                                            this.container.children[i].innerHTML = '';\r\n                                            for (let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++) {\r\n                                                if (singular[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                    tabulatorStyle = !tabulatorStyle;\r\n                                                    ii += 4;\r\n                                                } else {\r\n                                                    let object = document.createElement('object');\r\n                                                    object.data = './keys/OG_T.svg';\r\n                                                    object.id = `key${ii}-inp${i}`;\r\n                                                    object.style.height = `100%`;\r\n                                                    this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                    if (tabulatorStyle) tabulatorIndexes.push(ii)\r\n\r\n                                                    object.addEventListener('load', _ => {\r\n                                                        let svg = object.contentDocument;\r\n                                                        svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                        if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) &&\r\n                                                            overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                                .includes(parseInt(object.id.slice(3)))\r\n                                                        ) {\r\n                                                            this.tabulatorAnimation(object);\r\n                                                            object.classList.add('tabulator');\r\n                                                        }\r\n                                                    })\r\n                                                }\r\n                                            }\r\n                                            overallIndexes.push([i, tabulatorIndexes]);\r\n                                        } else if (i % 3 === 2) {\r\n                                            this.container.children[i].innerHTML = '';\r\n                                            for (let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++) {\r\n                                                if (plural[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                    tabulatorStyle = !tabulatorStyle;\r\n                                                    ii += 4;\r\n                                                } else {\r\n                                                    let object = document.createElement('object');\r\n                                                    object.data = './keys/OG_T.svg';\r\n                                                    object.id = `key${ii}-inp${i}`;\r\n                                                    object.style.height = `100%`;\r\n                                                    this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                    if (tabulatorStyle) tabulatorIndexes.push(ii);\r\n\r\n                                                    object.addEventListener('load', _ => {\r\n                                                        let svg = object.contentDocument;\r\n                                                        svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                        if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) &&\r\n                                                            overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                                .includes(parseInt(object.id.slice(3)))\r\n                                                        ) {\r\n                                                            this.tabulatorAnimation(object);\r\n                                                            object.classList.add('tabulator');\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                            overallIndexes.push([i, tabulatorIndexes]);\r\n                                        }\r\n                                    }\r\n                                    this.changeSelectedInput();\r\n                                } else {\r\n                                    this.keys = 0;\r\n                                    this.currentWord = {\r\n                                        singular: this.empty(param),\r\n                                        plural: this.empty(param),\r\n                                        verb: param.includes('verb'),\r\n                                        probability: 1\r\n                                    };\r\n\r\n                                    for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                        if (i % 3 != 0) {\r\n                                            this.container.children[i].innerHTML = '';\r\n                                        }\r\n\r\n                                        this.container.children[i].classList.remove('selectedElement');\r\n                                    }\r\n                                    this.inputIndex = 4;\r\n                                    this.selectedInput = <HTMLDivElement>this.container.children[4];\r\n                                    this.tabCount = 0;\r\n                                    this.selectedInput.classList.add('selectedElement');\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    deletionMode = false;\r\n                    this.deletionButton.removeEventListener('click', deletionFunction);\r\n                    this.deletionButton.classList.remove('click');\r\n                    document.querySelectorAll('object').forEach(object => {\r\n                        if (object.contentDocument.getElementById('tspan7')) {\r\n                            this.deletionAnimation(object, 1, 'reverse');\r\n                        }\r\n                    });\r\n                    Array.from(document.getElementsByClassName('editable')).forEach((div: HTMLDivElement) => {\r\n                        div.classList.remove('redShadowDesign');\r\n                    });\r\n                }\r\n\r\n                this.deletionButton.addEventListener('mousemove', _ => {\r\n                    if (deletionMode) {\r\n                        return;\r\n                    }\r\n                    deletionMode = true;\r\n\r\n                    this.deletionAnimation(this.deletionButton, 2000, 'normal');\r\n                    let broken = false;\r\n                    this.container.querySelectorAll('object').forEach((object) => {\r\n                        if (object.contentDocument.getElementById('tspan7')) {\r\n                            this.deletionAnimation(object, 2000, 'normal');\r\n                        } else {\r\n                            broken = true;\r\n                            return;\r\n                        }\r\n                    });\r\n\r\n                    if (broken) {\r\n                        this.container.querySelectorAll('object').forEach((object) => {\r\n                            if (object.contentDocument.getElementById('tspan7')) {\r\n                                this.deletionAnimation(object, 1, 'reverse');\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    indicator = setTimeout(_ => {\r\n                        if (deletionMode) {\r\n                            this.deletionButton.addEventListener('click', deletionFunction);\r\n                            Array.from(document.getElementsByClassName('editable')).forEach((div: HTMLDivElement) => {\r\n                                div.classList.add('redShadowDesign');\r\n                            });\r\n                        }\r\n                    }, 2000);\r\n                });\r\n\r\n                this.deletionButton.addEventListener('mouseleave', _ => {\r\n                    clearTimeout(indicator);\r\n                    deletionMode = false;\r\n                    this.deletionAnimation(this.deletionButton, 1, 'reverse');\r\n                    this.container.querySelectorAll('object').forEach((object) => {\r\n                        if (object.contentDocument.getElementById('tspan7')) {\r\n                            this.deletionAnimation(object, 1, 'reverse');\r\n                        }\r\n                    });\r\n                    Array.from(document.getElementsByClassName('editable')).forEach((div: HTMLDivElement) => {\r\n                        div.classList.remove('redShadowDesign');\r\n                    });\r\n                    this.deletionButton.removeEventListener('click', deletionFunction);\r\n                });\r\n\r\n                document.querySelectorAll('.c').forEach((element: HTMLButtonElement) => {\r\n                    element.addEventListener('mousedown', _ => {\r\n                        element.classList.add('click');\r\n                        document.querySelectorAll('.editable').forEach((div: HTMLDivElement) => {\r\n                            div.classList.add('savedElement');\r\n                        });\r\n                    });\r\n\r\n                    element.addEventListener('mouseout', _ => {\r\n                        element.classList.remove('click');\r\n                        document.querySelectorAll('.editable').forEach((div: HTMLDivElement) => {\r\n                            div.classList.remove('savedElement');\r\n                        });\r\n                    });\r\n                });\r\n\r\n                this.buttonLeft.addEventListener('mouseup', _ => {\r\n                    console.log('left', this.vocabulary.map(w => w.singular[0]));\r\n                    if (this.tabMode) {\r\n                        this.cancelTabMode();\r\n                    }\r\n\r\n                    let vocab = this.vocabulary.slice(0, this.wordIndex);\r\n                    let wi = vocab.findLastIndex(w => w.verb === param.includes('verb'));\r\n\r\n                    if (this.vocabulary[wi]) {\r\n                        if (\r\n                            this.currentWord.singular.filter((value) => value === '').length === (param.includes('verb') ? 3 : 6) &&\r\n                            this.currentWord.plural.filter((value) => value === '').length === (param.includes('verb') ? 3 : 6) &&\r\n                            this.wordIndex === this.vocabulary.length\r\n                        ) {\r\n                            for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                this.container.children[i].classList.remove('savedElement');\r\n                                this.buttonLeft.classList.remove('click');\r\n                            }\r\n\r\n                            this.wordIndex = wi;\r\n                            this.currentWord = this.vocabulary[wi];\r\n                            let overallIndexes: [number, number[]][] = [];\r\n\r\n                            let tabulatorStyle = false;\r\n                            for (let i = 3; i < this.container.childElementCount; i++) {\r\n                                let tabulatorIndexes: number[] = [];\r\n                                let n = Math.floor(i / 3) - 1;\r\n                                let singular = this.currentWord.singular;\r\n                                let plural = this.currentWord.plural;\r\n                                if (i % 3 === 1) {\r\n                                    this.container.children[i].innerHTML = '';\r\n                                    for (let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++) {\r\n                                        if (singular[n].slice(ii, ii + 5) === '^tab^') {\r\n                                            tabulatorStyle = !tabulatorStyle;\r\n                                            ii += 4;\r\n                                        } else {\r\n                                            let object = document.createElement('object');\r\n                                            object.data = './keys/OG_T.svg';\r\n                                            object.id = `key${ii}-inp${i}`;\r\n                                            object.style.height = `100%`;\r\n                                            this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                            if (tabulatorStyle) tabulatorIndexes.push(ii)\r\n\r\n                                            object.addEventListener('load', _ => {\r\n                                                let svg = object.contentDocument;\r\n                                                svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                if (\r\n                                                    overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined &&\r\n                                                    overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1].includes(parseInt(object.id.slice(3)))\r\n                                                ) {\r\n                                                    this.tabulatorAnimation(object);\r\n                                                    object.classList.add('tabulator');\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                    overallIndexes.push([i, tabulatorIndexes]);\r\n                                } else if (i % 3 === 2) {\r\n                                    this.container.children[i].innerHTML = '';\r\n                                    for (let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++) {\r\n                                        if (plural[n].slice(ii, ii + 5) === '^tab^') {\r\n                                            tabulatorStyle = !tabulatorStyle;\r\n                                            ii += 4;\r\n                                        } else {\r\n                                            let object = document.createElement('object');\r\n                                            object.data = './keys/OG_T.svg';\r\n                                            object.id = `key${ii}-inp${i}`;\r\n                                            object.style.height = `100%`;\r\n                                            this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                            if (tabulatorStyle) tabulatorIndexes.push(ii);\r\n\r\n                                            object.addEventListener('load', _ => {\r\n                                                let svg = object.contentDocument;\r\n                                                svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                if (\r\n                                                    overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined &&\r\n                                                    overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                        .includes(parseInt(object.id.slice(3)))\r\n                                                ) {\r\n                                                    this.tabulatorAnimation(object);\r\n                                                    object.classList.add('tabulator');\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                                overallIndexes.push([i, tabulatorIndexes]);\r\n                            }\r\n                            this.changeSelectedInput();\r\n                        } else {\r\n                            this.vocabulary[this.wordIndex] = this.currentWord;\r\n\r\n                            const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\r\n                            transaction.onerror = _ => console.error(transaction.error);\r\n                            const objectStore = transaction.objectStore(`inflected vocabulary`);\r\n                            const req = objectStore.get(this.wordIndex);\r\n                            req.onerror = _ => console.error(req.error);\r\n                            req.onsuccess = _ => {\r\n                                for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                    this.container.children[i].classList.remove('savedElement');\r\n                                    this.buttonLeft.classList.remove('click');\r\n                                }\r\n\r\n                                const idontcare = objectStore.put(this.currentWord, this.wordIndex + 1);\r\n                                idontcare.onerror = _ => console.error(idontcare.error);\r\n\r\n                                this.wordIndex = wi;\r\n\r\n                                let tabulatorStyle = false;\r\n                                this.currentWord = this.vocabulary[wi];\r\n                                let overallIndexes: [number, number[]][] = [];\r\n                                for (let i = 3; i < this.container.childElementCount; i++) {\r\n                                    let tabulatorIndexes: number[] = [];\r\n                                    let n = Math.floor(i / 3) - 1;\r\n                                    let singular = this.currentWord.singular;\r\n                                    let plural = this.currentWord.plural;\r\n                                    if (i % 3 === 1) {\r\n                                        this.container.children[i].innerHTML = '';\r\n                                        for (let ii = 0; ii < singular[n].length; ii++) {\r\n                                            if (singular[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                tabulatorStyle = !tabulatorStyle;\r\n                                                ii += 4;\r\n                                            } else {\r\n                                                let object = document.createElement('object');\r\n                                                object.data = './keys/OG_T.svg';\r\n                                                object.id = `key${ii}-inp${i}`;\r\n                                                object.style.height = `100%`;\r\n                                                this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                if (tabulatorStyle) tabulatorIndexes.push(ii)\r\n\r\n                                                object.addEventListener('load', _ => {\r\n                                                    let svg = object.contentDocument;\r\n                                                    svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                    if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined &&\r\n                                                        overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                            .includes(parseInt(object.id.slice(3)))\r\n                                                    ) {\r\n                                                        this.tabulatorAnimation(object);\r\n                                                        object.classList.add('tabulator');\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                        overallIndexes.push([i, tabulatorIndexes]);\r\n                                    } else if (i % 3 === 2) {\r\n                                        this.container.children[i].innerHTML = '';\r\n                                        for (let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++) {\r\n                                            if (plural[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                tabulatorStyle = !tabulatorStyle;\r\n                                                ii += 4;\r\n                                            } else {\r\n                                                let object = document.createElement('object');\r\n                                                object.data = './keys/OG_T.svg';\r\n                                                object.id = `key${ii}-inp${i}`;\r\n                                                object.style.height = `100%`;\r\n                                                this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                if (tabulatorStyle) tabulatorIndexes.push(ii);\r\n\r\n                                                object.addEventListener('load', _ => {\r\n                                                    let svg = object.contentDocument;\r\n                                                    svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                    if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) != undefined &&\r\n                                                        overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                            .includes(parseInt(object.id.slice(3)))\r\n                                                    ) {\r\n                                                        this.tabulatorAnimation(object);\r\n                                                        object.classList.add('tabulator');\r\n                                                    }\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        overallIndexes.push([i, tabulatorIndexes]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log('left end', this.vocabulary.map(w => w.singular[0]));\r\n                });\r\n\r\n                this.buttonRight.addEventListener('mouseup', _ => {\r\n                    console.log('right', this.vocabulary.map(w => w.singular[0]));\r\n                    if (this.tabMode) {\r\n                        this.cancelTabMode();\r\n                    }\r\n\r\n                    let vocab = this.vocabulary.slice(this.wordIndex + 1);\r\n                    let wi = (vocab.findIndex(w => w.verb === param.includes('verb'))) >= 0 ? vocab.findIndex(w => w.verb === param.includes('verb')) + this.wordIndex + 1 : -1;\r\n\r\n                    if (!this.vocabulary[wi]) {\r\n                        console.log('!this.vocabulary[wi]');\r\n                        this.vocabulary[this.wordIndex] = this.currentWord;\r\n\r\n                        const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\r\n                        transaction.onerror = _ => console.error(transaction.error);\r\n                        const objectStore = transaction.objectStore(`inflected vocabulary`);\r\n                        const req = objectStore.put(this.currentWord, this.wordIndex + 1);\r\n                        req.onerror = _ => console.error(req.error)\r\n                        transaction.oncomplete = _ => {\r\n                            for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                this.container.children[i].classList.remove('savedElement');\r\n                                this.buttonRight.classList.remove('click');\r\n                            }\r\n\r\n                            this.wordIndex = this.vocabulary.length;\r\n                            this.keys = 0;\r\n                            this.currentWord = {\r\n                                singular: this.empty(param),\r\n                                plural: this.empty(param),\r\n                                verb: param.includes('verb'),\r\n                                probability: 1\r\n                            };\r\n\r\n                            for (let i = 3; i < this.container.childElementCount; i++) {\r\n                                if (i % 3 != 0) {\r\n                                    this.container.children[i].innerHTML = '';\r\n                                }\r\n\r\n                                this.container.children[i].classList.remove('selectedElement');\r\n                            }\r\n                            this.inputIndex = 4;\r\n                            this.selectedInput = <HTMLDivElement>this.container.children[4];\r\n                            this.tabCount = 0;\r\n                            this.selectedInput.classList.add('selectedElement');\r\n                        }\r\n                    } else {\r\n                        console.log('this.vocabulary[wi]');\r\n                        this.vocabulary[this.wordIndex] = this.currentWord;\r\n\r\n                        for (let i = 0; i < this.container.childElementCount; i++) {\r\n                            this.container.children[i].classList.remove('savedElement');\r\n                            this.buttonRight.classList.remove('click');\r\n                        }\r\n\r\n                        const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\r\n                        transaction.onerror = _ => console.error(transaction.error);\r\n                        const objectStore = transaction.objectStore(`inflected vocabulary`);\r\n                        const req = objectStore.get(this.wordIndex);\r\n                        req.onerror = _ => console.error(req.error);\r\n                        req.onsuccess = _ => {\r\n                            const idontcare = objectStore.put(this.currentWord, this.wordIndex + 1);\r\n                            idontcare.onerror = _ => console.error(idontcare.error);\r\n\r\n                            this.wordIndex = wi;\r\n                            this.currentWord = <InflectedWord>this.vocabulary[wi];\r\n                            let overallIndexes: [number, number[]][] = [];\r\n                            let tabulatorStyle = false;\r\n                            for (let i = 3; i < this.container.childElementCount; i++) {\r\n                                let tabulatorIndexes: number[] = [];\r\n                                let n = Math.floor(i / 3) - 1;\r\n                                let singular = this.currentWord.singular;\r\n                                let plural = this.currentWord.plural;\r\n                                if (i % 3 === 1) {\r\n                                    this.container.children[i].innerHTML = '';\r\n                                    for (let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++) {\r\n                                        if (singular[n].slice(ii, ii + 5) === '^tab^') {\r\n                                            tabulatorStyle = !tabulatorStyle;\r\n                                            ii += 4;\r\n                                        } else {\r\n                                            let object = document.createElement('object');\r\n                                            object.data = './keys/OG_T.svg';\r\n                                            object.id = `key${ii}-inp${i}`;\r\n                                            object.style.height = `100%`;\r\n                                            this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                            if (tabulatorStyle) tabulatorIndexes.push(ii)\r\n\r\n                                            object.addEventListener('load', _ => {\r\n                                                let svg = object.contentDocument;\r\n                                                svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) &&\r\n                                                    overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                        .includes(parseInt(object.id.slice(3)))\r\n                                                ) {\r\n                                                    this.tabulatorAnimation(object);\r\n                                                    object.classList.add('tabulator');\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                    overallIndexes.push([i, tabulatorIndexes]);\r\n                                } else if (i % 3 === 2) {\r\n                                    this.container.children[i].innerHTML = '';\r\n                                    for (let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++) {\r\n                                        if (plural[n].slice(ii, ii + 5) === '^tab^') {\r\n                                            tabulatorStyle = !tabulatorStyle;\r\n                                            ii += 4;\r\n                                        } else {\r\n                                            let object = document.createElement('object');\r\n                                            object.data = './keys/OG_T.svg';\r\n                                            object.id = `key${ii}-inp${i}`;\r\n                                            object.style.height = `100%`;\r\n                                            this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                            if (tabulatorStyle) tabulatorIndexes.push(ii);\r\n\r\n                                            object.addEventListener('load', _ => {\r\n                                                let svg = object.contentDocument;\r\n                                                svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) &&\r\n                                                    overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                        .includes(parseInt(object.id.slice(3)))\r\n                                                ) {\r\n                                                    this.tabulatorAnimation(object);\r\n                                                    object.classList.add('tabulator');\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    overallIndexes.push([i, tabulatorIndexes]);\r\n                                }\r\n                                this.changeSelectedInput();\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log('right end', this.vocabulary.map(w => w.singular[0]));\r\n                });\r\n\r\n                this.keydownFunction = (event: KeyboardEvent) => {\r\n                    let forbiddenCharacters = ['<', '´', '`', '^'];\r\n                    if (event.key === 'ArrowRight') {\r\n                        if (this.tabMode) {\r\n                            this.cancelTabMode();\r\n                        }\r\n\r\n                        if (this.inputIndex < 20 - this.v) {\r\n                            this.inputIndex++;\r\n                            if (this.inputIndex % 3 === 0) {\r\n                                this.inputIndex++;\r\n                            }\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        }\r\n\r\n                        return;\r\n                    } else if (event.key === 'ArrowLeft') {\r\n                        if (this.tabMode) {\r\n                            this.cancelTabMode();\r\n                        }\r\n\r\n                        if (this.inputIndex > 4) {\r\n                            this.inputIndex--;\r\n                            if (this.inputIndex % 3 === 0) {\r\n                                this.inputIndex--;\r\n                            }\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        }\r\n                        return;\r\n                    } else if (event.key === 'ArrowDown' || event.key === 'Enter') {\r\n                        if (this.tabMode) {\r\n                            this.cancelTabMode();\r\n                            if (this.inputIndex === 19) {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (this.inputIndex < 18 - this.v) {\r\n                            this.inputIndex += 3;\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        } else if (event.key === 'Enter' && this.inputIndex === 19 - this.v) {\r\n                            this.inputIndex = 5;\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        } else if (event.key === 'Enter' && this.inputIndex === 20 - this.v) {\r\n                            document.querySelectorAll('.editable').forEach((element: HTMLDivElement) => {\r\n                                element.classList.add('savedElement');\r\n                            });\r\n\r\n                            if (this.enterMode) {\r\n                                let vocab = this.vocabulary.slice(this.wordIndex + 1);\r\n                                let wi = vocab.findIndex(w => w.verb === param.includes('verb'));\r\n\r\n                                if (!this.vocabulary[wi]) {\r\n                                    this.vocabulary[this.wordIndex] = this.currentWord;\r\n\r\n                                    const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\r\n                                    transaction.onerror = _ => console.error(transaction.error);\r\n                                    const objectStore = transaction.objectStore(`inflected vocabulary`);\r\n                                    const req = objectStore.put(this.currentWord, this.wordIndex + 1);\r\n                                    req.onerror = _ => console.error(req.error)\r\n                                    transaction.oncomplete = _ => {\r\n                                        for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                            this.container.children[i].classList.remove('savedElement');\r\n                                        }\r\n\r\n                                        this.wordIndex++;\r\n                                        this.keys = 0;\r\n                                        this.currentWord = {\r\n                                            singular: this.empty(param),\r\n                                            plural: this.empty(param),\r\n                                            verb: param.includes('verb'),\r\n                                            probability: 1\r\n                                        };\r\n\r\n                                        for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                            if (i % 3 != 0) {\r\n                                                this.container.children[i].innerHTML = '';\r\n                                            }\r\n\r\n                                            this.container.children[i].classList.remove('selectedElement');\r\n                                        }\r\n                                        this.inputIndex = 4;\r\n                                        this.selectedInput = <HTMLDivElement>this.container.children[4];\r\n                                        this.tabCount = 0;\r\n                                        this.selectedInput.classList.add('selectedElement');\r\n                                    }\r\n                                } else {\r\n                                    this.vocabulary[this.wordIndex] = this.currentWord;\r\n\r\n                                    for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                        this.container.children[i].classList.remove('savedElement');\r\n                                    }\r\n\r\n                                    const transaction = this.database.transaction(`inflected vocabulary`, 'readwrite');\r\n                                    transaction.onerror = _ => console.error(transaction.error);\r\n                                    const objectStore = transaction.objectStore(`inflected vocabulary`);\r\n                                    const req = objectStore.get(this.wordIndex);\r\n                                    req.onerror = _ => console.error(req.error);\r\n                                    req.onsuccess = _ => {\r\n                                        const idontcare = objectStore.put(this.currentWord, this.wordIndex + 1);\r\n                                        idontcare.onerror = _ => console.log(idontcare.error);\r\n\r\n                                        this.wordIndex = wi;\r\n                                        this.currentWord = <InflectedWord>this.vocabulary[wi];\r\n                                        let overallIndexes: [number, number[]][] = [];\r\n                                        let tabulatorStyle = false;\r\n                                        for (let i = 3; i < this.container.childElementCount; i++) {\r\n                                            let tabulatorIndexes: number[] = [];\r\n                                            let n = Math.floor(i / 3) - 1;\r\n                                            let singular = this.currentWord.singular;\r\n                                            let plural = this.currentWord.plural;\r\n                                            if (i % 3 === 1) {\r\n                                                this.container.children[i].innerHTML = '';\r\n                                                for (let ii = 0; ii < singular[Math.floor(i / 3) - 1].length; ii++) {\r\n                                                    if (singular[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                        tabulatorStyle = !tabulatorStyle;\r\n                                                        ii += 4;\r\n                                                    } else {\r\n                                                        let object = document.createElement('object');\r\n                                                        object.data = './keys/OG_T.svg';\r\n                                                        object.id = `key${ii}-inp${i}`;\r\n                                                        object.style.height = `100%`;\r\n                                                        this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                        if (tabulatorStyle) tabulatorIndexes.push(ii)\r\n\r\n                                                        object.addEventListener('load', _ => {\r\n                                                            let svg = object.contentDocument;\r\n                                                            svg.querySelector('#tspan7').innerHTML = singular[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                            if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) &&\r\n                                                                overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                                    .includes(parseInt(object.id.slice(3)))\r\n                                                            ) {\r\n                                                                this.tabulatorAnimation(object);\r\n                                                                object.classList.add('tabulator');\r\n                                                            }\r\n                                                        })\r\n                                                    }\r\n                                                }\r\n                                                overallIndexes.push([i, tabulatorIndexes]);\r\n                                            } else if (i % 3 === 2) {\r\n                                                this.container.children[i].innerHTML = '';\r\n                                                for (let ii = 0; ii < plural[Math.floor(i / 3) - 1].length; ii++) {\r\n                                                    if (plural[n].slice(ii, ii + 5) === '^tab^') {\r\n                                                        tabulatorStyle = !tabulatorStyle;\r\n                                                        ii += 4;\r\n                                                    } else {\r\n                                                        let object = document.createElement('object');\r\n                                                        object.data = './keys/OG_T.svg';\r\n                                                        object.id = `key${ii}-inp${i}`;\r\n                                                        object.style.height = `100%`;\r\n                                                        this.container.children[i].insertAdjacentElement('beforeend', object);\r\n                                                        if (tabulatorStyle) tabulatorIndexes.push(ii);\r\n\r\n                                                        object.addEventListener('load', _ => {\r\n                                                            let svg = object.contentDocument;\r\n                                                            svg.querySelector('#tspan7').innerHTML = plural[Math.floor(i / 3) - 1].charAt(ii);\r\n                                                            if (overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3))) &&\r\n                                                                overallIndexes.find(indexes => indexes[0] === parseInt(object.parentElement.id.slice(3)))[1]\r\n                                                                    .includes(parseInt(object.id.slice(3)))\r\n                                                            ) {\r\n                                                                this.tabulatorAnimation(object);\r\n                                                                object.classList.add('tabulator');\r\n                                                            }\r\n                                                        });\r\n                                                    }\r\n                                                }\r\n                                                overallIndexes.push([i, tabulatorIndexes]);\r\n                                            }\r\n                                            this.changeSelectedInput();\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                this.enterMode = false;\r\n                            } else {\r\n                                this.enterMode = true;\r\n                            }\r\n\r\n                            const transaction = this.database.transaction('inflected vocabulary', 'readwrite');\r\n                            const objectStore = transaction.objectStore('inflected vocabulary');\r\n                            const req = objectStore.put(this.currentWord, this.wordIndex + 1);\r\n                            req.onerror = _ => console.error(req.error);\r\n                            setTimeout(_ => {\r\n                                for (let i = 0; i < this.container.childElementCount; i++) {\r\n                                    this.container.children[i].classList.remove('savedElement');\r\n                                }\r\n                            }, 250);\r\n                        }\r\n\r\n                        return;\r\n                    } else if (event.key === 'ArrowUp') {\r\n                        if (this.tabMode) {\r\n                            this.cancelTabMode();\r\n                        }\r\n                        if (this.inputIndex > 6) {\r\n                            this.inputIndex -= 3;\r\n\r\n                            this.changeSelectedInput();\r\n                            this.keys = this.selectedInput.childElementCount;\r\n                        }\r\n\r\n                        return;\r\n                    } else if (event.key === 'Backspace') {\r\n                        if (this.selectedInput.lastElementChild) {\r\n                            this.selectedInput.lastElementChild.remove();\r\n\r\n                            let array = <string[]>Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                            let n = Math.floor(this.inputIndex / 3) - 1;\r\n                            if (array[n].slice(-5) === '^tab^') {\r\n                                array[n] = array[n].slice(0, array[n].length - 6);\r\n                                if (this.tabCount > 1) this.tabCount--;\r\n                                this.tabMode = !this.tabMode;\r\n                                this.selectedInput.classList.add('tab');\r\n                                if (!this.tabMode) {\r\n                                    this.selectedInput.classList.remove('tab');\r\n                                }\r\n                            } else {\r\n                                array[n] = array[n].slice(0, array[n].length - 1);\r\n                            }\r\n                            Object.defineProperty(\r\n                                this.currentWord,\r\n                                Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                                { value: array }\r\n                            );\r\n                            this.keys--;\r\n\r\n                            if (this.tabMode) {\r\n                                this.tabulator = this.tabulator.slice(0, this.tabulator.length - 1);\r\n                            }\r\n                        } else if (this.tabMode) {\r\n                            this.cancelTabMode();\r\n                        }\r\n\r\n                        return;\r\n                    } else if (event.key === 'Tab') {\r\n                        if (!this.tabMode) {\r\n                            if (this.tabCount >= 2) {\r\n                                let array = <string[]>Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                                let n = Math.floor(this.inputIndex / 3) - 1;\r\n                                let index: number;\r\n                                while (array[n].search('\\\\^tab\\\\^') !== -1) {\r\n                                    let c = array[n].search('\\\\^tab\\\\^');\r\n                                    if (index === undefined) index = c;\r\n                                    array[n] = array[n].slice(0, c) + array[n].slice(c + 5, array[n].length);\r\n                                }\r\n\r\n                                array[n] = array[n].slice(0, index) + '^tab^' + array[n].slice(index, array[n].length);\r\n                                Object.defineProperty(\r\n                                    this.currentWord,\r\n                                    Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                                    { value: array }\r\n                                );\r\n\r\n                                let tabulatorStyle = false;\r\n                                for (let i = 0; i < array[n].length; i++) {\r\n                                    if (array[n].slice(i, i + 5) === '^tab^') {\r\n                                        tabulatorStyle = !tabulatorStyle;\r\n                                        i += 4;\r\n                                    } else if (this.selectedInput.children[i > index ? i - 5 : i]) {\r\n                                        let object = <HTMLObjectElement>this.selectedInput.children[i > index ? i - 5 : i];\r\n                                        let svg = object.contentDocument;\r\n                                        svg.querySelector('#tspan7').innerHTML = array[n].charAt(i);\r\n                                        if (tabulatorStyle) {\r\n                                            this.tabulatorAnimation(object);\r\n                                            object.classList.add('tabulator');\r\n                                        } else {\r\n                                            object.classList.remove('tabulator');\r\n                                        }\r\n                                        this.selectedInput.children[i]\r\n                                    }\r\n                                }\r\n                                this.tabulator = array[n].slice(index + 5, array[n].length);\r\n                                this.tabCount = 1;\r\n                                this.tabMode = true;\r\n                                this.selectedInput.classList.add('tab');\r\n                            } else {\r\n                                this.tabMode = true;\r\n                                this.selectedInput.classList.add('tab');\r\n                                let array = <string[]>Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                                array[Math.floor(this.inputIndex / 3) - 1] += \"^tab^\";\r\n                                Object.defineProperty(\r\n                                    this.currentWord,\r\n                                    Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                                    { value: array }\r\n                                );\r\n                                this.tabCount++;\r\n                            }\r\n                        } else if (this.tabulator.length > 0) {\r\n                            if (Object.values(this.currentWord)[this.inputIndex % 3 - 1][Math.floor(this.inputIndex / 3) - 1].slice(-5) != '^tab^') {\r\n                                this.tabMode = false;\r\n                                this.selectedInput.classList.remove('tab');\r\n                                let array = <string[]>Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                                array[Math.floor(this.inputIndex / 3) - 1] += \"^tab^\";\r\n                                Object.defineProperty(\r\n                                    this.currentWord,\r\n                                    Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                                    { value: array }\r\n                                );\r\n                                this.tabCount++;\r\n                            } else {\r\n                                let array = <string[]>Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                                let n = Math.floor(this.inputIndex / 3) - 1\r\n                                array[n] += this.tabulator + \"^tab^\";\r\n                                let index = array[n].search(this.tabulator);\r\n                                if (index === -1) { index = 0; }\r\n                                if (\r\n                                    this.keys + this.tabulator.length <=\r\n                                    Math.floor(this.selectedInput.clientWidth / (this.selectedInput.clientHeight - parseFloat(this.selectedInput.style.padding)))\r\n                                ) {\r\n                                    for (let i = 0; i < this.tabulator.length; i++) {\r\n                                        let object = document.createElement('object');\r\n                                        object.data = './keys/OG_T.svg';\r\n                                        object.id = `key${this.keys}-inp${this.inputIndex}`;\r\n                                        object.style.height = `100%`;\r\n                                        this.selectedInput.insertAdjacentElement('beforeend', object);\r\n                                        object.hidden = true;\r\n                                        object.addEventListener('load', _ => {\r\n                                            object.hidden = false;\r\n                                            this.tabulatorAnimation(object);\r\n                                            object.classList.add('tabulator');\r\n                                            let svg = object.contentDocument;\r\n                                            svg.querySelector('#tspan7').innerHTML = this.tabulator.charAt(i);\r\n                                            if (i === this.tabulator.length - 1) {\r\n                                            }\r\n                                        });\r\n                                        this.keys++;\r\n                                    }\r\n                                } else {\r\n                                    for (let ii = 0; ii < this.keys; ii++) {\r\n                                        this.failureAnimation(<HTMLObjectElement>this.selectedInput.children[ii]);\r\n                                    }\r\n                                    return;\r\n                                }\r\n\r\n\r\n                                Object.defineProperty(\r\n                                    this.currentWord,\r\n                                    Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                                    { value: array }\r\n                                );\r\n                                this.tabMode = false;\r\n                                this.tabCount++;\r\n                                this.selectedInput.classList.remove('tab');\r\n                            }\r\n                        } else {\r\n                            this.tabCount = 0;\r\n                            this.cancelTabMode();\r\n                        }\r\n                        return;\r\n                    } else if (forbiddenCharacters.includes(event.key) || event.key.length > 1) {\r\n                        return;\r\n                    }\r\n                    this.enterMode = false;\r\n\r\n                    let object = document.createElement('object');\r\n                    object.data = './keys/OG_T.svg';\r\n                    object.id = `key${this.keys}-inp${this.inputIndex}`;\r\n                    object.style.height = `100%`;\r\n                    this.selectedInput.insertAdjacentElement('beforeend', object);\r\n                    let width = object.clientHeight;\r\n                    object.hidden = true;\r\n\r\n                    object.addEventListener('load', _ => {\r\n                        if (this.keys + 1 >= Math.floor(this.selectedInput.clientWidth / width)) {\r\n                            object.remove();\r\n                            for (let i = 0; i < this.keys; i++) {\r\n                                this.failureAnimation(<HTMLObjectElement>this.selectedInput.children[i]);\r\n                            }\r\n                            return;\r\n                        }\r\n                        object.hidden = false;\r\n\r\n                        let svg = object.contentDocument;\r\n                        svg.querySelector('#tspan7').innerHTML = event.key.charAt(0);\r\n\r\n                        let n = Math.floor(this.inputIndex / 3) - 1\r\n                        let array = Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n                        array[n] += event.key;\r\n                        Object.defineProperty(\r\n                            this.currentWord,\r\n                            Object.keys(this.currentWord)[this.inputIndex % 3 - 1],\r\n                            { value: array }\r\n                        );\r\n\r\n                        if (this.tabMode) {\r\n                            if (array[n].slice(-6, -1) === '^tab^') {\r\n                                this.tabulator = '';\r\n                            }\r\n                            this.tabulator += event.key;\r\n                            this.tabulatorAnimation(object);\r\n                            object.classList.add('tabulator');\r\n                        } else {\r\n                            this.idleAnimation(object);\r\n                        }\r\n\r\n                        this.keys++;\r\n                    });\r\n                }\r\n\r\n                document.addEventListener('keydown', this.keydownFunction);\r\n\r\n                window.onkeyup = event => {\r\n                    if (event.key === 'Tab') {\r\n                        this.container.focus();\r\n                    }\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    empty(param: Parameter): [string, string, string] | [string, string, string, string, string, string] {\r\n        let l = param.includes('verb') ? 3 : 6;\r\n        let array = [];\r\n        for (let i = 0; i < l; i++) {\r\n            array.push('');\r\n        }\r\n        return <[string, string, string] | [string, string, string, string, string, string]>array;\r\n    }\r\n\r\n    changeSelectedInput(): void {\r\n        document.querySelectorAll('.selectedElement').forEach(elem => elem.classList.remove('selectedElement'));\r\n        this.selectedInput = <HTMLDivElement>document.getElementById(`div${this.inputIndex}`);\r\n        let word = <string>Object.values(this.currentWord)[this.inputIndex % 3 - 1][(Math.floor(this.inputIndex / 3) - 1)];\r\n        let regex = new RegExp('\\\\^tab\\\\^', 'g');\r\n        let matches = word.match(regex);\r\n        this.tabCount = matches ? matches.length : 0;\r\n        if (!matches ? false : matches.length % 2 === 0) {\r\n            this.selectedInput.classList.remove('tab');\r\n        }\r\n        this.selectedInput.classList.add('selectedElement');\r\n    }\r\n\r\n    cancelTabMode(): void {\r\n        let array = <[string, string, string, string, string, string]>Object.values(this.currentWord)[this.inputIndex % 3 - 1];\r\n        let n = Math.floor(this.inputIndex / 3) - 1;\r\n        if (array[n].includes('^tab^')) {\r\n            let start_end: number[] = [];\r\n            while (array[n].search('\\\\^tab\\\\^') >= 0) {\r\n                let c = array[n].search('\\\\^tab\\\\^');\r\n                array[n] = array[n].slice(0, c) + array[n].slice(c + 5, array[n].length);\r\n                start_end.push(c);\r\n            }\r\n\r\n            if (start_end.length === 1) {\r\n                start_end.push(array[n].length);\r\n            }\r\n            let tab = array[n].slice(start_end[0], start_end[1]);\r\n\r\n            for (let i = 0; i < tab.length; i++) {\r\n                this.selectedInput.children[start_end[0]].remove();\r\n            }\r\n            array[n] = array[n].slice(0, start_end[0]) + array[n].slice(start_end[1], array[n].length);\r\n            this.keys -= tab.length;\r\n        }\r\n        this.tabMode = false;\r\n        this.selectedInput.classList.remove('tab');\r\n    }\r\n\r\n    findMostUsedTabulator(inflectedWord: InflectedWord): string {\r\n        if (inflectedWord.singular) {\r\n            let tabs =\r\n                inflectedWord.singular.map(word => {\r\n                    if (word.includes('^tab^')) {\r\n                        let w = word;\r\n                        let start: number;\r\n                        let end = w.length;\r\n                        while (w.includes('^tab^')) {\r\n                            let index = w.search('\\\\^tab\\\\^');\r\n                            w = w.slice(0, index) + w.slice(index + 5, end);\r\n                            if (start === undefined) {\r\n                                start = index;\r\n                            } else {\r\n                                end = index;\r\n                            }\r\n                        }\r\n                        return w.slice(start ? start : 0, end);\r\n                    }\r\n                }).concat(\r\n                    inflectedWord.plural.map(word => {\r\n                        if (word.includes('^tab^')) {\r\n                            let w = word;\r\n                            let start: number;\r\n                            let end = w.length;\r\n                            while (w.includes('^tab^')) {\r\n                                let index = w.search('\\\\^tab\\\\^');\r\n                                w = w.slice(0, index) + w.slice(index + 5, end);\r\n                                if (start === undefined) {\r\n                                    start = index;\r\n                                } else {\r\n                                    end = index;\r\n                                }\r\n                            }\r\n                            return w.slice(start ? start : 0, end);\r\n                        }\r\n                    })\r\n                ).filter(word => word != undefined);\r\n\r\n            let checkedTabs: [string, number][] = [];\r\n            tabs.forEach((tab) => {\r\n                if (!checkedTabs.map(t => t[0]).includes(tab)) {\r\n                    checkedTabs.push([tab, 1]);\r\n                } else {\r\n                    let i = checkedTabs.findIndex(t => t[0] === tab);\r\n                    checkedTabs[i] = [tab, checkedTabs[i][1] + 1];\r\n                }\r\n            });\r\n\r\n            for (let i = 0; i < checkedTabs.length; i++) {\r\n                checkedTabs.sort((a, b) => b[1] - a[1]);\r\n            }\r\n\r\n            return checkedTabs.length > 0 ? checkedTabs[0][0] : undefined;\r\n        } else return undefined;\r\n    }\r\n\r\n    startNewTrainingRound(param: Parameter): void {\r\n        let vocab = this.vocabulary.filter(w => w.verb === param.includes('verb'));\r\n        if (vocab.length === 0) {\r\n            setTimeout(_ => alert(`Keine ${param.includes('verb') ? 'Konjugationen' : 'Deklinationen'}!`), 250);\r\n            return;\r\n        } else if (vocab.filter(w => !isEmpty(w)).length === 0) {\r\n            setTimeout(_ => alert(`Nur leere ${param.includes('verb') ? 'Konjugationen' : 'Deklinationen'}!`), 250);\r\n            return;\r\n        }\r\n\r\n        function isEmpty(w: InflectedWord) {\r\n            return w.singular.filter(s => s.trim() === '').length === (param.includes('verb') ? 6 : 3) &&\r\n                w.plural.filter(p => p.trim() === '').length === (param.includes('verb') ? 6 : 3);\r\n        }\r\n\r\n        this.round++;\r\n        let overallProbabilty = 0;\r\n        vocab.forEach(word => { if (!isEmpty(word)) overallProbabilty += word.probability });\r\n\r\n        let randomNumber = Math.floor(Math.random() * overallProbabilty * 10) / 10;\r\n        let lowestDifference: number;\r\n        let lastProbability = 0;\r\n        this.failures = 0;\r\n\r\n        this.vocabulary.forEach((word, i) => {\r\n            if (!isEmpty(word) && word.verb === param.includes('verb')) {\r\n                if (lowestDifference === undefined) {\r\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\r\n                    this.currentWord = word;\r\n                    this.currentWordIndex = i;\r\n                } else if (Math.abs(randomNumber - (lastProbability + word.probability)) < lowestDifference) {\r\n                    lowestDifference = Math.abs(randomNumber - (lastProbability + word.probability));\r\n                    this.currentWordIndex = i;\r\n                    this.currentWord = word;\r\n                }\r\n                lastProbability += word.probability;\r\n            }\r\n        });\r\n\r\n        this.tabulator = this.findMostUsedTabulator(this.currentWord);\r\n        document.querySelectorAll('.editable').forEach(div => {\r\n            div.innerHTML = '';\r\n            div.classList.remove('redShadowDesign');\r\n            div.classList.remove('greenShadowDesign');\r\n            div.classList.remove('known-case');\r\n            div.classList.add('shadowDesign');\r\n        });\r\n\r\n        let knownCase: string;\r\n        let rn: number;\r\n        let v = this.v / 3;\r\n        do {\r\n            rn = Math.floor(Math.random() * (param.includes('verb') ? 6 : 12));\r\n            knownCase = Object.values(this.vocabulary[this.currentWordIndex])[rn > 5 - v ? 1 : 0][rn > 5 - v ? rn - 6 + v : rn];\r\n        } while (knownCase === '');\r\n\r\n        while (knownCase.includes('^tab^')) {\r\n            let index = knownCase.search('\\\\^tab\\\\^');\r\n            knownCase = knownCase.slice(0, index) + knownCase.slice(index + 5, knownCase.length);\r\n        }\r\n\r\n        let specificationDiv = document.getElementById(`div${rn > 5 - v ? 2 + (rn - 5 + v) * 3 : 1 + (rn + 1) * 3}`);\r\n        specificationDiv.classList.add('known-case');\r\n        specificationDiv.innerHTML = `<span>${knownCase}</span>`;\r\n\r\n        let array = this.empty(param);\r\n        array[rn > 5 - v ? rn - 6 + v : rn] = knownCase;\r\n        this.currentWord = {\r\n            singular: rn <= 5 - v ? array : this.empty(param),\r\n            plural: rn > 5 - v ? array : this.empty(param),\r\n            verb: param.includes('verb'),\r\n            probability: this.currentWord.probability\r\n        };\r\n\r\n        this.result = {\r\n            singular: param.includes('verb') ? [undefined, undefined, undefined] : [undefined, undefined, undefined, undefined, undefined, undefined],\r\n            plural: param.includes('verb') ? [undefined, undefined, undefined] : [undefined, undefined, undefined, undefined, undefined, undefined]\r\n        }\r\n    }\r\n\r\n    compare(string1: string, string2: string): boolean {\r\n        while (string1.includes('^tab^')) {\r\n            let index = string1.search('\\\\^tab\\\\^');\r\n            string1 = string1.slice(0, index) + string1.slice(index + 5, string1.length);\r\n        }\r\n\r\n        while (string2.includes('^tab^')) {\r\n            let index = string2.search('\\\\^tab\\\\^');\r\n            string2 = string2.slice(0, index) + string2.slice(index + 5, string2.length);\r\n        }\r\n        return string1 === string2;\r\n    }\r\n\r\n    compareObjects(obj1: InflectedWord, obj2: InflectedWord): boolean {\r\n        let object1 = JSON.parse(JSON.stringify(obj1));\r\n        let object2 = JSON.parse(JSON.stringify(obj2));\r\n\r\n        object1.singular.forEach((word, i) => {\r\n            while (word.includes('^tab^')) {\r\n                let index = word.search('\\\\^tab\\\\^');\r\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\r\n            }\r\n            object1.singular[i] = word;\r\n        });\r\n\r\n        object1.plural.forEach((word, i) => {\r\n            while (word.includes('^tab^')) {\r\n                let index = word.search('\\\\^tab\\\\^');\r\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\r\n            }\r\n            object1.plural[i] = word;\r\n        });\r\n\r\n        object2.singular.forEach((word, i) => {\r\n            while (word.includes('^tab^')) {\r\n                let index = word.search('\\\\^tab\\\\^');\r\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\r\n            }\r\n            object2.singular[i] = word;\r\n        });\r\n\r\n        object2.plural.forEach((word, i) => {\r\n            while (word.includes('^tab^')) {\r\n                let index = word.search('\\\\^tab\\\\^');\r\n                word = word.slice(0, index) + word.slice(index + 5, word.length);\r\n            }\r\n            object2.plural[i] = word;\r\n        });\r\n\r\n        return Object.values(object1).slice(0, 3).toLocaleString() === Object.values(object2).slice(0, 3).toLocaleString();\r\n    }\r\n\r\n    failureAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: Keyframe[] = [\r\n            { stroke: this.badColor, offset: 0.025 },\r\n\r\n            { rotate: \"10deg z\", offset: 0.25 },\r\n\r\n            { rotate: \"0deg z\", offset: 0.5 },\r\n\r\n            { rotate: \"-10deg z\", offset: 0.75, stroke: this.badColor },\r\n\r\n            { stroke: \"#eeeeeeff\", offset: 0.925 },\r\n\r\n            { rotate: \"0deg z\", offset: 1 }\r\n        ];\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 500\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    idleAnimation(object: HTMLObjectElement): void {\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#8f8f8f', '#fff', '#eeeeeeff'],\r\n            offset: [0, 1]\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 250\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    tabulatorAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#eeeeeeff', this.badColor === 'rgb(186, 2, 70)' ? '#4400ff' : 'rgb(211, 0, 0)'],\r\n            offset: [0, 1]\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 250,\r\n            fill: 'forwards'\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    successAnimation(object: HTMLObjectElement): void {\r\n        if (!object) {\r\n            return;\r\n        }\r\n\r\n        let svg = object.contentDocument;\r\n        let rect = svg.querySelector('#mainRect');\r\n        let text = svg.querySelector('#text7');\r\n        let animationKeyframes: PropertyIndexedKeyframes = {\r\n            stroke: ['#eeeeeeff', '#08a000', '#eeeeeeff'],\r\n            offset: [0, 1]\r\n        }\r\n\r\n        let animationOptions: KeyframeAnimationOptions = {\r\n            duration: 500\r\n        }\r\n\r\n        rect.animate(animationKeyframes, animationOptions);\r\n        text.animate(animationKeyframes, animationOptions);\r\n    }\r\n\r\n    deletionAnimation(element: Element, duration: number, direction: PlaybackDirection): void {\r\n        if (element.tagName === 'OBJECT') {\r\n            let object = <HTMLObjectElement>element;\r\n            let svg = object.contentDocument;\r\n            let rect = svg.querySelector('#mainRect');\r\n            let text = svg.querySelector('#text7');\r\n            let animationKeyframes: PropertyIndexedKeyframes = {\r\n                stroke: [object.classList.contains('tabulator') ? (this.badColor === 'rgb(186, 2, 70)' ? '#4400ff' : 'rgb(211, 0, 0)') : '#eeeeeeff', this.badColor],\r\n                offset: [0, 1]\r\n            }\r\n\r\n            let animationOptions: KeyframeAnimationOptions = {\r\n                duration: duration,  \r\n                fill: 'forwards',\r\n                direction: direction\r\n            }\r\n\r\n            rect.animate(animationKeyframes, animationOptions);\r\n            text.animate(animationKeyframes, animationOptions);\r\n        } else if (element.tagName === 'BUTTON') {\r\n            let animationKeyframes: PropertyIndexedKeyframes = {\r\n                backgroundColor: [this.badColor === 'rgb(186, 2, 70)' ? '#ff0000' : this.badColor, this.badColor === 'rgb(186, 2, 70)' ? '#ba0303' : '#ad0668'],\r\n                boxShadow: [`0 0 0 0 ${this.badColor === 'rgb(186, 2, 70)' ? '#ba0303' : '#ad0668'}`, `0 0 1vh 1vh ${this.badColor === 'rgb(186, 2, 70)' ? '#ff0000' : this.badColor}`],\r\n                color: ['#ffffff', '#eeffff'],\r\n                border: ['none', 'none',],\r\n                offset: [0, 1]\r\n            }\r\n\r\n            let animationOptions: KeyframeAnimationOptions = {\r\n                duration: duration,\r\n                fill: 'forwards',\r\n                direction: direction\r\n            }\r\n\r\n            element.animate(animationKeyframes, animationOptions);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ntype Parameter = 'nouns' | 'verbs' | 'add nouns' | 'add verbs';\r\n\r\nexport interface InflectedWord {\r\n    singular: [string, string, string, string, string, string] | [string, string, string];\r\n    plural: [string, string, string, string, string, string] | [string, string, string];\r\n    verb: boolean;\r\n    probability: number;\r\n}"],"names":["$543d6d2a56ed7d8d$export$331ff980f0d45cff","id","c","width","height","div","document","createElement","classList","add","style","$543d6d2a56ed7d8d$export$abeb1bd8b6f9168","constructor","vocabulary","wordIndex","enterMode","request","window","indexedDB","open","addEventListener","_","console","error","database","result","transaction","onerror","req","objectStore","getAll","onsuccess","length","event","db","createObjectStore","autoIncrement","createIndex","unique","objectStore2","notImportantRequest_____yet","objectStoreNames","contains","oncomplete","log","modifyDocument","container","querySelector","iconPlaceholder","navbar","padding","body","backgroundImage","setAttribute","innerHTML","addVocabularyIcon","data","insertAdjacentElement","classes","split","i","appendChild","offsetHeight","buttonLeft","homeButton","icon","contentDocument","buttonRight","type","selectedInput","inputs","inputIndex","keys","currentWord","latinWord","inflections","germanTranslation","relatedForeignWords","selected","probability","childElementCount","children","ii","remove","object","clientHeight","parseFloat","maxCharacters","Math","floor","innerWidth","Object","values","filter","value","svg","charAt","get","idontcare","put","keyDownFunction","key","lastElementChild","defineProperty","slice","setTimeout","forbiddenCharacters","includes","hidden","failureAnimation","idleAnimation","rect","text","animationKeyframes","stroke","offset","rotate","animationOptions","duration","animate","$543d6d2a56ed7d8d$export$927980128d33596b","showVocabularyIcon","str","span","innerText","navbarClickFunction","removeEventListener","forEach","word","Cdiv","div1","div2","div3","div4","append","gridTemplateRows","inputList","getElementsByClassName","input","item","size","maxLength","onblur","parseInt","trim","onkeydown","blur","onkeyup","letter","checkboxList","checked","checkboxDivList","saved","indicator","element","mouseover","clickFunction","index","cdiv","target","deleteWord","clearTimeout","querySelectorAll","e","splice","openCursor","cursor","k","updatedData","update","continue","delete","$543d6d2a56ed7d8d$export$e73a7799776ae73d","totalAttempts","totalPoints","commandMode","command","time","round","backgroundColor","setInterval","resizeFunction","inp","firstChild","movementAnimation","trainingIcon","mouseOverFunction","homeDiv","hd","button","inputStyling","offsetY","mode","returnLastElement","changeMade","currentWordIndex","replaceWith","fixedAnimation","isNaN","successAnimation","undefined","emptyLines","obj","resultStyling","toLocaleString","addition","w","startNewTrainingRound","commandAnimation","lowestDifference","savedProperty","alert","overallProbabilty","randomNumber","random","lastProbability","abs","max","rn","previousFixedDiv","t","specificationDiv","getElementById","findIndex","transition","paddingLeft","fill","innerHeight","scrollHeight","color","$543d6d2a56ed7d8d$export$82d34e6fb29a1ab3","tabMode","tabulator","tabCount","v","failures","badColor","param","inflectVocabularyIcon","tabIndex","fontSize","startsWith","cancelTabMode","onclick","deletionButton","elem","singular","empty","plural","verb","keydownFunction","changeSelectedInput","compare","array","compareObjects","clientWidth","childNodes","n","tabulatorAnimation","focus","deletionMode","deletionFunction","vocab1","vocab2","wi1","findLastIndex","wi2","overallIndexes","tabulatorStyle","tabulatorIndexes","push","find","indexes","parentElement","deletionAnimation","Array","from","broken","map","wi","vocab","search","l","regex","RegExp","matches","match","start_end","tab","findMostUsedTabulator","inflectedWord","tabs","start","end","concat","checkedTabs","sort","a","b","knownCase","isEmpty","s","p","string1","string2","obj1","obj2","object1","JSON","parse","stringify","object2","direction","tagName","boxShadow","border","$543d6d2a56ed7d8d$export$d12a05a2da93ee73","version","$543d6d2a56ed7d8d$export$7aa98d28c688390a"],"version":3,"file":"index.5b63dd8f.js.map"}